{"version":3,"sources":["Jsons sync /^/.*$","serviceWorker.ts","Model/Viewport.ts","Model/Position.ts","Controller/Storage/Language.ts","View/MapPage/FeatureInfo.tsx","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapConfiguration.ts","Model/Polygon.ts","Model/Color.ts","Model/ObservationStation.ts","Model/Observation.ts","Controller/TestConfiguration.ts","Model/Scale.ts","Model/Feature.ts","Controller/FeatureProvider.ts","Controller/FROST/MockDataProvider.ts","Controller/NearConfiguration.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/DetailPage.tsx","View/AboutPage.tsx","View/PrivacyPolicyPage.tsx","View/LayoutComponents/LanguageMenu.tsx","View/LayoutComponents/PageMenu.tsx","View/Layout.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","Position","latitude","longitude","Math","abs","pos","sqrt","pow","getLatitude","getLongitude","lat","lng","round","toString","Language","selectedLangId","languages","selectedLang","languageData","text","strings","alert","name","languageID","find","undefined","localStorage","setItem","langs","Map","forEach","element","set","languageInstance","local","getItem","changeLanguage","useStyles","makeStyles","theme","createStyles","typography","padding","spacing","icon","background","palette","primary","main","marginBottom","box","alignItems","display","language","getInstance","FeatureInfo","props","classes","React","useState","anchorEl","setAnchorEl","open","Avatar","className","aria-describedby","onClick","event","currentTarget","style","visibility","feature","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Box","Typography","getDescription","getText","Button","color","variant","href","getRelatedWeblink","StationInfo","lastObservation","getObservationStation","getId","station","Grid","alignContent","direction","getName","getPosition","getString","container","item","xs","getFeature","floor","getValue","getUnitOfMeasurement","openDetails","minWidth","Component","require","nextViewport","lock","oldViewport","state","viewport","pin","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","getZoom","updateViewport","onViewportChange","setState","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","Popup","onOpen","polygons","positions","getPositionsFromPolygon","MapPin","value","MapConfiguration","obsStation","getScale","Polygon","stations","Color","r","g","b","TypeError","toHex","n","hex","toUpperCase","length","exec","parseInt","ObservationStation","description","availableFeatures","found","counter","Observation","observationStation","timestamp","TestConfiguration","view","random","Date","now","values","index","getLatestObservationMock","push","avgValue","reduce","acc","c","getFeatures","getRelatedScale","features","Scale","linearTransition","colors","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","i","sort","tempDict","lowerIndex","a","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","Feature","nameId","descriptionId","scale","relatedWeblinkId","limit","unitOfMeasurement","drawableDiagramIds","FeatureProvider","context","definition","f","defaultScale","webLinkId","diagrams","key","featureId","includes","getFeatureById","replace","json","instance","MockDataProvider","randomColor","count","obs","mockStation","mockFeature","radius","q","fetch","result","observations","Observations","Thing","Datastreams","flatMap","d","ObservedProperty","Locations","coordinates","phenomenonTime","mockObservations","res","start","end","frequency","middle","query","console","log","gOSsPromise","response","isNullOrUndefined","NearConfiguration","selectedFeature","min","apply","p","max","sc","val","getLimit","getLatestObservations","buildNearScale","buildMapPin","PolygonConfiguration","getRadius","vertices","Delaunay","Point","tris","triangulate","polys","triangle","s1","p1","x","y","s2","p2","s3","p3","StationConfiguration","latestObs","DEFAULT_CONF","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","JSON","stringify","type","constructor","ls","parse","obj","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","getPins","getPolygons","searchTerm","encodeURIComponent","updateCurrentPosition","lon","setCenter","root","formControl","margin","FeatureSelect","setOpen","listAllFeatures","setFeature","setConfig","changeConfig","testConf","onConfigurationChange","nearConf","polyConf","stationConf","Card","CardContent","FormControl","InputLabel","Select","onChange","target","MenuItem","Search","locationEnabled","navigator","permissions","then","status","geolocation","getCurrentPosition","coords","updatePosition","err","Paper","TextField","input","label","onKeyPress","onSearch","IconButton","locationClick","iconButton","Divider","orientation","divider","disabled","withStyles","width","maxWidth","marginLeft","flex","height","backgroundColor","getStyleFromScale","grad","slice","Legend","border","MapPage","mapController","selectedStation","getViewport","update","pinPromise","polyPromsie","Promise","all","pinPoly","sortedPins","dis","disSum","temp","handleViewportChange","promise","changePopupStation","term","search","isFinite","getMin","getMax","onStationSelected","zIndex","bottom","right","ErrorPage","message","DetailPage","observationStationId","params","observationStationExists","errorMessage","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","getSelectedLanguage","handleClick","bind","handleClose","getAvailabeleLanguages","lang","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","langList","PageMenu","toogleDrawer","toogle","AppBar","Toolbar","component","Link","to","textDecoration","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","exact","path","createMuiTheme","green","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.53dea51b.chunk.js","sourcesContent":["var map = {\n\t\"./MockFeature\": 89,\n\t\"./MockFeature.json\": 89,\n\t\"./TestFeature\": 90,\n\t\"./TestFeature.json\": 90,\n\t\"./saqnopmcpm2p5\": 91,\n\t\"./saqnopmcpm2p5.json\": 91,\n\t\"./saqnopplev\": 92,\n\t\"./saqnopplev.json\": 92,\n\t\"./saqnopta\": 93,\n\t\"./saqnopta.json\": 93\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 139;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n}\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n  id: string;\n  name: string;\n  strings: Strings;\n}\n\ninterface Strings {\n  [id: string]: string;\n}\n\nexport default class Language {\n  private static languageInstance: Language;\n\n  private selectedLangId: string;\n  private languages: Lang[];\n  private selectedLang: Lang;\n\n  constructor() {\n    this.selectedLangId = \"de-de\";\n    this.languages = languageData.languages;\n    this.selectedLang = this.languages[0];\n  }\n\n  public static getInstance(): Language {\n    if (!this.languageInstance) {\n      this.languageInstance = new Language();\n      var local = localStorage.getItem(\"language\");\n      if (local) {\n        //Change language if selected\n        this.languageInstance.changeLanguage(local);\n      }\n    }\n    return this.languageInstance;\n  }\n\n  public getText(id: string): string {\n    let text: string = this.selectedLang.strings[id];\n    if (text === \"\" || text == null) {\n      alert(\n        \"There is no string with id: \" +\n          id +\n          \" in \" +\n          this.selectedLang.name +\n          \".\"\n      );\n      return \"STRING MISSING\";\n    }\n    return text;\n  }\n\n  public getSelectedLanguage(): string {\n    return this.selectedLang.name;\n  }\n\n  public getSelectedLanguageId(): string {\n    return this.selectedLang.id;\n  }\n\n  public changeLanguage(languageID: string): void {\n    let find: Lang | undefined = this.languages.find(\n      (e) => e.id === languageID\n    );\n    if (find !== undefined) {\n      this.selectedLang = find;\n      this.selectedLangId = languageID;\n      localStorage.setItem(\"language\", this.selectedLangId);\n    }\n  }\n\n  public getAvailabeleLanguages(): Map<string, string> {\n    let langs: Map<string, string> = new Map<string, string>();\n    this.languages.forEach((element) => {\n      langs.set(element.id, element.name);\n    });\n    return langs;\n  }\n}\n","import React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Avatar, Button, Box } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/InfoRounded\";\nimport { Feature } from \"../../Model/Feature\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        typography: {\n            padding: theme.spacing(2),\n        },\n        icon: {\n            background: theme.palette.primary.main,\n            marginBottom: \"10px\",\n        },\n        box: {\n            alignItems: \"center\",\n            display: \"flex\",\n            padding: \"1px\",\n        },\n    })\n);\n\nlet language = Language.getInstance();\nconst LINK_BUTTON = \"RelatedLink\";\n\ninterface IProps {\n    feature: Feature | null | undefined;\n}\n\nexport default function FeatureInfo(props: IProps) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<HTMLImageElement | null>(\n        null\n    );\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? \"simple-popover\" : undefined;\n\n    return (\n        <div>\n            <Avatar\n                className={classes.icon}\n                aria-describedby={id}\n                onClick={handleClick}\n                style={{ visibility: props.feature ? \"visible\" : \"hidden\" }}\n            >\n                <InfoIcon />\n            </Avatar>\n            <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"center\",\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                }}\n            >\n                <Box className={classes.box}>\n                    <Typography className={classes.typography}>\n                        {props.feature?.getDescription() ??\n                            language.getText(\"error\")}\n                    </Typography>\n                    <Button\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        href={\n                            props.feature?.getRelatedWeblink() ??\n                            language.getText(\"error\")\n                        }\n                    >\n                        {language.getText(LINK_BUTTON)}\n                    </Button>\n                </Box>\n            </Popover>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport Language from \"../../Controller/Storage/Language\";\nimport FeatureInfo from \"./FeatureInfo\";\n\nlet language: Language = Language.getInstance();\n\ninterface State {}\ninterface Props {\n    lastObservation: Observation;\n}\n\nconst DETAIL_PATH = \"detail/\";\n\nexport class StationInfo extends React.Component<Props, State> {\n    openDetails() {\n        window.location.href =\n            DETAIL_PATH +\n            this.props.lastObservation.getObservationStation().getId();\n    }\n\n    render() {\n        var station = this.props.lastObservation.getObservationStation();\n        return (\n            <Grid alignContent=\"center\" direction=\"column\" spacing={5}>\n                <Typography variant=\"h4\" color=\"secondary\">\n                    {station.getName()}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    {station.getPosition().getString()}\n                </Typography>\n                <Typography variant=\"h6\">\n                    <Grid container direction=\"row\" spacing={2}>\n                        <Grid item xs>\n                            {this.props.lastObservation.getFeature().getName() +\n                                \":\"}\n                        </Grid>\n                        <Grid item xs>\n                            <Typography\n                                variant=\"h6\"\n                                display=\"inline\"\n                                color=\"primary\"\n                            >\n                                {Math.floor(\n                                    this.props.lastObservation.getValue() * 100\n                                ) / 100}{\" \"}\n                                {this.props.lastObservation\n                                    .getFeature()\n                                    .getUnitOfMeasurement()}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Typography>\n                <FeatureInfo\n                    feature={this.props.lastObservation.getFeature()}\n                />\n                <Button\n                    onClick={() => this.openDetails()}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{ minWidth: \"300px\" }}\n                >\n                    {language.getText(\"stationInfoButton\")}\n                </Button>\n            </Grid>\n        );\n    }\n}\n","import \"./Map.css\";\nimport React from \"react\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\n\nimport {\n    Map as LeafletMap,\n    TileLayer,\n    Marker,\n    Polygon as LeafletPolygon,\n    Viewport as LeafletViewport,\n    Popup,\n} from \"react-leaflet\";\nimport { Position } from \"../../Model/Position\";\nimport { StationInfo } from \"./StationInfo\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport Language from \"../../Controller/Storage/Language\";\nrequire(\"leaflet-iconmaterial\");\n\nconst VIEW_UPDATE_DELAY = 500; // in ms\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\nconst DEFAULT_ZOOM = 5;\ninterface State {\n    viewport: Viewport;\n    lastObservation: Observation | null;\n}\n\ninterface Props {\n    onViewportChange: (viewport: Viewport) => void;\n    handlePopup: (pin: MapPin) => Promise<Observation>;\n    viewport: Viewport;\n    pins: MapPin[];\n    polygons: Polygon[];\n}\n\nexport class Map extends React.Component<Props, State> {\n    nextViewport: LeafletViewport | null;\n    lock: boolean;\n    oldViewport: Viewport | null;\n    constructor(props: Props) {\n        super(props);\n        this.lock = false;\n        this.nextViewport = null;\n        this.oldViewport = null;\n        this.state = {\n            viewport: this.props.viewport,\n            lastObservation: null,\n        };\n    }\n\n    private getIconFromMapPin(pin: MapPin): L.Icon {\n        // Custom icons with colors\n        //TODO: Add warning if limit is reached? (requires design change)\n        // @ts-ignore\n        var icon = L.IconMaterial.icon({\n            icon: \"\", // Name of Material icon\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\n            markerColor: pin.getColor().getHex(), // Marker fill color\n            outlineColor: \"black\", // Marker outline color\n            outlineWidth: 1, // Marker outline width\n        });\n        return icon;\n    }\n\n    private onViewportChange(viewport: LeafletViewport) {\n        this.nextViewport = viewport; //Update new viewport\n        if (!this.lock) {\n            if (!this.oldViewport) {\n                this.oldViewport = this.state.viewport; //Set viewport of last update\n            }\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\n            setTimeout(() => {\n                var newView = this.viewportLeafletToModel(\n                    this.nextViewport as LeafletViewport\n                );\n                this.lock = false;\n                if (\n                    this.oldViewport &&\n                    (newView\n                        .getCenter()\n                        .getDistance(this.oldViewport?.getCenter()) >\n                        DISTANCE_THRESHOLD ||\n                        Math.abs(\n                            newView.getZoom() - this.oldViewport?.getZoom()\n                        ) >= ZOOM_THRESHOLD)\n                ) {\n                    this.updateViewport(newView); //Only update if change has been significant\n                }\n            }, VIEW_UPDATE_DELAY);\n        }\n    }\n\n    private updateViewport(viewport: Viewport) {\n        this.props.onViewportChange(viewport);\n\n        this.setState({ viewport: viewport });\n        this.oldViewport = null;\n    }\n\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\n        return new Viewport(\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\n            viewport.zoom ?? DEFAULT_ZOOM\n        );\n    }\n\n    private async handlePopup(pin: MapPin) {\n        var observation = await this.props.handlePopup(pin);\n        this.setState({ lastObservation: observation });\n    }\n\n    private getPositionsFromPolygon(\n        polygon: Polygon\n    ): { lat: number; lng: number }[] {\n        return polygon\n            .getStations()\n            .map((obsSt: ObservationStation) =>\n                obsSt.getPosition().getCoordinates()\n            );\n    }\n\n    render() {\n        return (\n            <div>\n                <LeafletMap\n                    center={this.state.viewport.getCenter().getCoordinates()}\n                    zoom={this.state.viewport.getZoom()}\n                    onViewportChange={(v) => this.onViewportChange(v)}\n                >\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {this.props.pins.map((pin) => (\n                        <Marker\n                            position={pin.getPosition().getCoordinates()}\n                            icon={this.getIconFromMapPin(pin)}\n                        >\n                            <Popup onOpen={() => this.handlePopup(pin)}>\n                                {this.state.lastObservation ? (\n                                    <StationInfo\n                                        lastObservation={\n                                            this.state.lastObservation\n                                        }\n                                    />\n                                ) : (\n                                    <p>\n                                        {Language.getInstance().getText(\n                                            \"loading\"\n                                        )}\n                                    </p>\n                                )}\n                            </Popup>\n                        </Marker>\n                    ))}\n                    {this.props.polygons.map((polygon) => (\n                        <LeafletPolygon\n                            positions={this.getPositionsFromPolygon(polygon)}\n                            color={polygon.getColor().getHex()}\n                        />\n                    ))}\n                </LeafletMap>\n            </div>\n        );\n    }\n}\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../Model/Viewport\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\n\nexport default abstract class MapConfiguration {\n    protected buildMapPin(\n        obsStation: ObservationStation,\n        value: number\n    ): MapPin {\n        return new MapPin(\n            obsStation.getId(),\n            obsStation.getPosition(),\n            value,\n            this.getScale().getColor(value)\n        );\n    }\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\n    abstract getScale(): Scale;\n    abstract getFeatures(): Feature[];\n}\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        if (n < 0 || n > 255) {\n            return this.toHex(0); //This should never happen, only for reusing this method later.\n        }\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import { Position } from './Position';\nimport { Feature } from './Feature';\n\nexport class ObservationStation {\n    private id: string;\n    private name: string;\n    private description: string;\n    private position: Position;\n    private availableFeatures: Feature[];\n\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.position = position;\n        this.availableFeatures = availableFeatures;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public getPosition(): Position {\n        return this.position;\n    }\n\n    public getFeatures(): Feature[] {\n        return this.availableFeatures;\n    }\n\n    public getDiagramms(): void {\n\n    }\n\n    public hasFeature(feature: Feature): boolean {\n        //Not sure if this works \n        var found: boolean = false;\n        var length: number = this.availableFeatures.length;\n        for (var counter: number = 0; counter < length; counter++) {\n            if (feature === this.availableFeatures[counter]) {\n                found = true;\n            }\n        }\n        return found;\n    }\n}","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { Feature } from \"../Model/Feature\";\nimport { Color } from \"../Model/Color\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\nimport { Position } from \"../Model/Position\";\nimport { Observation } from \"../Model/Observation\";\n\nexport default class TestConfiguration extends MapConfiguration {\n    private feature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.feature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [\n            new MapPin(\n                view.getCenter().getString(),\n                view.getCenter(),\n                10,\n                new Color(\n                    Math.random() * 255,\n                    Math.random() * 255,\n                    Math.random() * 255\n                )\n            ),\n        ];\n    }\n\n    private async getLatestObservationMock(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        return new Observation(\n            station,\n            feature,\n            Math.random() * 50,\n            new Date(Date.now())\n        );\n    }\n\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\n        var stations = polygon.getStations();\n        var values = [];\n        for (let index = 0; index < stations.length; index++) {\n            var v = await this.getLatestObservationMock(\n                stations[index],\n                this.feature\n            );\n            values.push(v.getValue());\n        }\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\n        return this.getScale().getColor(avgValue);\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [\n            new Polygon(\n                [\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.4),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.5),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(50, 8.45),\n                        []\n                    ),\n                ],\n                new Color(0, 0, 0)\n            ),\n        ];\n    }\n\n    getScale(): Scale {\n        return this.getFeatures()[0].getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.feature];\n    }\n\n    setFeatures(features: Feature[]) {\n        if (features.length === 0) {\n            return; //no elements in array\n        }\n        this.feature = features[0];\n    }\n}\n","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import { Scale } from \"./Scale\";\nimport { Observation } from \"./Observation\";\nimport { ObservationStation } from \"./ObservationStation\";\nimport Language from \"../Controller/Storage/Language\";\nimport Diagram from \"../View/Diagram\";\n\nlet language = Language.getInstance();\n\nexport class Feature {\n    private id: string;\n    private nameId: string;\n    private descriptionId: string;\n    private scale: Scale;\n    private relatedWeblinkId: string;\n    private limit: number;\n    private unitOfMeasurement: string;\n    private drawableDiagramIds: string[];\n\n    constructor(\n        id: string,\n        nameId: string,\n        descriptionId: string,\n        scale: Scale,\n        relatedWeblinkId: string,\n        limit: number,\n        unitOfMeasurement: string,\n        drawableDiagramIds: string[]\n    ) {\n        this.id = id;\n        this.nameId = nameId;\n        this.descriptionId = descriptionId;\n        this.scale = scale;\n        this.relatedWeblinkId = relatedWeblinkId;\n        this.limit = limit;\n        this.unitOfMeasurement = unitOfMeasurement;\n        this.drawableDiagramIds = drawableDiagramIds;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return language.getText(this.nameId);\n        //return this.nameId;\n    }\n\n    public getDescription(): string {\n        return language.getText(this.descriptionId);\n        //return this.descriptionId;\n    }\n\n    public getRelatedScale(): Scale {\n        return this.scale;\n    }\n\n    public getRelatedWeblink(): string {\n        return language.getText(this.relatedWeblinkId);\n        //return this.relatedWeblinkId;\n    }\n\n    //Todo: implement Method\n    public getDrawableDiagrams(\n        observationStation: ObservationStation\n    ): Diagram[] {\n        var diagrams: Diagram[] = [];\n        return diagrams;\n    }\n\n    public getLimit(): number {\n        return this.limit;\n    }\n\n    public getUnitOfMeasurement(): string {\n        return this.unitOfMeasurement;\n    }\n\n    public isLimitExceeded(observation: Observation): boolean {\n        return observation.getValue() > this.limit;\n    }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\n\nexport default class FeatureProvider {\n    private context: any;\n    private features: { [id: string]: Feature };\n    private static instance: FeatureProvider | null = null;\n\n    constructor() {\n        this.features = {};\n        this.context = require.context(\"../Jsons/\", true);\n    }\n\n    static getInstance(): FeatureProvider {\n        if (!this.instance) {\n            this.instance = new FeatureProvider();\n        }\n        return this.instance;\n    }\n\n    private addFeature(definition: FeatureDefinition) {\n        if (definition) {\n            var f = new Feature(\n                definition.id,\n                definition.nameId,\n                definition.descriptionId,\n                new Scale(true, definition.defaultScale),\n                definition.webLinkId,\n                definition.limit,\n                definition.unitOfMeasurement,\n                definition.diagrams\n            );\n            this.features[f.getId()] = f;\n        }\n    }\n\n    //Returns all loaded features\n    listAllFeatures(): Feature[] {\n        return Object.keys(this.features).map((key) => {\n            return this.features[key];\n        });\n    }\n\n    getFeature(featureId: string): Feature | undefined {\n        if (Object.keys(this.features).includes(featureId)) {\n            return this.features[featureId];\n        } else {\n            var f = this.getFeatureById(featureId);\n            if (f) {\n                //Successfully read feature json\n                this.features[featureId] = f;\n                return f;\n            } else {\n                //console.log(\"Failed to read, \" + featureId, \".\");\n                return undefined;\n            }\n        }\n    }\n\n    private getFeatureById(featureId: string): Feature | null {\n        featureId = featureId.replace(/:/g, \"\");\n        try {\n            var json = this.context(\"./\" + featureId + \".json\");\n        } catch {\n            return null;\n        }\n        if (!json) {\n            return null; //Failed to read file\n        }\n        var definition = json as FeatureDefinition;\n        return new Feature(\n            definition.id,\n            definition.nameId,\n            definition.descriptionId,\n            new Scale(true, definition.defaultScale),\n            definition.webLinkId,\n            definition.limit,\n            definition.unitOfMeasurement,\n            definition.diagrams\n        );\n    }\n}\n\ninterface FeatureDefinition {\n    id: string;\n    nameId: string;\n    unitOfMeasurement: string;\n    descriptionId: string;\n    defaultScale: { [key: number]: string };\n    webLinkId: string;\n    limit: number;\n    diagrams: string[];\n}\n","import { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Color } from \"../../Model/Color\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport { isNullOrUndefined } from \"util\";\n\nexport default class MockDataProvider {\n    private static stations: { [key: string]: ObservationStation } = {};\n    private static gOSsPromise: Promise<any>;\n\n    private static randomColor(): Color {\n        return new Color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n    }\n    static mockFeature(): Feature {\n        var colors: { [key: number]: string } = {};\n        for (let index = 0; index < 5; index++) {\n            var c = this.randomColor().getHex();\n            colors[Math.floor(Math.random() * 100)] = c;\n        }\n        var scale = new Scale(true, colors);\n        return new Feature(\n            \"MockFeature\",\n            \"nameId\",\n            \"descId\",\n            scale,\n            \"weblink\",\n            100,\n            \"uoM\",\n            []\n        );\n    }\n    private static mockStation(center: Position): ObservationStation {\n        var id = Math.floor(Math.random() * 10000).toString();\n        var station = new ObservationStation(\n            id,\n            \"mockName\",\n            \"mockDesc\",\n            new Position(\n                center.getLatitude() + 6 * Math.random() - 3,\n                center.getLongitude() + 6 * Math.random() - 3\n            ),\n            []\n        );\n        MockDataProvider.stations[station.getId()] = station;\n        return station;\n    }\n    private static mockObservations(center: Position): Observation[] {\n        var count = Math.floor(Math.random() * 9) + 2;\n        var obs = [];\n        for (let i = 0; i < count; i++) {\n            obs.push(\n                new Observation(\n                    this.mockStation(center),\n                    this.mockFeature(),\n                    Math.random() * 100,\n                    new Date(Date.now())\n                )\n            );\n        }\n        return obs;\n    }\n\n    static async getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Promise<Observation[]> {\n        var q =\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\n            \"$select=@iot.id,name\" +\n            \"&$filter=geo.distance(Thing/Locations/location,geography'POINT({lon} {lat})') lt {radius} and \" +\n            \"overlaps(phenomenonTime,(now() sub duration'P1d')) and \" +\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\n            \"&$expand=Thing($select=name,@iot.id;$expand=Locations($select=location),\" +\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)),\" +\n            \"Observations($select=result,phenomenonTime;$filter=\" +\n            \"phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1\" +\n            \")\";\n        q = q\n            .replace(/{lon}/g, center.getLongitude().toString())\n            .replace(/{lat}/g, center.getLatitude().toString())\n            .replace(/{radius}/g, radius.toString())\n            .replace(/{featureId}/g, feature.getId());\n        var json = await (await fetch(q)).json();\n        var result: IGetLatestObs[] = json.value;\n        var observations: Observation[] = [];\n        result.forEach((element) => {\n            if (element.Observations.length !== 0) {\n                var features: Feature[] = element.Thing.Datastreams.flatMap(\n                    (d) => {\n                        var f = FeatureProvider.getInstance().getFeature(\n                            d.ObservedProperty[\"@iot.id\"]\n                        );\n                        return f ?? [];\n                    }\n                );\n\n                var o = new Observation(\n                    new ObservationStation(\n                        element.Thing[\"@iot.id\"],\n                        element.Thing.name,\n                        element.Thing[\"@iot.id\"] + \"_desc\",\n                        new Position(\n                            element.Thing.Locations[0].location.coordinates[1],\n                            element.Thing.Locations[0].location.coordinates[0]\n                        ),\n                        features\n                    ),\n                    feature,\n                    element.Observations[0].result ?? -1,\n                    new Date(element.Observations[0].phenomenonTime)\n                );\n                observations.push(o);\n                MockDataProvider.stations[\n                    o.getObservationStation().getId()\n                ] = o.getObservationStation();\n            }\n        });\n\n        return observations;\n    }\n\n    static async getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        if (feature.getId() === \"MockFeature\") {\n            return this.mockObservations(station.getPosition())[0];\n        }\n        var q =\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\n            \"$select=@iot.id\" +\n            \"&$filter=Thing/@iot.id eq '{stationId}' and \" +\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\n            \"&$expand=Observations(\" +\n            \"$top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\";\n        q = q\n            .replace(/{featureId}/g, feature.getId())\n            .replace(/{stationId}/g, station.getId());\n        var res: IGetLatestObservation[] = (await (await fetch(q)).json())\n            .value;\n        //console.log(res);\n        if (!res || res.length === 0) {\n            return new Observation(station, feature, -1, new Date(Date.now()));\n        }\n        return new Observation(\n            station,\n            feature,\n            res[0].Observations[0].result,\n            new Date(res[0].Observations[0].phenomenonTime)\n        );\n    }\n\n    static getObservations(\n        station: ObservationStation,\n        start: Date,\n        end: Date,\n        feature: Feature,\n        frequency?: Date\n    ): Observation[] {\n        throw new Error(\"Not implemented\");\n    }\n\n    static async getObservationStations(\n        middle: Position,\n        radius: number\n    ): Promise<ObservationStation[]> {\n        var query =\n            \"https://api.smartaq.net/v1.0/Things?\" +\n            \"$filter=geo.distance(Locations/location,geography'POINT({lon} {lat})') \" +\n            \"lt {radius} \" +\n            \"and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))\" +\n            \"&$expand=Locations($select=location),\" +\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)\";\n        console.log(\n            query\n                .replace(/{lon}/g, middle.getLongitude().toString())\n                .replace(/{lat}/g, middle.getLatitude().toString())\n                .replace(/{radius}/g, radius.toString())\n        );\n        MockDataProvider.gOSsPromise = fetch(\n            query\n                .replace(/{lon}/g, middle.getLongitude().toString())\n                .replace(/{lat}/g, middle.getLatitude().toString())\n                .replace(/{radius}/g, radius.toString())\n        );\n        var response = await (await MockDataProvider.gOSsPromise).json();\n        var obs: ObservationStation[] = [];\n        response.value.forEach((element: IGetObservationStations) => {\n            var features: Feature[] = element.Datastreams.flatMap((d) => {\n                var f = FeatureProvider.getInstance().getFeature(\n                    d.ObservedProperty[\"@iot.id\"]\n                );\n                if (!isNullOrUndefined(f)) {\n                    return f as Feature;\n                } else {\n                    return [];\n                }\n            });\n            var o = new ObservationStation(\n                element[\"@iot.id\"],\n                element.name,\n                element.description,\n                new Position(\n                    element.Locations[0].location.coordinates[1],\n                    element.Locations[0].location.coordinates[0]\n                ),\n                features\n            );\n            obs.push(o);\n            MockDataProvider.stations[o.getId()] = o;\n        });\n        return obs;\n    }\n\n    static getStation(id: string): ObservationStation {\n        return MockDataProvider.stations[id];\n    }\n}\n\ninterface IGetObservationStations {\n    \"@iot.id\": string;\n    name: string;\n    description: string;\n    Locations: [\n        {\n            location: {\n                coordinates: [number, number, number];\n            };\n        }\n    ];\n    Datastreams: {\n        ObservedProperty: {\n            \"@iot.id\": string;\n        };\n    }[];\n}\n\ninterface IGetLatestObservation {\n    Observations: [\n        {\n            phenomenonTime: string;\n            result: number;\n        }\n    ];\n}\n\ninterface IGetLatestObs {\n    \"@iot.id\": string;\n    Thing: {\n        \"@iot.id\": string;\n        Locations: [\n            {\n                location: {\n                    coordinates: [number, number];\n                };\n            }\n        ];\n        name: string;\n        Datastreams: {\n            ObservedProperty: {\n                \"@iot.id\": string;\n            };\n        }[];\n    };\n    Observations: {\n        result: number;\n        phenomenonTime: string;\n    }[];\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { Feature } from \"../Model/Feature\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport { Observation } from \"../Model/Observation\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\n\nconst SAMPLE_SCALE = 20;\n\nexport default class NearConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n    private scale: Scale;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n        this.scale = this.selectedFeature.getRelatedScale();\n    }\n\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\n        return new MapPin(\n            obs.getId(),\n            obs.getPosition(),\n            value,\n            this.scale.getColor(value)\n        );\n    }\n\n    private buildNearScale(observations: Observation[]): Scale {\n        var min = Math.min.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n        var max = Math.max.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n\n        var sc: { [key: number]: string } = {};\n        // Sample 10 times between 0 => min and limit of feature => max\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\n            sc[key] = this.selectedFeature\n                .getRelatedScale()\n                .getColor(val)\n                .getHex();\n        }\n        return new Scale(true, sc);\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var observations = await MockDataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n\n        this.scale = this.buildNearScale(observations);\n\n        var pins: MapPin[] = [];\n        observations.forEach((o) => {\n            pins.push(\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n        });\n        return pins;\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n    getScale(): Scale {\n        return this.scale;\n    }\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Feature } from \"../../Model/Feature\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport MockDataProvider from \"../FROST/MockDataProvider\";\n//@ts-ignore\nimport Delaunay from \"delaunay-triangulation\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\n\nexport default class PolygonConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [];\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        var observations = await MockDataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getRadius(),\n            this.selectedFeature\n        );\n        var stations: {\n            [key: string]: Observation;\n        } = {};\n        var vertices: Delaunay.Point[] = [];\n\n        for (let index = 0; index < observations.length; index++) {\n            stations[\n                observations[index]\n                    .getObservationStation()\n                    .getPosition()\n                    .getString()\n            ] = observations[index];\n            vertices.push(\n                new Delaunay.Point(\n                    observations[index]\n                        .getObservationStation()\n                        .getPosition()\n                        .getLatitude(),\n                    observations[index]\n                        .getObservationStation()\n                        .getPosition()\n                        .getLongitude()\n                )\n            );\n        }\n\n        var tris = Delaunay.triangulate(vertices);\n        var polys: Polygon[] = [];\n        tris.forEach((triangle: any) => {\n            var s1 =\n                stations[\n                    new Position(triangle.p1.x, triangle.p1.y).getString()\n                ];\n            var s2 =\n                stations[\n                    new Position(triangle.p2.x, triangle.p2.y).getString()\n                ];\n            var s3 =\n                stations[\n                    new Position(triangle.p3.x, triangle.p3.y).getString()\n                ];\n            var avgValue = (s1.getValue() + s2.getValue() + s3.getValue()) / 3;\n            polys.push(\n                new Polygon(\n                    [\n                        s1.getObservationStation(),\n                        s2.getObservationStation(),\n                        s3.getObservationStation(),\n                    ],\n                    this.getScale().getColor(avgValue)\n                )\n            );\n        });\n\n        return polys;\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { MapPin } from \"../Model/MapPin\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport { Feature } from \"../Model/Feature\";\n\nexport default class StationConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var latestObs = await MockDataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n        return latestObs.map((o) =>\n            this.buildMapPin(o.getObservationStation(), o.getValue())\n        );\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport TestConfiguration from \"../TestConfiguration\";\nimport NearConfiguration from \"../NearConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\nimport StationConfiguration from \"../StationConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport { isNullOrUndefined } from \"util\";\n\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\nconst DEFAULT_CONF = new StationConfiguration(\n    FeatureProvider.getInstance().getFeature(\"MockFeature\") as Feature //TODO: MockFeature has to be there or the app crashes\n);\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\n\nexport default class MapConfigurationMemory {\n    static save(conf: MapConfiguration, view: Viewport) {\n        localStorage.setItem(\n            LOCALSTORAGE_MAPCONF,\n            JSON.stringify({\n                type: conf.constructor.name,\n                feature: conf.getFeatures()[0].getId(),\n                view: view,\n            })\n        );\n    }\n\n    static load(): [MapConfiguration, Viewport] {\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\n        if (\n            ls &&\n            (JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: Viewport;\n            })\n        ) {\n            //return configuration if it exists\n            var obj = JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: any;\n            };\n            var view = new Viewport(\n                new Position(\n                    obj.view.center.latitude,\n                    obj.view.center.longitude\n                ),\n                obj.view.zoom\n            );\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\n            if (isNullOrUndefined(feature)) {\n                throw new Error(\n                    \"Feature \" + obj.feature + \" is not supported.\"\n                );\n            }\n            if (obj.type === \"NearConfiguration\") {\n                return [new NearConfiguration(feature), view];\n            } else if (obj.type === \"PolygonConfiguration\") {\n                return [new PolygonConfiguration(feature), view];\n            } else if (obj.type === \"StationConfiguration\") {\n                return [new StationConfiguration(feature), view];\n            } else {\n                return [new TestConfiguration(feature), view];\n            }\n        }\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\n    }\n}\n","import { MapPin } from \"../Model/MapPin\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Position } from \"../Model/Position\";\nimport { Observation } from \"../Model/Observation\";\nimport { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport { Polygon } from \"../Model/Polygon\";\nimport MapConfiguration from \"./MapConfiguration\";\nimport MapConfigurationMemory from \"./Storage/MapConfigurationMemory\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport PolygonConfiguration from \"./MapPage/PolygonConfiguration\";\n\nexport class MapController {\n    private config: MapConfiguration;\n    private viewport: Viewport;\n\n    private DEFAULT_POSITION: Position = new Position(49, 8.4);\n    private DEFAULT_ZOOM: number = 5;\n\n    constructor(useMemory: boolean = true) {\n        if (useMemory) {\n            var mcm = MapConfigurationMemory.load();\n            this.config = mcm[0];\n            this.viewport = mcm[1];\n        } else {\n            this.viewport = new Viewport(\n                this.DEFAULT_POSITION,\n                this.DEFAULT_ZOOM\n            );\n            this.config = new PolygonConfiguration(\n                MockDataProvider.mockFeature()\n            );\n        }\n        if (this.config.getFeatures().length === 0) {\n            throw Error(\"Invalid MapConfiguration\");\n        }\n    }\n\n    async handlePopup(pin: MapPin): Promise<Observation> {\n        var station = await MockDataProvider.getStation(pin.getId());\n        return MockDataProvider.getLatestObservation(\n            station,\n            this.config.getFeatures()[0]\n        );\n    }\n\n    private save() {\n        MapConfigurationMemory.save(this.config, this.viewport);\n    }\n\n    getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    handleViewportChange(viewport: Viewport) {\n        this.viewport = viewport;\n        this.save();\n    }\n\n    async getPins(): Promise<MapPin[]> {\n        return this.config.getPins(this.viewport);\n    }\n\n    async getPolygons(): Promise<Polygon[]> {\n        return this.config.getPolygons(this.viewport);\n    }\n\n    getScale(): Scale {\n        return this.config.getScale();\n    }\n\n    changeFeature(feature: Feature) {\n        //TODO\n    }\n\n    onConfigurationChange(conf: MapConfiguration) {\n        this.config = conf;\n        this.save();\n    }\n\n    async search(searchTerm: string) {\n        if (searchTerm.length === 0) {\n            return; //No search possible\n        }\n\n        var response = await fetch(\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\n                encodeURIComponent(searchTerm)\n        );\n        var json = await response.json();\n        if (json.length === 0) {\n            return; //No location found\n        }\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\n    }\n\n    updateCurrentPosition(position: Position) {\n        this.viewport.setCenter(position);\n        console.log(position);\n    }\n}\n","import React, { useState } from \"react\";\nimport {\n    Avatar,\n    Card,\n    CardContent,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport MapConfiguration from \"../../Controller/MapConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\nimport NearConfiguration from \"../../Controller/NearConfiguration\";\nimport StationConfiguration from \"../../Controller/StationConfiguration\";\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\ninterface Props {\n    onConfigurationChange(mapConfig: MapConfiguration): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: theme.palette.primary.main,\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n    })\n);\n\nexport default function FeatureSelect(props: Props) {\n    const TEST_CONFIG = \"TestConfiguration\";\n    const NEAR_CONFIG = \"NearConfiguration\";\n    const POLY_CONFIG = \"PolygonConfiguration\";\n    const STATION_CONFIG = \"StationConfiguration\";\n    const classes = useStyles();\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\n    const [feature, setFeature] = useState<Feature | undefined>(\n        FeatureProvider.getInstance().listAllFeatures()[0]\n    );\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setOpen(open ? null : event.currentTarget);\n    };\n\n    const changeConfig = (conf: string, feature: Feature) => {\n        console.log(conf);\n        setConfig(conf);\n        switch (conf) {\n            case TEST_CONFIG:\n                var testConf = new TestConfiguration(feature); //Create new config\n                props.onConfigurationChange(testConf);\n                break;\n            case NEAR_CONFIG:\n                var nearConf = new NearConfiguration(feature); //Create new config\n                props.onConfigurationChange(nearConf);\n                break;\n            case POLY_CONFIG:\n                var polyConf = new PolygonConfiguration(feature); //Create new config\n                props.onConfigurationChange(polyConf);\n                break;\n            case STATION_CONFIG:\n                var stationConf = new StationConfiguration(feature); //Create new config\n                props.onConfigurationChange(stationConf);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleFeatureChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        var f = FeatureProvider.getInstance().getFeature(\n            event.target.value as string\n        ); //Feature Id\n        setFeature(f);\n\n        if (f) {\n            if (config) {\n                changeConfig(config, f);\n            } else {\n                throw new Error(\"No config selected\");\n            }\n        }\n    };\n\n    const handleConfigChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        if (!feature) {\n            return; //A feature has to be selected, should never happen.\n        }\n        changeConfig(event.target.value as string, feature);\n        //window.location.reload(); //Reload with new config\n    };\n\n    return (\n        <div>\n            <Avatar className={classes.root} onClick={handleClick}>\n                <LayersIcon />\n            </Avatar>\n            {open ? (\n                <Card variant=\"outlined\">\n                    <CardContent>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>{\"Feature\"}</InputLabel>\n                            <Select\n                                onChange={handleFeatureChange}\n                                value={feature?.getId() ?? \"\"}\n                            >\n                                {FeatureProvider.getInstance()\n                                    .listAllFeatures()\n                                    .map((f) => (\n                                        <MenuItem value={f.getId()}>\n                                            {f.getName()}\n                                        </MenuItem>\n                                    ))}\n                            </Select>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>{\"Style\"}</InputLabel>\n                            <Select\n                                onChange={handleConfigChange}\n                                value={config ?? \"\"}\n                            >\n                                <MenuItem value={POLY_CONFIG}>\n                                    {POLY_CONFIG}\n                                </MenuItem>\n                                <MenuItem value={STATION_CONFIG}>\n                                    {STATION_CONFIG}\n                                </MenuItem>\n                                <MenuItem value={NEAR_CONFIG}>\n                                    {NEAR_CONFIG}\n                                </MenuItem>\n                            </Select>\n                        </FormControl>\n                    </CardContent>\n                </Card>\n            ) : (\n                \"\"\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    TextField,\n    Paper,\n    IconButton,\n    Divider,\n    Theme,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LocationIcon from \"@material-ui/icons/LocationOn\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({\n    root: {\n        margin: \"5px 5px\",\n        padding: \"2px 4px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        width: \"100%\",\n        maxWidth: \"500px\",\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n});\n\nlet language = Language.getInstance();\n\ninterface Props {\n    classes: any;\n    onSearch(term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nclass Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Paper className={this.props.classes.root}>\n                <TextField\n                    type=\"search\"\n                    variant=\"outlined\"\n                    className={this.props.classes.input}\n                    label={language.getText(\"search\")}\n                    onKeyPress={(e) => {\n                        if (e.key === \"Enter\") {\n                            this.props.onSearch(this.state.searchTerm); //Enter key was pressed, search for this.state.searchTerm\n                        }\n                    }}\n                    onChange={(e) => {\n                        this.setState({ searchTerm: e.target.value });\n                    }}\n                    value={this.state.searchTerm}\n                />\n                <IconButton\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                >\n                    <SearchIcon />\n                </IconButton>\n                <Divider\n                    orientation=\"vertical\"\n                    className={this.props.classes.divider}\n                />\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                    disabled={!this.state.locationEnabled}\n                >\n                    <LocationIcon />\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles)(Search);\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        box: {\n            padding: theme.spacing(1),\n            width: \"50px\",\n            backgroundColor: \"white\",\n        },\n    })\n);\n\ninterface Props {\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"80px\",\n        width: \"40px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Box className={classes.box} border={1}>\n            <Grid container direction=\"column\">\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Legend;\n","import React from \"react\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Map } from \"./Map\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapController } from \"../../Controller/MapController\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport FeatureSelect from \"./FeatureSelect\";\nimport Search from \"./Search\";\nimport Legend from \"./Legend\";\nimport { Box, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = (theme: Theme) => ({});\n\ninterface State {\n    selectedStation: ObservationStation | null;\n    pins: MapPin[];\n    polygons: Polygon[];\n    viewport: Viewport;\n}\n\ninterface Props {\n    classes: any;\n}\n\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\n\nclass MapPage extends React.Component<Props, State> {\n    mapController: MapController;\n\n    constructor(props: Props) {\n        super(props);\n        this.mapController = new MapController();\n\n        this.state = {\n            selectedStation: null,\n            viewport: this.mapController.getViewport(),\n            pins: [],\n            polygons: [],\n        };\n        this.update();\n    }\n\n    // Set station as source for the StationInfo Popup\n    changePopupStation(station: ObservationStation) {\n        this.setState({\n            selectedStation: station,\n        });\n    }\n\n    // Reload Pins and Polygons\n    update() {\n        var pinPromise = this.mapController.getPins();\n        var polyPromsie = this.mapController.getPolygons();\n        Promise.all([pinPromise, polyPromsie]).then((pinPoly) => {\n            this.setState({\n                pins: pinPoly[0],\n                polygons: pinPoly[1],\n            });\n        });\n    }\n\n    getValueAt(position: Position, feature: Feature): number {\n        // Get pins sorted by distance\n        var sortedPins = this.state.pins.sort((a, b) => {\n            return (\n                a.getPosition().getDistance(position) -\n                b.getPosition().getDistance(position)\n            );\n        });\n        var dis = 0; //Distance of nearest station to position\n        var disSum = 0;\n        if (sortedPins.length !== 0) {\n            dis = sortedPins[0].getPosition().getDistance(position);\n        }\n        var value = 0;\n        for (let i = 0; i <= 2; i++) {\n            //nearest 3 stations (if they exist)\n            if (sortedPins.length > i) {\n                var temp =\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\n                disSum += temp;\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\n            }\n        }\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\n    }\n\n    onViewportChange(viewport: Viewport) {\n        this.mapController.handleViewportChange(viewport);\n        //Update Page\n        this.setState({\n            viewport: viewport,\n        });\n        this.update();\n    }\n\n    async onStationSelected(pin: MapPin): Promise<Observation> {\n        this.setState({ selectedStation: null });\n        var promise = this.mapController.handlePopup(pin);\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\n        return promise;\n    }\n\n    onSearch(term: string) {\n        this.mapController.search(term);\n        this.setState({ selectedStation: this.state.selectedStation });\n    }\n\n    getMin(): number {\n        var min = Math.min.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(min)) {\n            min = DEFAULT_MIN;\n        }\n        return min;\n    }\n\n    getMax(): number {\n        var max = Math.max.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(max)) {\n            max = DEFAULT_MAX;\n        }\n        return max;\n    }\n\n    render() {\n        var min = this.getMin();\n        var max = this.getMax();\n        return (\n            <Box>\n                <Search\n                    onSearch={(term) => this.onSearch(term)}\n                    updatePosition={(pos) => {\n                        var view = this.state.viewport;\n                        view.setCenter(pos);\n                        this.onViewportChange(view);\n                    }}\n                />\n                <Map\n                    viewport={this.state.viewport}\n                    onViewportChange={(viewport) => {\n                        this.onViewportChange(viewport);\n                    }}\n                    handlePopup={(pin) => this.onStationSelected(pin)}\n                    pins={this.state.pins}\n                    polygons={this.state.polygons}\n                />\n                <FeatureSelect\n                    onConfigurationChange={(conf) => {\n                        this.mapController.onConfigurationChange(conf);\n                        this.update();\n                    }}\n                />\n                <Box\n                    zIndex={1000}\n                    style={{ position: \"absolute\", bottom: \"7%\", right: \"5%\" }}\n                >\n                    <Legend\n                        min={min}\n                        max={max}\n                        scale={this.mapController.getScale()}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(MapPage);\n","import React from 'react';\nimport { Fragment } from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </Fragment>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\nimport { Fragment } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ErrorPage from \"./ErrorPage\";\n\nexport default class DetailPage extends React.Component<\n    IDetailPageProps,\n    IDetailPageState\n> {\n    observationStationId: string;\n\n    constructor(props: IDetailPageProps) {\n        super(props);\n        this.observationStationId = this.props.match.params.id;\n    }\n\n    //Todo: Diese Methode überprüft über den DataProvider, ob eine ObservationStation mit der übergebenen id existiert\n    observationStationExists(observationStationId: string): boolean {\n        return true;\n    }\n\n    render() {\n        if (this.observationStationExists(this.observationStationId)) {\n            return (\n                <Fragment>\n                    <h1>Detail Page</h1>\n                    <p>\n                        {\" \"}\n                        von Messstation mit der id: {this.props.match.params.id}\n                    </p>\n                </Fragment>\n            );\n        } else {\n            var errorCode = 404;\n            //Todo: error Message sollte über eine string id in verschiedenen Sprachen abgerufen werden können\n            var errorMessage =\n                \"There is no observation station with the id: \" +\n                this.observationStationId;\n            return (\n                <Fragment>\n                    <ErrorPage code={errorCode} message={errorMessage} />\n                </Fragment>\n            );\n        }\n    }\n}\n\ninterface IDetailPageProps extends RouteComponentProps<{ id: string }> {}\n\ninterface IDetailPageState {}\n","import React from \"react\";\nimport { Fragment } from \"react\";\n\nexport default class AboutPage extends React.Component<\n    IAboutPageProps,\n    IAboutPageState\n> {\n    render() {\n        return (\n            <Fragment>\n                <h1>AboutPage</h1>\n            </Fragment>\n        );\n    }\n}\n\ninterface IAboutPageProps {}\n\ninterface IAboutPageState {}\n","import React from \"react\";\n\nexport default class PrivacyPolicyPage extends React.Component<\n    IPrivacyPolicyPageProps,\n    IPrivacyPolicyPageState\n> {\n    render() {\n        return <h1>Privacy Policy Page</h1>;\n    }\n}\n\ninterface IPrivacyPolicyPageProps {}\n\ninterface IPrivacyPolicyPageState {}\n","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n  selectedLang: string;\n  anchorEl: Element | null;\n}\n\ninterface IProps {\n  language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n  private availableLanguages: Map<string, string>;\n  private ref: any;\n  private language: Language;\n\n  constructor(props: IProps) {\n    super(props);\n    this.language = props.language;\n    this.state = {\n      selectedLang: this.language.getSelectedLanguage(),\n      anchorEl: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.availableLanguages = this.language.getAvailabeleLanguages();\n  }\n\n  isSelectedLang(lang: string): boolean {\n    //return lang === this.state.selectedLang;\n    return false;\n  }\n\n  handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n    this.setState({ anchorEl: event.currentTarget });\n  }\n\n  handleClose(): void {\n    this.setState({ anchorEl: null });\n  }\n\n  handleMenuItemClick(event: React.MouseEvent<HTMLElement>, id: string): void {\n    this.language.changeLanguage(id);\n    window.location.reload();\n    this.setState({\n      anchorEl: null,\n      selectedLang: this.language.getSelectedLanguage(),\n    });\n  }\n\n  langList(): JSX.Element[] {\n    let list: JSX.Element[] = [];\n    this.availableLanguages.forEach((lang: string, id: string) => {\n      list.push(\n        <MenuItem\n          onClick={(e) => this.handleMenuItemClick(e, id)}\n          selected={id === this.language.getSelectedLanguageId()}\n        >\n          {lang}\n        </MenuItem>\n      );\n    });\n    return list;\n  }\n\n  render(): JSX.Element {\n    return (\n      <div>\n        <Button\n          onClick={this.handleClick}\n          color=\"inherit\"\n          startIcon={<Translate />}\n          endIcon={<ExpandMore />}\n          aria-controls=\"simple-menu\"\n          aria-haspopup=\"true\"\n        >\n          {this.state.selectedLang}\n        </Button>\n        <Menu\n          open={Boolean(this.state.anchorEl)}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n        >\n          {this.langList()}\n        </Menu>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQnet\n                        </Typography>\n                        <div style={{ marginLeft: 'auto' }}>\n\n                            <LanguageMenu language={this.language} />\n\n                        </div>\n                        <div>\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\n                                <MenuIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}","import React from \"react\";\nimport MapPage from \"./MapPage/MapPage\";\nimport DetailPage from \"./DetailPage\";\nimport ErrorPage from \"./ErrorPage\";\nimport AboutPage from \"./AboutPage\";\nimport PrivacyPolicyPage from \"./PrivacyPolicyPage\";\nimport PageMenu from \"./LayoutComponents/PageMenu\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Language from \"../Controller/Storage/Language\";\n\nfunction Layout() {\n    let language: Language = Language.getInstance();\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <PageMenu language={language} />\n                <Switch>\n                    <Route\n                        exact\n                        path=\"/pse-airquality-react/\"\n                        component={MapPage}\n                    />\n                    <Route\n                        exact\n                        path=\"/pse-airquality-react/detail/:id\"\n                        component={DetailPage}\n                    />\n                    <Route\n                        exact\n                        path=\"/pse-airquality-react/about\"\n                        component={AboutPage}\n                    />\n                    <Route\n                        exact\n                        path=\"/pse-airquality-react/privacy-policy\"\n                        component={PrivacyPolicyPage}\n                    />\n                    {/* If no url pattern matches an error page is shown */}\n                    <Route>\n                        <ErrorPage\n                            code={404}\n                            message={Language.getInstance().getText(\"Error404\")}\n                        />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport green from \"@material-ui/core/colors/green\";\nimport Layout from \"./View/Layout\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[500],\n        },\n        secondary: {\n            main: purple[500],\n        },\n    },\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <Layout />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}