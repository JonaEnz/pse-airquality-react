{"version":3,"sources":["View/DetailPage sync /^.*$","View/DetailPage/marker_icon.svg","serviceWorker.ts","Model/Viewport.ts","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapPage/MapConfiguration.ts","Model/Polygon.ts","Controller/TestConfiguration.ts","Controller/MapPage/NearConfiguration.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/MapPage/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapPage/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/About.tsx","View/PrivacyPolicy.tsx","View/Layout/LanguageMenu.tsx","View/Layout/PageMenu.tsx","View/Layout/Layout.tsx","Controller/Storage/Configuration.ts","index.tsx","Model/Position.ts","Controller/Storage/Language.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/MockDataProvider.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastYearPieChartController.ts","Controller/DiagramController/YearComparisonLineChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","Controller/FeatureProvider.ts","Model/Color.ts","Model/FrostResult.ts","Controller/Frost/FrostServer.ts","Controller/Frost/FrostFactory.ts","Controller/Frost/factories/GetStation.ts","Controller/Frost/factories/GetObservationStations.ts","Controller/Frost/factories/GetLatestObservation.ts","Controller/Frost/factories/GetLatestObservations.ts","Controller/Frost/factories/GetObservations.ts","Controller/Frost/DataProvider.ts","Model/ObservationStation.ts","Model/Observation.ts","Model/Scale.ts","View/DetailPage/DetailPage.tsx","View/DetailPage/ObservationStationProfile.tsx","View/DetailPage/ObservationItem.tsx","View/DetailPage/LocationMap.tsx","View/DetailPage/Diagram.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","language","Language","getInstance","StationInfo","href","props","lastObservation","getObservationStation","getId","station","Box","className","Grid","container","direction","Typography","variant","color","getName","getPosition","getString","Divider","orientation","justify","getFeature","getRelatedWeblink","display","Math","floor","getValue","getUnitOfMeasurement","Button","onClick","openDetails","getText","React","Component","require","Map","nextViewport","lock","oldViewport","state","viewport","pin","icon","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","regEx","test","iconName","exec","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","abs","getZoom","updateViewport","onViewportChange","setState","Position","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","zoomControl","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","Popup","onOpen","CircularProgress","polygons","positions","getPositionsFromPolygon","fillOpacity","MapPin","value","MapConfiguration","obsStation","getScale","Polygon","stations","TestConfiguration","feature","view","Color","random","Observation","Date","now","values","index","length","getLatestObservationMock","push","avgValue","reduce","acc","c","ObservationStation","getFeatures","getRelatedScale","features","NearConfiguration","selectedFeature","scale","obs","observations","min","apply","p","max","sc","key","val","getLimit","Scale","DataProvider","getLatestObservations","buildNearScale","forEach","buildMapPin","PolygonConfiguration","getRadius","polys","triangulate","points","getLatitude","getLongitude","output","tri","Delaunator","from","triangles","i","triStations","StationConfiguration","latestObs","DEFAULT_CONF","FeatureProvider","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","localStorage","setItem","JSON","stringify","type","ls","getItem","parse","obj","latitude","longitude","isNullOrUndefined","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","f","getPins","getPolygons","searchTerm","fetch","encodeURIComponent","response","json","updateCurrentPosition","lat","lon","setCenter","useStyles","makeStyles","theme","createStyles","root","background","palette","primary","main","title","textAlign","width","marginBottom","popup","padding","paddingBottom","formControl","marginTop","FeatureSelect","classes","useState","open","setOpen","listAllFeatures","setFeature","setConfig","useEffect","startConf","changeConfig","console","log","testConf","onConfigurationChange","nearConf","polyConf","stationConf","alignItems","Card","FormControl","InputLabel","Select","onChange","event","target","MenuItem","Avatar","currentTarget","Search","locationEnabled","navigator","permissions","query","name","then","status","geolocation","getCurrentPosition","res","coords","updatePosition","err","alignContent","onSubmit","onSearch","InputBase","placeholder","IconButton","flexItem","locationClick","disabled","spacing","getStyleFromScale","grad","slice","height","Legend","style","unit","MapPage","mapController","selectedStation","getViewport","additionalPins","update","pinPromise","polyPromsie","Promise","all","pinPoly","concat","sortedPins","sort","a","b","dis","disSum","temp","handleViewportChange","some","promise","changePopupStation","term","preventDefault","search","setHomeMarker","mp","isFinite","getMin","getMax","pos","onStationSelected","getFeatureSelectConf","getSelectedFeature","withStyles","ErrorPage","message","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","selectedLang","getSelectedLanguage","anchorEl","handleClick","bind","handleClose","getAvailableLanguages","lang","changeLanguage","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","onClose","langList","PageMenu","toogleDrawer","toogle","AppBar","boxShadow","zIndex","Toolbar","component","Link","to","textDecoration","marginLeft","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","exact","path","DetailPage","Configuration","frostUrl","instance","iConf","newConf","supportedFeatures","createMuiTheme","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","sqrt","pow","lng","round","toString","selectedLangId","languages","languageData","text","strings","languageID","find","undefined","langs","element","set","date","languageId","toLocaleString","languageInstance","local","ChartType","Timespan","start","valueOf","end","MockDataProvider","colors","randomColor","Feature","count","mockStation","mockFeature","radius","mockObservations","frequency","Array","previousValue","getFullYear","getMonth","getDate","getHours","middle","languageProvider","FHLCConfigurationOption","nameId","timespan","xAxis","FeatureHistoryLineChartController","observationStation","yAxisLabel","chartType","graphicsOptions","isConfigutable","defaultConfigurationOption","configurationOptions","option","configurationOptionName","configurationOption","getFHLCConfigurationOption","getStart","getObservations","data","timestamp","getTimeStamp","options","LINE_CHART","label","legend","ComparisonToLastYearPieChartController","isConfigurable","configuration","getCTLYPCConfigurationOption","lastObservationValue","pop","higher","lower","higherTag","lowerTag","PIE_CHART","YCLCCConfigurationOption","numberOfYears","YearComparisonLineChartController","getYCLCCConfigurationOption","cleanedObservations","filter","years","header","year","splice","dt","DataTable","addValue","dtAsArray","toArray","hAxis","format","gridlines","DTRow","numberOfValues","arrayRepresentation","dtrowA","dtrowB","rows","columnKey","rowIndex","getRowIndex","getBaseDate","columnIndex","getColumnIndex","datesAreEqual","BASE_YEAR","getMinutes","getSeconds","getMilliseconds","dateA","dateB","row","DiagramFactory","diagramMap","has","get","call","descriptionId","relatedWeblinkId","limit","unitOfMeasurement","controllerIds","diagramController","controller","getDiagramController","featureDefinition","addFeature","definition","defaultScale","webLinkId","diagrams","featureId","includes","r","g","TypeError","toHex","n","hex","toUpperCase","parseInt","FrostResult","result","success","errorMessage","FrostServer","ff","getQueryBuilder","getQuery","ok","getConverter","convert","FrostFactory","rmc","qb","GetStationFactory","GetStationConverter","GetStationBuilder","Locations","coordinates","Datastreams","fp","getfeat","ObservedProperty","feat","isin","description","GetObservationStationsFactory","GetObservationStationsConverter","GetObservationStationsBuilder","coord","stream","GetLatestObservationFactory","GetLatestObservationConverter","GetLatestObservationBuilder","Observations","phenomenonTime","GetLatestObservationsFactory","GetLatestObservationsConverter","GetLatestObservationsBuilder","thing","Thing","dastream","sta","GetObservationsFactory","GetObservationsConverter","GetObservationsBuilder","properDate","getDay","fr","getResult","getSuccess","getMessage","server","request","handleFrostResult","obsnull","alert","availableFeatures","featureDiagramControllerArray","found","counter","linearTransition","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","styles","main_container","paddingTop","params","item","xl","lg","md","sm","xs","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","latestObservations","randomNumber","getRandomColor","getDateString","align","getDescription","renderObservationDate","renderLatestObservations","library","faThermometerHalf","faSmog","faTachometerAlt","ObservationItem","backgroundColor","getIconName","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","paddingLeft","diagram","getDefaultConfigurationOption","handleConfigurationChange","getConfigurationOptions","renderConfigurationOptions","renderDiagramConfiguration","getChartType","getGraphicsOptions","loader","getData"],"mappings":"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","file":"static/js/main.7e327381.chunk.js","sourcesContent":["var map = {\n\t\"./DetailPage\": 73,\n\t\"./DetailPage.tsx\": 73,\n\t\"./Diagram\": 77,\n\t\"./Diagram.tsx\": 77,\n\t\"./LocationMap\": 76,\n\t\"./LocationMap.tsx\": 76,\n\t\"./ObservationItem\": 75,\n\t\"./ObservationItem.css\": 108,\n\t\"./ObservationItem.tsx\": 75,\n\t\"./ObservationStationProfile\": 74,\n\t\"./ObservationStationProfile.tsx\": 74,\n\t\"./marker_icon.svg\": 165\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 164;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.a06775c7.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n}\n","import React from \"react\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Button, Typography, Grid, Box, Divider } from \"@material-ui/core\";\nimport Language from \"../../Controller/Storage/Language\";\nimport FeatureInfo from \"./FeatureInfo\";\n\nimport './StationInfo.css';\n\nlet language: Language = Language.getInstance();\n\ninterface State { }\ninterface Props {\n    lastObservation: Observation;\n}\n\nconst DETAIL_PATH = \"/pse-airquality-react/detail/\";\n\nexport class StationInfo extends React.Component<Props, State> {\n    openDetails() {\n        window.location.href =\n            DETAIL_PATH +\n            this.props.lastObservation.getObservationStation().getId();\n    }\n\n    render() {\n        var station = this.props.lastObservation.getObservationStation();\n        return (\n            <Box className='popup'>\n                <Grid container direction=\"column\">\n                    <Typography className='title' variant=\"h5\" color=\"textPrimary\">\n                        {station.getName()}\n                    </Typography>\n                    <Typography className='position' color=\"textSecondary\">\n                        {station.getPosition().getString()}\n                    </Typography>\n                    <Divider orientation='horizontal'></Divider>\n                    <Grid container direction='row' justify='space-between'>\n                        <Typography className='feature' variant='subtitle1' color='textSecondary'>\n                            {this.props.lastObservation.getFeature().getName() +\n                                \":\"}\n                        </Typography>\n                        <Typography color='primary'>\n                            <a href={this.props.lastObservation.getFeature().getRelatedWeblink()}>?</a>\n                        </Typography>\n                    </Grid>\n                    <Typography className='value' variant=\"h4\" display=\"inline\" color=\"primary\">\n                        {Math.floor(\n                            this.props.lastObservation.getValue() * 100\n                        ) / 100}{\" \"}\n                        {this.props.lastObservation\n                            .getFeature()\n                            .getUnitOfMeasurement()}\n                    </Typography>\n                    <Button\n                        className='info-button'\n                        color='primary'\n                        onClick={() => this.openDetails()}\n                        variant=\"contained\"\n                    >\n                        {language.getText(\"stationInfoButton\")}\n                    </Button>\n                </Grid>\n            </Box>\n        );\n    }\n}\n","import \"./Map.css\";\nimport React from \"react\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\n\nimport { Card, CircularProgress } from \"@material-ui/core\";\nimport {\n    Map as LeafletMap,\n    TileLayer,\n    Marker,\n    Polygon as LeafletPolygon,\n    Viewport as LeafletViewport,\n    Popup,\n} from \"react-leaflet\";\nimport { Position } from \"../../Model/Position\";\nimport { StationInfo } from \"./StationInfo\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport Language from \"../../Controller/Storage/Language\";\nimport { isNull } from \"util\";\nrequire(\"leaflet-iconmaterial\");\n\nconst VIEW_UPDATE_DELAY = 500; // in ms\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\nconst DEFAULT_ZOOM = 5;\ninterface State {\n    viewport: Viewport;\n    lastObservation: Observation | null;\n}\n\ninterface Props {\n    onViewportChange: (viewport: Viewport) => void;\n    handlePopup: (pin: MapPin) => Promise<Observation>;\n    viewport: Viewport;\n    pins: MapPin[];\n    polygons: Polygon[];\n}\n\nexport class Map extends React.Component<Props, State> {\n    nextViewport: LeafletViewport | null;\n    lock: boolean;\n    oldViewport: Viewport | null;\n    constructor(props: Props) {\n        super(props);\n        this.lock = false;\n        this.nextViewport = null;\n        this.oldViewport = null;\n        this.state = {\n            viewport: this.props.viewport,\n            lastObservation: null,\n        };\n    }\n\n    private getIconFromMapPin(pin: MapPin): L.Icon {\n        // Custom icons with colors\n        //TODO: Add warning if limit is reached? (requires design change)\n        // @ts-ignore\n        var icon = L.IconMaterial.icon({\n            icon: \"\", // Name of Material icon\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\n            markerColor: pin.getColor().getHex(), // Marker fill color\n            outlineColor: \"\", // Marker outline color\n            outlineWidth: 1, // Marker outline width\n        });\n        //Filter icons\n        var regEx = /icon-(.+)-.*/;\n        if (regEx.test(pin.getId())) {\n            var iconName = regEx.exec(pin.getId()) as RegExpExecArray;\n            //@ts-ignore\n            icon = L.IconMaterial.icon({\n                icon: iconName[1], // Name of Material icon\n                iconColor: \"white\", // Material icon color (could be rgba, hex, html name...)\n                markerColor: pin.getColor().getHex(), // Marker fill color\n                outlineColor: \"black\", // Marker outline color\n                outlineWidth: 1, // Marker outline width\n            });\n        }\n        return icon;\n    }\n\n    private onViewportChange(viewport: LeafletViewport) {\n        this.nextViewport = viewport; //Update new viewport\n        if (!this.lock) {\n            if (!this.oldViewport) {\n                this.oldViewport = this.state.viewport; //Set viewport of last update\n            }\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\n            setTimeout(() => {\n                var newView = this.viewportLeafletToModel(\n                    this.nextViewport as LeafletViewport\n                );\n                this.lock = false;\n                if (\n                    this.oldViewport &&\n                    (newView\n                        .getCenter()\n                        .getDistance(this.oldViewport?.getCenter()) >\n                        DISTANCE_THRESHOLD ||\n                        Math.abs(\n                            newView.getZoom() - this.oldViewport?.getZoom()\n                        ) >= ZOOM_THRESHOLD)\n                ) {\n                    this.updateViewport(newView); //Only update if change has been significant\n                }\n            }, VIEW_UPDATE_DELAY);\n        }\n    }\n\n    private updateViewport(viewport: Viewport) {\n        this.props.onViewportChange(viewport);\n\n        this.setState({ viewport: viewport });\n        this.oldViewport = null;\n    }\n\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\n        return new Viewport(\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\n            viewport.zoom ?? DEFAULT_ZOOM\n        );\n    }\n\n    private async handlePopup(pin: MapPin) {\n        this.setState({ lastObservation: null });\n        var observation = await this.props.handlePopup(pin);\n        this.setState({ lastObservation: observation });\n    }\n\n    private getPositionsFromPolygon(\n        polygon: Polygon\n    ): { lat: number; lng: number }[] {\n        return polygon\n            .getStations()\n            .map((obsSt: ObservationStation) =>\n                obsSt.getPosition().getCoordinates()\n            );\n    }\n\n    render() {\n        return (\n            <LeafletMap\n                center={this.state.viewport.getCenter().getCoordinates()}\n                zoom={this.state.viewport.getZoom()}\n                onViewportChange={(v) => this.onViewportChange(v)}\n                zoomControl={false}\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {this.props.pins.map((pin) => (\n                    <Marker\n                        position={pin.getPosition().getCoordinates()}\n                        icon={this.getIconFromMapPin(pin)}\n                    >\n                        <Popup\n                            onOpen={() => this.handlePopup(pin)}\n                            className=\"popup\"\n                        >\n                            {this.state.lastObservation ? (\n                                <StationInfo\n                                    lastObservation={this.state.lastObservation}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Popup>\n                    </Marker>\n                ))}\n                {this.props.polygons.map((polygon) => (\n                    <LeafletPolygon\n                        positions={this.getPositionsFromPolygon(polygon)}\n                        color={polygon.getColor().getHex()}\n                        fillOpacity={0.3}\n                    />\n                ))}\n            </LeafletMap>\n        );\n    }\n}\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nexport default abstract class MapConfiguration {\n    protected buildMapPin(\n        obsStation: ObservationStation,\n        value: number\n    ): MapPin {\n        return new MapPin(\n            obsStation.getId(),\n            obsStation.getPosition(),\n            value,\n            this.getScale().getColor(value)\n        );\n    }\n    abstract getId(): string;\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\n    abstract getScale(): Scale;\n    abstract getFeatures(): Feature[];\n}\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","import MapConfiguration from \"./MapPage/MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { Feature } from \"../Model/Feature\";\nimport { Color } from \"../Model/Color\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\nimport { Position } from \"../Model/Position\";\nimport { Observation } from \"../Model/Observation\";\n\nexport default class TestConfiguration extends MapConfiguration {\n    private feature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.feature = feature;\n    }\n\n    getId(): string {\n        return \"TestConfiguration\";\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [\n            new MapPin(\n                view.getCenter().getString(),\n                view.getCenter(),\n                10,\n                new Color(\n                    Math.random() * 255,\n                    Math.random() * 255,\n                    Math.random() * 255\n                )\n            ),\n        ];\n    }\n\n    private async getLatestObservationMock(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        return new Observation(\n            station,\n            feature,\n            Math.random() * 50,\n            new Date(Date.now())\n        );\n    }\n\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\n        var stations = polygon.getStations();\n        var values = [];\n        for (let index = 0; index < stations.length; index++) {\n            var v = await this.getLatestObservationMock(\n                stations[index],\n                this.feature\n            );\n            values.push(v.getValue());\n        }\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\n        return this.getScale().getColor(avgValue);\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [\n            new Polygon(\n                [\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.4),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.5),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(50, 8.45),\n                        []\n                    ),\n                ],\n                new Color(0, 0, 0)\n            ),\n        ];\n    }\n\n    getScale(): Scale {\n        return this.getFeatures()[0].getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.feature];\n    }\n\n    setFeatures(features: Feature[]) {\n        if (features.length === 0) {\n            return; //no elements in array\n        }\n        this.feature = features[0];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nconst SAMPLE_SCALE = 20;\nconst ID = \"NearConfiguration\";\n\nexport default class NearConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n    private scale: Scale;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n        this.scale = this.selectedFeature.getRelatedScale();\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\n        return new MapPin(\n            obs.getId(),\n            obs.getPosition(),\n            value,\n            this.scale.getColor(value)\n        );\n    }\n\n    private buildNearScale(observations: Observation[]): Scale {\n        var min = Math.min.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n        var max = Math.max.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n\n        var sc: { [key: number]: string } = {};\n        // Sample 10 times between 0 => min and limit of feature => max\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\n            sc[key] = this.selectedFeature\n                .getRelatedScale()\n                .getColor(val)\n                .getHex();\n        }\n        return new Scale(true, sc);\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var observations = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n\n        this.scale = this.buildNearScale(observations);\n\n        var pins: MapPin[] = [];\n        observations.forEach((o) => {\n            pins.push(\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n        });\n        return pins;\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n    getScale(): Scale {\n        return this.scale;\n    }\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Feature } from \"../../Model/Feature\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\nimport Delaunator from \"delaunator\";\n\nconst ID = \"PolygonConfiguration\";\nexport default class PolygonConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [];\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        var observations = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getRadius(),\n            this.selectedFeature\n        );\n        var polys = this.triangulate(observations);\n        return polys;\n    }\n\n    // Convert Observations in array of triangular Polygons\n    private triangulate(observations: Observation[]): Polygon[] {\n        var points: [number, number][] = [];\n        observations.forEach((o) =>\n            points.push([\n                //Get number tupels from Position\n                o.getObservationStation().getPosition().getLatitude(),\n                o.getObservationStation().getPosition().getLongitude(),\n            ])\n        );\n        var delaunay = Delaunator.from(points);\n        var output = [];\n        var tri = delaunay.triangles; // Convert Points to indices for triangles\n        for (let i = 0; i < tri.length; i += 3) {\n            var triStations = [\n                // 3 sequential indices describe a triangle\n                observations[tri[i]].getObservationStation(),\n                observations[tri[i + 1]].getObservationStation(),\n                observations[tri[i + 2]].getObservationStation(),\n            ];\n            var val =\n                // Calculate average value for all of the stations\n                (observations[tri[i]].getValue() +\n                    observations[tri[i + 1]].getValue() +\n                    observations[tri[i + 2]].getValue()) /\n                3;\n            output.push(\n                new Polygon(\n                    triStations,\n                    this.selectedFeature.getRelatedScale().getColor(val)\n                )\n            );\n        }\n        return output;\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Observation } from \"../../Model/Observation\";\n\nconst ID = \"StationConfiguration\";\n\nexport default class StationConfiguration extends MapConfiguration {\n    getId(): string {\n        return ID;\n    }\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var latestObs: Observation[] = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n        return latestObs.map((o) =>\n            this.buildMapPin(o.getObservationStation(), o.getValue())\n        );\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapPage/MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport TestConfiguration from \"../TestConfiguration\";\nimport NearConfiguration from \"../MapPage/NearConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\nimport StationConfiguration from \"../MapPage/StationConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport { isNullOrUndefined } from \"util\";\n\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\nconst DEFAULT_CONF = new StationConfiguration(\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\n);\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\n\nexport default class MapConfigurationMemory {\n    static save(conf: MapConfiguration, view: Viewport) {\n        localStorage.setItem(\n            LOCALSTORAGE_MAPCONF,\n            JSON.stringify({\n                type: conf.getId(),\n                feature: conf.getFeatures()[0].getId(),\n                view: view,\n            })\n        );\n    }\n\n    static load(): [MapConfiguration, Viewport] {\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\n        if (\n            ls &&\n            (JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: Viewport;\n            })\n        ) {\n            //return configuration if it exists\n            var obj = JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: any;\n            };\n            var view = new Viewport(\n                new Position(\n                    obj.view.center.latitude,\n                    obj.view.center.longitude\n                ),\n                obj.view.zoom\n            );\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\n            if (isNullOrUndefined(feature)) {\n                throw new Error(\n                    \"Feature \" + obj.feature + \" is not supported.\"\n                );\n            }\n            if (obj.type === \"NearConfiguration\") {\n                return [new NearConfiguration(feature), view];\n            } else if (obj.type === \"PolygonConfiguration\") {\n                return [new PolygonConfiguration(feature), view];\n            } else if (obj.type === \"StationConfiguration\") {\n                return [new StationConfiguration(feature), view];\n            } else {\n                return [new TestConfiguration(feature), view];\n            }\n        }\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\n    }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport MapConfiguration from \"./MapConfiguration\";\nimport MapConfigurationMemory from \"../Storage/MapConfigurationMemory\";\nimport StationConfiguration from \"./StationConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport NearConfiguration from \"./NearConfiguration\";\nimport PolygonConfiguration from \"./PolygonConfiguration\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nexport class MapController {\n    private config: MapConfiguration;\n    private viewport: Viewport;\n\n    private DEFAULT_POSITION: Position = new Position(49, 8.4); //Karlsruhe\n    private DEFAULT_ZOOM: number = 5;\n\n    constructor(useMemory: boolean = true) {\n        if (useMemory) {\n            var mcm = MapConfigurationMemory.load();\n            this.config = mcm[0];\n            this.viewport = mcm[1];\n        } else {\n            // Default viewport\n            this.viewport = new Viewport(\n                this.DEFAULT_POSITION,\n                this.DEFAULT_ZOOM\n            );\n            this.config = new StationConfiguration(\n                // Default configuration\n                FeatureProvider.getInstance().getFeature(\n                    \"saqn:op:mcpm2p5\"\n                ) as Feature\n            );\n        }\n        if (this.config.getFeatures().length === 0) {\n            throw Error(\"Invalid MapConfiguration\");\n        }\n    }\n\n    // Called when a pin on the map is clicked, gets information from server\n    async handlePopup(pin: MapPin): Promise<Observation> {\n        var station = await DataProvider.getStation(pin.getId());\n        return DataProvider.getLatestObservation(\n            station,\n            this.config.getFeatures()[0]\n        );\n    }\n\n    // Store configuration and viewport in local storage\n    private save() {\n        MapConfigurationMemory.save(this.config, this.viewport);\n    }\n\n    // Current configuration id and feature id\n    getFeatureSelectConf(): { conf: string; feature: string } {\n        var f = this.config.getFeatures()[0].getId();\n        var c = this.config.getId();\n        return { conf: c, feature: f };\n    }\n\n    // Current viewport\n    getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    // Called if the viewport has changed significantly\n    handleViewportChange(viewport: Viewport) {\n        this.viewport = viewport;\n        this.save();\n    }\n\n    // Pins for leaflet map\n    async getPins(): Promise<MapPin[]> {\n        return this.config.getPins(this.viewport);\n    }\n\n    // Polygons to be drawn\n    async getPolygons(): Promise<Polygon[]> {\n        return this.config.getPolygons(this.viewport);\n    }\n\n    // The leaflet scale of the map\n    getScale(): Scale {\n        return this.config.getScale();\n    }\n\n    getSelectedFeature(): Feature {\n        return this.config.getFeatures()[0];\n    }\n\n    // Switch to configuration with different feature\n    changeFeature(feature: Feature) {\n        switch (this.config.getId()) {\n            case \"StationConfiguration\":\n                this.config = new StationConfiguration(feature);\n                break;\n            case \"NearConfiguration\":\n                this.config = new NearConfiguration(feature);\n                break;\n            case \"PolygonConfiguration\":\n                this.config = new PolygonConfiguration(feature);\n                break;\n\n            default:\n                throw new Error(\n                    \"Current configuration has invalid id: \" +\n                    this.config.getId()\n                );\n        }\n    }\n\n    // Called when user changes configuration\n    onConfigurationChange(conf: MapConfiguration) {\n        this.config = conf;\n        this.save();\n    }\n\n    // Get Position from search term using the nominatim API\n    async search(searchTerm: string) {\n        if (searchTerm.length === 0) {\n            return; //No search possible\n        }\n\n        var response = await fetch(\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\n            encodeURIComponent(searchTerm)\n        );\n        var json = await response.json();\n        if (json.length === 0) {\n            return; //No location found\n        }\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\n    }\n\n    // Set new position\n    updateCurrentPosition(position: Position) {\n        this.viewport.setCenter(position);\n        this.save();\n    }\n}\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n    Avatar,\n    Card,\n    CardContent,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    Typography,\n    Divider,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport MapConfiguration from \"../../Controller/MapPage/MapConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\nimport NearConfiguration from \"../../Controller/MapPage/NearConfiguration\";\nimport StationConfiguration from \"../../Controller/MapPage/StationConfiguration\";\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\nimport Language from \"../../Controller/Storage/Language\";\ninterface Props {\n    onConfigurationChange(mapConfig: MapConfiguration): void;\n    startConf?: { conf: string; feature: string };\n}\n\nlet language = Language.getInstance();\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: theme.palette.primary.main,\n            position: 'relative',\n        },\n        title: {\n            textAlign: 'center',\n            width: '100%',\n            marginBottom: '10px',\n        },\n        popup: {\n            padding: '20px',\n            paddingBottom: '50px',\n            marginBottom: '-40px',\n        },\n        formControl: {\n            width: '100%',\n            marginTop: '10px',\n            marginBottom: '10px',\n        },\n    })\n);\n\nexport default function FeatureSelect(props: Props) {\n    const TEST_CONFIG = \"TestConfiguration\";\n    const NEAR_CONFIG = \"NearConfiguration\";\n    const POLY_CONFIG = \"PolygonConfiguration\";\n    const STATION_CONFIG = \"StationConfiguration\";\n    const classes = useStyles();\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\n    const [feature, setFeature] = useState<Feature | undefined>(\n        FeatureProvider.getInstance().listAllFeatures()[0]\n    );\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setOpen(open ? null : event.currentTarget);\n    };\n\n    useEffect(() => {\n        if (props.startConf) {\n            //Get start values from props\n            setFeature(\n                FeatureProvider.getInstance().getFeature(\n                    props.startConf.feature\n                )\n            );\n            setConfig(props.startConf.conf);\n        }\n    }, [props.startConf]);\n    const changeConfig = (conf: string, feature: Feature) => {\n        console.log(conf);\n        setConfig(conf);\n        switch (conf) {\n            case TEST_CONFIG:\n                var testConf = new TestConfiguration(feature); //Create new config\n                props.onConfigurationChange(testConf);\n                break;\n            case NEAR_CONFIG:\n                var nearConf = new NearConfiguration(feature); //Create new config\n                props.onConfigurationChange(nearConf);\n                break;\n            case POLY_CONFIG:\n                var polyConf = new PolygonConfiguration(feature); //Create new config\n                props.onConfigurationChange(polyConf);\n                break;\n            case STATION_CONFIG:\n                var stationConf = new StationConfiguration(feature); //Create new config\n                props.onConfigurationChange(stationConf);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleFeatureChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        var f = FeatureProvider.getInstance().getFeature(\n            event.target.value as string\n        ); //Feature Id\n        setFeature(f);\n\n        if (f) {\n            if (config) {\n                changeConfig(config, f);\n            } else {\n                throw new Error(\"No config selected\");\n            }\n        }\n    };\n\n    const handleConfigChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        if (!feature) {\n            return; //A feature has to be selected, should never happen.\n        }\n        changeConfig(event.target.value as string, feature);\n        //window.location.reload(); //Reload with new config\n    };\n\n    return (\n        <Fragment>\n            <Grid container direction='column' alignItems='flex-end'>\n                {open ? (\n                    <Card className={classes.popup} variant=\"outlined\">\n                        <Grid container direction='column'>\n                            <Typography className={classes.title} variant='subtitle1' color='textSecondary'>\n                                {language.getText('map_configuration_title')}\n                            </Typography>\n                            <Divider orientation='horizontal'></Divider>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Feature\"}</InputLabel>\n                                <Select\n                                    onChange={handleFeatureChange}\n                                    value={feature?.getId() ?? \"\"}\n                                >\n                                    {FeatureProvider.getInstance()\n                                        .listAllFeatures()\n                                        .map((f) => (\n                                            <MenuItem value={f.getId()}>\n                                                {f.getName()}\n                                            </MenuItem>\n                                        ))}\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Style\"}</InputLabel>\n                                <Select\n                                    onChange={handleConfigChange}\n                                    value={config ?? \"\"}\n                                >\n                                    <MenuItem value={POLY_CONFIG}>\n                                        {POLY_CONFIG}\n                                    </MenuItem>\n                                    <MenuItem value={STATION_CONFIG}>\n                                        {STATION_CONFIG}\n                                    </MenuItem>\n                                    <MenuItem value={NEAR_CONFIG}>\n                                        {NEAR_CONFIG}\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                    </Card>\n                ) : (\n                        \"\"\n                    )}\n                <Avatar\n                    className={classes.root}\n                    onClick={handleClick}>\n                    <LayersIcon />\n                </Avatar>\n            </Grid>\n        </Fragment >\n    );\n}\n","import React, { Fragment, SyntheticEvent } from \"react\";\nimport { IconButton, Divider, InputBase, Grid, Card } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nimport \"./Search.css\";\n\nlet language = Language.getInstance();\n\ninterface Props {\n    onSearch(event: SyntheticEvent, term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nexport default class Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Card className=\"root\">\n                    <Grid\n                        container\n                        direction=\"row\"\n                        alignContent=\"space-between\"\n                    >\n                        <form\n                            className=\"search-form\"\n                            onSubmit={(e) =>\n                                this.props.onSearch(e, this.state.searchTerm)\n                            }\n                        >\n                            <InputBase\n                                className=\"input\"\n                                type=\"search\"\n                                onChange={(e) => {\n                                    this.setState({\n                                        searchTerm: e.target.value,\n                                    });\n                                }}\n                                placeholder={language.getText(\"search\")}\n                            />\n                            <IconButton\n                                type=\"submit\"\n                                onClick={(e) =>\n                                    this.props.onSearch(\n                                        e,\n                                        this.state.searchTerm\n                                    )\n                                }\n                                className=\"search-button\"\n                            >\n                                <SearchIcon />\n                            </IconButton>\n                        </form>\n                        <Divider orientation=\"vertical\" flexItem={true} />\n                        <IconButton\n                            onClick={() => this.locationClick()}\n                            className=\"location-button\"\n                            disabled={!this.state.locationEnabled}\n                        >\n                            <GpsFixedIcon />\n                        </IconButton>\n                    </Grid>\n                </Card>\n            </Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography, Card, Divider } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            padding: theme.spacing(1),\n        },\n    })\n);\n\ninterface Props {\n    unit: string;\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"100px\",\n        width: \"30px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Card className={classes.container}>\n            <Grid container direction=\"column\" alignItems='center'>\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n                <Divider orientation=\"horizontal\" flexItem={true} />\n                <Typography variant=\"body2\">\n                    {'[' + props.unit + ']'}\n                </Typography>\n            </Grid>\n        </Card>\n    );\n}\n\nexport default Legend;\n","import React, { Fragment, SyntheticEvent } from \"react\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Map } from \"./Map\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapController } from \"../../Controller/MapPage/MapController\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport FeatureSelect from \"./FeatureSelect\";\nimport Search from \"./Search\";\nimport Legend from \"./Legend\";\nimport { Box, Theme, Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Color } from \"../../Model/Color\";\n\nimport \"./MapPage.css\";\n\nconst styles = (theme: Theme) => ({});\n\ninterface State {\n    selectedStation: ObservationStation | null;\n    pins: MapPin[];\n    polygons: Polygon[];\n    viewport: Viewport;\n    additionalPins: MapPin[];\n}\n\ninterface Props {\n    classes: any;\n}\n\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\n\nclass MapPage extends React.Component<Props, State> {\n    mapController: MapController;\n\n    constructor(props: Props) {\n        super(props);\n        this.mapController = new MapController();\n\n        this.state = {\n            selectedStation: null,\n            viewport: this.mapController.getViewport(),\n            pins: [],\n            polygons: [],\n            additionalPins: [],\n        };\n        this.update();\n    }\n\n    // Set station as source for the StationInfo Popup\n    changePopupStation(station: ObservationStation) {\n        this.setState({\n            selectedStation: station,\n        });\n    }\n\n    // Reload Pins and Polygons\n    update() {\n        var pinPromise = this.mapController.getPins();\n        var polyPromsie = this.mapController.getPolygons();\n        Promise.all([pinPromise, polyPromsie]).then((pinPoly) => {\n            this.setState({\n                pins: pinPoly[0].concat(this.state.additionalPins),\n                polygons: pinPoly[1],\n            });\n        });\n    }\n\n    getValueAt(position: Position, feature: Feature): number {\n        // Get pins sorted by distance\n        var sortedPins = this.state.pins.sort((a, b) => {\n            return (\n                a.getPosition().getDistance(position) -\n                b.getPosition().getDistance(position)\n            );\n        });\n        var dis = 0; //Distance of nearest station to position\n        var disSum = 0;\n        if (sortedPins.length !== 0) {\n            dis = sortedPins[0].getPosition().getDistance(position);\n        }\n        var value = 0;\n        for (let i = 0; i <= 2; i++) {\n            //nearest 3 stations (if they exist)\n            if (sortedPins.length > i) {\n                var temp =\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\n                disSum += temp;\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\n            }\n        }\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\n    }\n\n    onViewportChange(viewport: Viewport) {\n        this.mapController.handleViewportChange(viewport);\n        //Update Page\n        this.setState({\n            viewport: viewport,\n        });\n        this.update();\n    }\n\n    async onStationSelected(pin: MapPin): Promise<Observation> {\n        if (this.state.additionalPins.some((p) => pin.getId() === p.getId())) {\n            // Not a station, do nothing\n            return new Promise(() => {\n                return null;\n            });\n        }\n        this.setState({ selectedStation: null });\n        var promise = this.mapController.handlePopup(pin);\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\n        return promise;\n    }\n\n    onSearch(event: SyntheticEvent, term: string) {\n        event.preventDefault();\n        this.mapController.search(term).then(() => {\n            this.setHomeMarker();\n            this.update();\n        });\n    }\n\n    setHomeMarker() {\n        var mp = new MapPin(\n            \"icon-home-1\",\n            this.state.viewport.getCenter(),\n            -1,\n            new Color(0, 0, 0)\n        );\n        this.setState({\n            additionalPins: [mp],\n            pins: this.state.pins.concat(mp),\n        });\n    }\n\n    getMin(): number {\n        var min = Math.min.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(min)) {\n            min = DEFAULT_MIN;\n        }\n        return min;\n    }\n\n    getMax(): number {\n        var max = Math.max.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(max)) {\n            max = DEFAULT_MAX;\n        }\n        return max;\n    }\n\n    render() {\n        var min = this.getMin();\n        var max = this.getMax();\n        return (\n            <Box className=\"map-page\">\n                <Box className=\"search\">\n                    <Search\n                        onSearch={(event, term) => this.onSearch(event, term)}\n                        updatePosition={(pos) => {\n                            var view = this.state.viewport;\n                            view.setCenter(pos);\n                            this.setHomeMarker();\n                            this.onViewportChange(view);\n                        }}\n                    />\n                </Box>\n                <Box className=\"map\">\n                    <Map\n                        viewport={this.state.viewport}\n                        onViewportChange={(viewport) => {\n                            this.onViewportChange(viewport);\n                        }}\n                        handlePopup={(pin) => this.onStationSelected(pin)}\n                        pins={this.state.pins}\n                        polygons={this.state.polygons}\n                    />\n                </Box>\n                <Box className=\"feature-select\">\n                    <FeatureSelect\n                        onConfigurationChange={(conf) => {\n                            this.mapController.onConfigurationChange(conf);\n                            this.update();\n                        }}\n                        startConf={this.mapController.getFeatureSelectConf()}\n                    />\n                </Box>\n                <Box className=\"legend\">\n                    <Legend\n                        min={min}\n                        max={max}\n                        unit={this.mapController\n                            .getSelectedFeature()\n                            .getUnitOfMeasurement()}\n                        scale={this.mapController.getScale()}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(MapPage);\n","import React from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <div className=\"informationPage\">\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </div>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class AboutPage extends React.Component<\n    IAboutPageProps,\n    IAboutPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"about\")}</h1>\n                <h3>{language.getText(\"aboutText\")}</h3>\n            </p>\n\n        </div>\n    }\n}\n\ninterface IAboutPageProps { }\n\ninterface IAboutPageState { }","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class PrivacyPolicyPage extends React.Component<\n    IPrivacyPolicyPageProps,\n    IPrivacyPolicyPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"privacyPolicy\")}</h1>\n                <h3>{language.getText(\"privacyPolicyText\")}</h3>\n            </p>\n        </div>\n    }\n}\n\ninterface IPrivacyPolicyPageProps { }\n\ninterface IPrivacyPolicyPageState { }\n","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n    selectedLang: string;\n    anchorEl: Element | null;\n}\n\ninterface IProps {\n    language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n    private availableLanguages: Map<string, string>;\n    private ref: any;\n    private language: Language;\n\n    constructor(props: IProps) {\n        super(props);\n        this.language = props.language;\n        this.state = {\n            selectedLang: this.language.getSelectedLanguage(),\n            anchorEl: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.availableLanguages = this.language.getAvailableLanguages();\n    }\n\n    isSelectedLang(lang: string): boolean {\n        //return lang === this.state.selectedLang;\n        return false;\n    }\n\n    handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n        this.setState({ anchorEl: event.currentTarget });\n    }\n\n    handleClose(): void {\n        this.setState({ anchorEl: null });\n    }\n\n    handleMenuItemClick(\n        event: React.MouseEvent<HTMLElement>,\n        id: string\n    ): void {\n        this.language.changeLanguage(id);\n        window.location.reload();\n        this.setState({\n            anchorEl: null,\n            selectedLang: this.language.getSelectedLanguage(),\n        });\n    }\n\n    langList(): JSX.Element[] {\n        let list: JSX.Element[] = [];\n        this.availableLanguages.forEach((lang: string, id: string) => {\n            list.push(\n                <MenuItem\n                    onClick={(e) => this.handleMenuItemClick(e, id)}\n                    selected={id === this.language.getSelectedLanguageId()}\n                >\n                    {lang}\n                </MenuItem>\n            );\n        });\n        return list;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Button\n                    onClick={this.handleClick}\n                    color=\"inherit\"\n                    startIcon={<Translate />}\n                    endIcon={<ExpandMore />}\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                >\n                    {this.state.selectedLang}\n                </Button>\n                <Menu\n                    open={Boolean(this.state.anchorEl)}\n                    anchorEl={this.state.anchorEl}\n                    onClose={this.handleClose}\n                >\n                    {this.langList()}\n                </Menu>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\" style={{\n                    height: '64px',\n                    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2)',\n                    position: 'relative',\n                    zIndex: 20,\n                }}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQnet\n                        </Typography>\n                        <div style={{ marginLeft: 'auto' }}>\n\n                            <LanguageMenu language={this.language} />\n\n                        </div>\n                        <div>\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\n                                <MenuIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}","import React from \"react\";\nimport MapPage from \"../MapPage/MapPage\";\nimport DetailPage from \"./../DetailPage/DetailPage\";\nimport ErrorPage from \"../ErrorPage\";\nimport AboutPage from \"./../About\";\nimport PrivacyPolicyPage from \"./../PrivacyPolicy\";\nimport PageMenu from \"./PageMenu\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Language from \"../../Controller/Storage/Language\";\nimport './Layout.css'\n\nfunction Layout() {\n    let language: Language = Language.getInstance();\n\n    return (\n        <div className=\"app\">\n            <Router>\n                <PageMenu language={language} />\n                <div className='page-content'>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/\"\n                            component={MapPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/detail/:id\"\n                            component={DetailPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/about\"\n                            component={AboutPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/privacy-policy\"\n                            component={PrivacyPolicyPage}\n                        />\n                        {/* If no url pattern matches an error page is shown */}\n                        <Route>\n                            <ErrorPage\n                                code={404}\n                                message={Language.getInstance().getText(\"Error404\")}\n                            />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nexport default Layout;\n","import FeatureProvider from \"../FeatureProvider\";\n\nexport default class Configuration {\n    private static instance: Configuration | null;\n    private language: string = \"de-de\";\n    private frostUrl: string = \"\";\n\n    // Return singleton instance\n    static getInstance(): Configuration {\n        if (!Configuration.instance) {\n            Configuration.load();\n        }\n        return Configuration.instance as Configuration;\n    }\n\n    // Load instance from config.json\n    private static load() {\n        var json = require(\"../../Jsons/config.json\"); //Load config\n        var iConf = json as IConfig;\n        if (!iConf) {\n            throw new Error(\"Config.json has wrong format.\");\n        }\n        var newConf = new Configuration();\n        newConf.language = iConf.language;\n        newConf.frostUrl = iConf.frostUrl;\n        iConf.supportedFeatures.forEach(\n            (f) => FeatureProvider.getInstance().getFeature(f) //Load all supported features\n        );\n\n        Configuration.instance = newConf;\n    }\n\n    // The default value for the language id\n    getLanguage(): string {\n        return this.language;\n    }\n\n    // The Url of the top level FROST REST API\n    getFrostUrl(): string {\n        return this.frostUrl;\n    }\n}\n\ninterface IConfig {\n    frostUrl: string;\n    language: string;\n    supportedFeatures: string[];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport lightGreen from \"@material-ui/core/colors/green\";\nimport Layout from \"./View/Layout/Layout\";\nimport Configuration from \"./Controller/Storage/Configuration\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: lightGreen[500],\n        },\n        secondary: {\n            main: purple[500],\n        },\n    },\n});\n\nConfiguration.getInstance(); //Initialize App Config\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <Layout />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n    id: string;\n    name: string;\n    strings: Strings;\n}\n\ninterface Strings {\n    [id: string]: string;\n}\n\nexport default class Language {\n    private static languageInstance: Language | null = null;\n\n    private selectedLangId: string;\n    private languages: Lang[];\n    private selectedLang: Lang;\n\n    //class Language is designed as a singleton. You can get access to the only instance via the getInstance method\n    constructor() {\n        this.selectedLangId = \"\";\n        this.languages = languageData.languages;\n        this.selectedLang = this.languages[0];\n    }\n\n    //returns the language instance\n    public static getInstance(): Language {\n        if (!Language.languageInstance) {\n            Language.languageInstance = new Language();\n            var local = localStorage.getItem(\"language\");\n            if (local) {\n                //Change language if selected\n                Language.languageInstance.changeLanguage(local);\n            }\n        }\n        return Language.languageInstance as Language;\n    }\n\n    //returns the string that corresponds to the string id in the currently selected language\n    public getText(id: string): string {\n        let text: string = this.selectedLang.strings[id];\n        if (text === \"\" || text == null) {\n            throw new Error(\n                `There is no string with id: ${id} in ${this.selectedLang.name}.`\n            );\n        }\n        return text;\n    }\n\n    public getSelectedLanguage(): string {\n        return this.selectedLang.name;\n    }\n\n    public getSelectedLanguageId(): string {\n        return this.selectedLang.id;\n    }\n\n    public changeLanguage(languageID: string): void {\n        let find: Lang | undefined = this.languages.find(\n            (e) => e.id === languageID\n        );\n        if (find !== undefined) {\n            this.selectedLang = find;\n            this.selectedLangId = languageID;\n            localStorage.setItem(\"language\", this.selectedLangId);\n        }\n    }\n\n    public getAvailableLanguages(): Map<string, string> {\n        let langs: Map<string, string> = new Map<string, string>();\n        this.languages.forEach((element) => {\n            langs.set(element.id, element.name);\n        });\n        return langs;\n    }\n\n    public getDateString(date: Date): string {\n        let languageId = this.getSelectedLanguageId();\n        return date.toLocaleString(languageId);\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\n\nexport default interface IDiagramController {\n    observationStation: ObservationStation;\n    feature: Feature;\n\n    //returns type of chart\n    getChartType: () => ChartType,\n\n    //returns options that specify how the diagram is displayed\n    getGraphicsOptions: () => {},\n\n    //returns whether a diagram can be configured via a select form. In this case getSelectOprions must return an Array of select options\n    isConfigurable: () => boolean,\n\n    //returns all options that can be selected to configure the diagram\n    getConfigurationOptions: () => string[],\n\n    //returns default configuration option\n    getDefaultConfigurationOption: () => string,\n\n    //returns the data that can be displayed in the diagram\n    getData: (configurationOptionName: string) => any[][],\n}\n\nexport enum ChartType {\n    LINE_CHART = 'LineChart',\n    PIE_CHART = 'PieChart',\n}","export default class Timespan {\n\n  //length in milliseconds\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n\n  //returns the end of a timespan given the start date\n  public getEnd(start: Date): Date {\n    return (new Date(start.valueOf() + this.length));\n  }\n\n  //returns the start of a timespan given the end date\n  public getStart(end: Date): Date {\n    return (new Date(end.valueOf() - this.length));\n  }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Observation } from \"../Model/Observation\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\nimport { Position } from \"../Model/Position\";\nimport { Scale } from \"../Model/Scale\";\nimport { Color } from \"../Model/Color\";\n\nexport default class MockDataProvider {\n    private static stations: { [key: string]: ObservationStation } = {};\n\n    private static randomColor(): Color {\n        return new Color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n    }\n    static mockFeature(): Feature {\n        var colors: { [key: number]: string } = {};\n        for (let index = 0; index < 5; index++) {\n            var c = this.randomColor().getHex();\n            colors[Math.floor(Math.random() * 100)] = c;\n        }\n        var scale = new Scale(true, colors);\n        return new Feature(\n            \"mockFeature\",\n            \"mockFeatureNameId\",\n            \"mockFeatureDescriptionId\",\n            scale,\n            \"mockWeblinkId\",\n            100,\n            \"uoM\",\n            ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\n            ''\n        );\n    }\n    private static mockStation(center: Position): ObservationStation {\n        var id = Math.floor(Math.random() * 10000).toString();\n        var station = new ObservationStation(\n            id,\n            \"mockName\",\n            \"mockDescription\",\n            new Position(\n                center.getLatitude() + 6 * Math.random() - 3,\n                center.getLongitude() + 6 * Math.random() - 3\n            ),\n            []\n        );\n        MockDataProvider.stations[station.getId()] = station;\n        return station;\n    }\n\n    private static mockObservations(center: Position): Observation[] {\n        var count = Math.floor(Math.random() * 9) + 2;\n        var obs = [];\n        for (let i = 0; i < count; i++) {\n            obs.push(\n                new Observation(\n                    this.mockStation(center),\n                    this.mockFeature(),\n                    Math.random() * 100,\n                    new Date(Date.now())\n                )\n            );\n        }\n        return obs;\n    }\n\n    static getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Observation[] {\n        return this.mockObservations(center);\n    }\n\n    static getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Observation {\n        return new Observation(\n            station,\n            feature,\n            Math.random() * 100,\n            new Date(Date.now())\n        );\n    }\n\n    static getObservations(\n        station: ObservationStation,\n        start: Date,\n        end: Date,\n        feature: Feature,\n        //how many observations per day are expected\n        frequency: number\n    ): Observation[] {\n        let date = start;\n        let observations = new Array<Observation>();\n\n        let previousValue = feature.getLimit() / 3;\n\n        if (frequency <= 1) {\n            while (date.valueOf() < end.valueOf()) {\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1 / frequency);\n                let value = previousValue + (Math.random() * 2) - 1;\n                previousValue = value;\n                let observation = new Observation(station, feature, value, date);\n                observations.push(observation);\n            }\n        } else if (frequency > 1) {\n            while (date.valueOf() < end.valueOf()) {\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 24 / frequency);\n                let value = previousValue + (Math.random() * 2) - 1;\n                previousValue = value;\n                let observation = new Observation(station, feature, value, date);\n                observations.push(observation);\n            }\n        }\n\n        return observations;\n    }\n\n    static getObservationStations(\n        middle: Position,\n        radius: number\n    ): ObservationStation[] {\n        var obs = [];\n        for (let index = 0; index < 7; index++) {\n            obs.push(this.mockStation(middle));\n        }\n        return obs;\n    }\n\n    static getStation(id: string): ObservationStation {\n        var colors: { [key: number]: string } = {};\n        for (let index = 0; index < 5; index++) {\n            var c = this.randomColor().getHex();\n            colors[Math.floor(Math.random() * 100)] = c;\n        }\n        var scale = new Scale(true, colors);\n\n        return new ObservationStation(\n            id,\n            'mockName',\n            'mockDesc',\n            new Position(48.369665, 10.903877),\n\n\n            [\n                new Feature(\n                    \"saqn:op:ta\",\n                    \"temperatureName\",\n                    \"temperatureDesc\",\n                    scale,\n                    \"tempLink\",\n                    40,\n                    \"°C\",\n                    ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\n                    'thermometer-half'\n                ),\n                new Feature(\n                    \"saqn:op:mcpm2p5\",\n                    \"PNC2.5Name\",\n                    \"PNC2.5Desc\",\n                    scale,\n                    \"PNC2.5Link\",\n                    100,\n                    \"µg/m³\",\n                    ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\n                    'smog'\n                ),\n            ]\n        );\n    }\n}","import Language from \"../Storage/Language\";\nimport IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport MockDataProvider from \"../MockDataProvider\";\n\nlet languageProvider = Language.getInstance();\n\nclass FHLCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n    //type and label for the xAxis\n    xAxis: { type: string; label: string };\n\n    constructor(\n        nameId: string,\n        timespan: Timespan,\n        frequency: number,\n        xAxis: { type: string; label: string }\n    ) {\n        this.name = languageProvider.getText(nameId);\n        this.timespan = timespan;\n        this.frequency = frequency;\n        this.xAxis = xAxis;\n    }\n}\n\nexport class FeatureHistoryLineChartController implements IDiagramController {\n    //support line charts\n    private static readonly chartType = ChartType.LINE_CHART;\n\n    //enable configuration\n    private static readonly isConfigutable = true;\n\n    //configuration options\n    private static readonly configurationOptions = [\n        //last 24 hours\n        new FHLCConfigurationOption(\n            \"last_24_hours\",\n            new Timespan(24 * 60 * 60 * 1000),\n            24,\n            { type: \"date\", label: \"Day\" }\n        ),\n        //last 7 days\n        new FHLCConfigurationOption(\n            \"last_7_days\",\n            new Timespan(7 * 24 * 60 * 60 * 1000),\n            12,\n            { type: \"date\", label: \"Day\" }\n        ),\n        //last 31 days\n        new FHLCConfigurationOption(\n            \"last_31_days\",\n            new Timespan(31 * 24 * 60 * 60 * 1000),\n            6,\n            { type: \"date\", label: \"Day\" }\n        ),\n        //last year\n        new FHLCConfigurationOption(\n            \"last_year\",\n            new Timespan(365 * 24 * 60 * 60 * 1000),\n            1,\n            { type: \"date\", label: \"Day\" }\n        ),\n    ];\n\n    //default configuration option\n    private static readonly defaultConfigurationOption =\n        FeatureHistoryLineChartController.configurationOptions[0];\n\n    // options for the graphical appearence\n    private static readonly graphicsOptions = {\n        legend: { position: 'none' },\n    };\n\n    //concerning observation station\n    observationStation: ObservationStation;\n    //concerning feature\n    feature: Feature;\n    yAxisLabel: string;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.yAxisLabel =\n            this.feature.getName() +\n            \"[\" +\n            this.feature.getUnitOfMeasurement() +\n            \"]\";\n    }\n    //return chart type\n    getChartType(): ChartType {\n        return FeatureHistoryLineChartController.chartType;\n    }\n\n    getGraphicsOptions() {\n        return FeatureHistoryLineChartController.graphicsOptions;\n    }\n\n    //return names of graphics options\n    getViewOptions() {\n        return FeatureHistoryLineChartController.graphicsOptions;\n    }\n\n    //return that the corresponding diagram to this controller is configurable\n    isConfigurable() {\n        return FeatureHistoryLineChartController.isConfigutable;\n    }\n\n    //returns default configuration option\n    getDefaultConfigurationOption(): string {\n        return FeatureHistoryLineChartController.defaultConfigurationOption\n            .name;\n    }\n\n    //return names of configuration options\n    getConfigurationOptions(): string[] {\n        //translate options to current language\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(\n            (option) => option.name\n        );\n        return optionNames;\n    }\n\n    //return data to display\n    getData(configurationOptionName: string): any[][] {\n        //get option object\n        var configurationOption: FHLCConfigurationOption = this.getFHLCConfigurationOption(\n            configurationOptionName\n        );\n\n        //get timespan\n        var end: Date = new Date(Date.now());\n        var start: Date = configurationOption.timespan.getStart(end);\n\n        //get mock observations\n        var observations = MockDataProvider.getObservations(\n            this.observationStation,\n            start,\n            end,\n            this.feature,\n            configurationOption.frequency\n        );\n\n        //add react google chart specific header\n        var data: any[] = [[configurationOption.xAxis, this.yAxisLabel]];\n\n        //extract values and timestamps from observations\n        observations.forEach((observation) => {\n            let timestamp = observation.getTimeStamp();\n            let value = observation.getValue();\n            data.push([timestamp, value]);\n        });\n\n        return data;\n    }\n\n    //get configuration option by name\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\n        var options = FeatureHistoryLineChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`\n        );\n    }\n}\n","import IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport Language from \"../Storage/Language\";\nimport MockDataProvider from \"../MockDataProvider\";\n\nclass CTLYPCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n\n    constructor(name: string, timespan: Timespan, frequency: number) {\n        this.name = name;\n        this.timespan = timespan;\n        this.frequency = frequency;\n    }\n}\n\nexport class ComparisonToLastYearPieChartController\n    implements IDiagramController {\n    //support line charts\n    private static readonly chartType = ChartType.PIE_CHART;\n\n    //enable configuration\n    private static readonly isConfigurable = false;\n\n    // options for the graphical appearence\n    private static readonly graphicsOptions = {};\n\n    //configuration options\n    private static readonly configurationOptions = [\n        new CTLYPCConfigurationOption(\n            \"default_configuration\",\n            new Timespan(365 * 24 * 60 * 60 * 1000),\n            24\n        ),\n    ];\n\n    //default configuration option\n    private static readonly defaultConfigurationOption =\n        ComparisonToLastYearPieChartController.configurationOptions[0];\n\n    languageProvider: Language;\n\n    observationStation: ObservationStation;\n    feature: Feature;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n\n        this.languageProvider = Language.getInstance();\n    }\n\n    getChartType(): ChartType {\n        return ComparisonToLastYearPieChartController.chartType;\n    }\n\n    getGraphicsOptions() {\n        return ComparisonToLastYearPieChartController.graphicsOptions;\n    }\n\n    isConfigurable() {\n        return ComparisonToLastYearPieChartController.isConfigurable;\n    }\n\n    getConfigurationOptions() {\n        return ComparisonToLastYearPieChartController.configurationOptions.map(\n            (option) => option.name\n        );\n    }\n\n    getDefaultConfigurationOption() {\n        return ComparisonToLastYearPieChartController.defaultConfigurationOption\n            .name;\n    }\n\n    getData(configurationOptionName: string): any[][] {\n        //configuration option by name\n        var configuration = this.getCTLYPCConfigurationOption(\n            configurationOptionName\n        );\n\n        //get timespan\n        var end: Date = new Date(Date.now());\n        var start: Date = configuration.timespan.getStart(end);\n\n        //get mock observations\n        var observations = MockDataProvider.getObservations(\n            this.observationStation,\n            start,\n            end,\n            this.feature,\n            configuration.frequency\n        );\n\n        var lastObservationValue = observations.pop()?.getValue() as number;\n\n        var higher = 0;\n        var lower = 0;\n\n        let higherTag = this.languageProvider.getText(\"higher\");\n        let lowerTag = this.languageProvider.getText(\"lower\");\n\n        observations.forEach((observation) => {\n            observation.getValue() > lastObservationValue ? higher++ : lower++;\n        });\n\n        var data = [\n            [\"Vergleich zum letzten Messwert\", \"Anzahl Tage\"],\n            [higherTag, higher],\n            [lowerTag, lower],\n        ];\n        return data;\n    }\n\n    //get configuration option by name\n    private getCTLYPCConfigurationOption(\n        name: string\n    ): CTLYPCConfigurationOption {\n        var options =\n            ComparisonToLastYearPieChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`\n        );\n    }\n}\n","import IDiagramController, { ChartType } from './DiagramController';\nimport { ObservationStation } from '../../Model/ObservationStation';\nimport { Feature } from '../../Model/Feature';\nimport MockDataProvider from '../MockDataProvider';\n\nclass YCLCCConfigurationOption {\n    name: string;\n    numberOfYears: number;\n    frequency: number;\n\n    constructor(name: string, numberOfYears: number, frequency: number) {\n        this.name = name;\n        this.numberOfYears = numberOfYears;\n        this.frequency = frequency;\n    }\n}\n\nexport class YearComparisonLineChartController implements IDiagramController {\n    //support line charts\n    private static readonly chartType = ChartType.LINE_CHART;\n\n    //enable configuration\n    private static readonly isConfigutable = false;\n\n    //configuration options\n    private static readonly configurationOptions = [\n        new YCLCCConfigurationOption('default_configuration', 3, 1),\n    ];\n\n    //default configuration option\n    private static readonly defaultConfigurationOption = new YCLCCConfigurationOption('default_configuration', 10, 1);\n\n    // options for the graphical appearence\n    private static readonly graphicsOptions = {\n        hAxis: {\n            format: 'MMM',\n            gridlines: { count: 6 }\n        },\n    };\n\n    //concerning observation station\n    observationStation: ObservationStation;\n    //concerning feature\n    feature: Feature;\n    yAxisLabel: string;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.yAxisLabel = `${this.feature.getName()} [${this.feature.getUnitOfMeasurement()}]`;\n    }\n    //return chart type\n    getChartType(): ChartType {\n        return YearComparisonLineChartController.chartType;\n    };\n\n    getGraphicsOptions() {\n        return YearComparisonLineChartController.graphicsOptions;\n    }\n\n    //return that the corresponding diagram to this controller is configurable\n    isConfigurable() {\n        return YearComparisonLineChartController.isConfigutable;\n    }\n\n    //returns default configuration option\n    getDefaultConfigurationOption(): string {\n        return YearComparisonLineChartController.defaultConfigurationOption.name;\n    }\n\n    //return names of configuration options\n    getConfigurationOptions(): string[] {\n        return YearComparisonLineChartController.configurationOptions.map(option => option.name);\n    }\n\n    getYCLCCConfigurationOption(name: string) {\n        for (let option of YearComparisonLineChartController.configurationOptions) {\n            if (option.name === name) return option;\n        }\n        throw new Error('Configuration option: ' + name + ' does not exist for YearComparisonLineChart');\n    }\n\n    //return data to display\n    getData(configurationOptionName: string): Array<Array<string | Date | number | null>> {\n        let configurationOption = this.getYCLCCConfigurationOption(configurationOptionName);\n        let numberOfYears = configurationOption.numberOfYears;\n        let frequency = configurationOption.frequency;\n\n        let now = new Date(Date.now());\n\n        //start of timespan\n        let start = new Date(now.getFullYear() - numberOfYears, 0, 1);\n        //end of timespan\n        let end = now;\n\n        //request (mock-)data\n        let observations = MockDataProvider.getObservations(this.observationStation, start, end, this.feature, frequency);\n\n        //filter out the null values\n        let cleanedObservations = observations.filter(observation => {\n            return (observation !== null);\n        });\n\n        //determine the displayed years\n        let years: number[] = new Array<number>();\n        for (let i = 0; i < numberOfYears; i++) {\n            years.push(now.getFullYear() - i);\n        }\n\n        //define header\n        let header: string[] = years.map(year => year.toString());\n        header.splice(0, 0, 'dates');\n\n\n        //define new data table with header\n        let dt = new DataTable(header)\n\n        //add every observation to the table\n        for (let observation of cleanedObservations) {\n            let date = observation.getTimeStamp();\n            let year = date.getFullYear().toString();\n            let value = observation.getValue();\n            dt.addValue(date, year, value);\n        }\n\n        //return data table as a twodimensional array\n        let dtAsArray = dt.toArray();\n        console.log(dtAsArray);\n        return dtAsArray;\n    }\n}\n\nclass DTRow {\n    date: Date;\n    values: Array<number>;\n\n    constructor(date: Date, numberOfValues: number) {\n        this.date = date;\n        this.values = new Array<number>(numberOfValues);\n    }\n\n    addValue(value: number, index: number) {\n        this.values[index] = value;\n    }\n\n    toArray(): Array<Date | number> {\n        let arrayRepresentation = new Array<Date | number>();\n        arrayRepresentation = this.values;\n        arrayRepresentation.splice(0, 0, this.date);\n        return arrayRepresentation;\n    }\n\n    static sort(dtrowA: DTRow, dtrowB: DTRow): number {\n        return ((dtrowA.date.valueOf() <= dtrowB.date.valueOf() ? -1 : 1));\n    }\n}\n\nclass DataTable {\n    static readonly BASE_YEAR = 2020;\n\n    header: string[];\n    rows: DTRow[];\n    numberOfValues: number;\n\n    constructor(header: string[]) {\n        this.header = header;\n        this.numberOfValues = header.length - 1;\n        this.rows = new Array<DTRow>();\n    }\n\n    addValue(date: Date, columnKey: string, value: number) {\n        //get row\n        let rowIndex = this.getRowIndex(date);\n        if (rowIndex === null) {\n            this.rows.push(new DTRow(this.getBaseDate(date), this.numberOfValues));\n            rowIndex = (this.rows.length - 1);\n        }\n\n        //get column\n        let columnIndex = this.getColumnIndex(columnKey);\n        if (columnKey === null) {\n            throw new Error(`No column key: ${columnKey} in this data table`);\n        }\n        columnIndex = columnIndex as number;\n\n        //add value\n        this.rows[rowIndex].addValue(value, columnIndex);\n    }\n\n    getColumnIndex(key: string): number | null {\n        for (let index = 0; index < this.header.length; index++) {\n            if (key === this.header[index]) {\n                return (index - 1);\n            }\n        }\n        return null;\n    }\n\n    getRowIndex(date: Date): number | null {\n        for (let index = 0; index < this.rows.length; index++) {\n            if (this.datesAreEqual(date, this.rows[index].date)) {\n                return index;\n            }\n        }\n        return null;\n    }\n\n    getBaseDate(date: Date) {\n        let baseDate = new Date(\n            DataTable.BASE_YEAR,\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        );\n        return baseDate;\n    }\n\n    //returns whether two dates are the same except their years\n    datesAreEqual(dateA: Date, dateB: Date): boolean {\n        let equal: boolean =\n            (dateA.getMonth() === dateB.getMonth()) &&\n            (dateA.getDate() === dateB.getDate()) &&\n            (dateA.getHours() === dateB.getHours()) &&\n            (dateA.getMinutes() === dateB.getMinutes()) &&\n            (dateA.getSeconds() === dateB.getSeconds()) &&\n            (dateA.getMilliseconds() === dateB.getMilliseconds());\n        return equal;\n    }\n\n    sort() {\n        this.rows.sort(DTRow.sort);\n    }\n\n    toArray() {\n        this.sort();\n\n        let arrayRepresentation = new Array<Array<string | Date | number | null>>();\n        arrayRepresentation = this.rows.map(row => row.toArray());\n        arrayRepresentation.splice(0, 0, this.header);\n        return arrayRepresentation;\n    }\n}\n\n","import { ObservationStation } from '../../Model/ObservationStation';\nimport { Feature } from '../../Model/Feature';\nimport { FeatureHistoryLineChartController } from './FeatureHistoryLineChartController';\nimport { ComparisonToLastYearPieChartController } from './ComparisonToLastYearPieChartController';\nimport { YearComparisonLineChartController } from './YearComparisonLineChartController';\nimport IDiagramController from './DiagramController';\n\nexport default class DiagramFactory {\n    private static readonly diagramMap = new Map<string, Function>([\n        ['FeatureHistoryLineChart', (observationStation: ObservationStation, feature: Feature) => { return new FeatureHistoryLineChartController(observationStation, feature) }],\n        ['ComparisonToLastYearPieChart', (observationStation: ObservationStation, feature: Feature) => { return new ComparisonToLastYearPieChartController(observationStation, feature) }],\n        ['YearComparisonLineChart', (observationStation: ObservationStation, feature: Feature) => { return new YearComparisonLineChartController(observationStation, feature) }],\n    ]);\n\n    public static getDiagramController(id: string, observationStation: ObservationStation, feature: Feature): IDiagramController {\n        if (DiagramFactory.diagramMap.has(id)) {\n            var constructController = DiagramFactory.diagramMap.get(id) as Function;\n            return constructController.call(DiagramFactory, observationStation, feature);\n        } else {\n            throw new Error(`Diagram id: ${id}, is not supported`);\n        }\n    }\n\n}\n","import { Scale } from \"./Scale\";\nimport { Observation } from \"./Observation\";\nimport { ObservationStation } from \"./ObservationStation\";\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\nimport Language from \"../Controller/Storage/Language\";\n\nlet language = Language.getInstance();\n\nexport class Feature {\n    private id: string;\n    private nameId: string;\n    private descriptionId: string;\n    private scale: Scale;\n    private relatedWeblinkId: string;\n    private limit: number;\n    private unitOfMeasurement: string;\n    private controllerIds: string[];\n    private iconName: string;\n\n    constructor(\n        id: string,\n        nameId: string,\n        descriptionId: string,\n        scale: Scale,\n        relatedWeblinkId: string,\n        limit: number,\n        unitOfMeasurement: string,\n        controllerIds: string[],\n        iconName: string\n    ) {\n        this.id = id;\n        this.nameId = nameId;\n        this.descriptionId = descriptionId;\n        this.scale = scale;\n        this.relatedWeblinkId = relatedWeblinkId;\n        this.limit = limit;\n        this.unitOfMeasurement = unitOfMeasurement;\n        this.controllerIds = controllerIds;\n        this.iconName = iconName;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return language.getText(this.nameId);\n        //return this.nameId;\n    }\n\n    public getDescription(): string {\n        return language.getText(this.descriptionId);\n        //return this.descriptionId;\n    }\n\n    public getRelatedWeblink(): string {\n        return language.getText(this.relatedWeblinkId);\n        //return this.relatedWeblinkId;\n    }\n\n    public getRelatedScale(): Scale {\n        return this.scale;\n    }\n\n    public getDiagramController(\n        observationStation: ObservationStation\n    ): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        this.controllerIds.forEach((id) => {\n            let controller = DiagramFactory.getDiagramController(\n                id,\n                observationStation,\n                this\n            );\n            diagramController.push(controller);\n        });\n\n        return diagramController;\n    }\n\n    public getLimit(): number {\n        return this.limit;\n    }\n\n    public getUnitOfMeasurement(): string {\n        return this.unitOfMeasurement;\n    }\n\n    public isLimitExceeded(observation: Observation): boolean {\n        return observation.getValue() > this.limit;\n    }\n\n    public getIconName(): string {\n        return this.iconName;\n    }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport * as featureDefinition from \"../Jsons/features.json\";\n\nexport default class FeatureProvider {\n    //private context: any;\n    private features: { [id: string]: Feature };\n    private static instance: FeatureProvider | null = null;\n\n    constructor() {\n        this.features = {};\n        //@ts-ignore\n        (featureDefinition.features as FeatureDefinition[]).forEach((f) => {\n            this.addFeature(f);\n        });\n    }\n\n    static getInstance(): FeatureProvider {\n        if (!this.instance) {\n            this.instance = new FeatureProvider();\n        }\n        return this.instance;\n    }\n\n    private addFeature(definition: FeatureDefinition) {\n        if (definition) {\n            var f = new Feature(\n                definition.id,\n                definition.nameId,\n                definition.descriptionId,\n                new Scale(true, definition.defaultScale),\n                definition.webLinkId,\n                definition.limit,\n                definition.unitOfMeasurement,\n                definition.diagrams,\n                definition.icon\n            );\n            this.features[f.getId()] = f;\n        }\n    }\n\n    //Returns all loaded features\n    listAllFeatures(): Feature[] {\n        return Object.keys(this.features).map((key) => {\n            return this.features[key];\n        });\n    }\n\n    getFeature(featureId: string): Feature | undefined {\n        if (Object.keys(this.features).includes(featureId)) {\n            return this.features[featureId];\n        } else {\n            return undefined;\n        }\n    }\n}\n\ninterface FeatureDefinition {\n    id: string;\n    nameId: string;\n    unitOfMeasurement: string;\n    descriptionId: string;\n    defaultScale: { [key: number]: string };\n    webLinkId: string;\n    limit: number;\n    diagrams: string[];\n    icon: string;\n}\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","export class FrostResult<T> {\n    private result: T | null;\n    private success: boolean;\n    private errorMessage: string;\n\n    constructor(result: T | null, success: boolean, errorMessage: string) {\n        if (success || result !== null || result !== undefined) {\n            //object is not null or success\n            this.result = result;\n            this.success = true;\n            this.errorMessage = \"\";\n        } else {\n            //object is null and no success\n            this.result = null;\n            this.success = false;\n            this.errorMessage = errorMessage;\n        }\n    }\n\n    getResult(): T | null {\n        if (this.result === undefined) {\n            return null;\n        }\n        return this.result;\n    }\n\n    getSuccess(): boolean {\n        return this.success;\n    }\n\n    getMessage(): string {\n        return this.errorMessage;\n    }\n}\n","import { FrostResult } from \"../../Model/FrostResult\";\nimport FrostFactory from \"./FrostFactory\";\nimport QueryBuilder from \"./QueryBuilder\";\n\nexport default class FrostServer {\n    private url: string;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    public getUrl(): string {\n        return this.url;\n    }\n\n    public setUrl(url: string): void {\n        this.url = url;\n    }\n\n    public async request<T>(\n        ff: FrostFactory<T>,\n        options: any\n    ): Promise<FrostResult<T>> {\n        let req: string = ff.getQueryBuilder().getQuery(options);\n        const json: any = await fetch(this.url + req).then((response) => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                return null;\n            }\n        });\n        if (json === null) {\n            return new FrostResult<T>(null, false, \"fetch error\");\n        }\n        let result: T;\n        try {\n            result = ff.getConverter().convert(json, options);\n        } catch (error) {\n            return new FrostResult<T>(null, false, error.message);\n        }\n        return new FrostResult<T>(result, true, \"\");\n    }\n}\n","import ResultModelConverter from \"./ResultModelConverter\";\nimport QueryBuilder from \"./QueryBuilder\";\n\nexport default abstract class FrostFactory<T> {\n\n    private rmc: ResultModelConverter<T>;\n    private qb: QueryBuilder;\n\n    constructor(rmc: ResultModelConverter<T>, qb: QueryBuilder) {\n        this.rmc = rmc;\n        this.qb = qb;\n    }\n\n    public getConverter(): ResultModelConverter<T> {\n        return this.rmc;\n    }\n\n    public getQueryBuilder(): QueryBuilder {\n        return this.qb;\n    }\n}","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetStationFactory extends FrostFactory<ObservationStation> {\n    constructor() {\n        super(new GetStationConverter(), new GetStationBuilder());\n    }\n}\n\nexport class GetStationConverter\n    implements ResultModelConverter<ObservationStation> {\n    public convert(\n        json: ObservationStationEntity,\n        options: getStationOptions\n    ): ObservationStation {\n        let pos: Position;\n        if (json.Locations === undefined || json.Locations === null) {\n            throw new Error(\"Thing has no Location\");\n        } else {\n            pos = new Position(\n                json.Locations[0].location.coordinates[1],\n                json.Locations[0].location.coordinates[0]\n            );\n        }\n\n        if (json.Datastreams === undefined || json.Datastreams === null) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n\n        let features: Feature[] = [];\n\n        let fp: FeatureProvider = FeatureProvider.getInstance();\n        json.Datastreams.forEach((element) => {\n            let getfeat: Feature | undefined = fp.getFeature(\n                element.ObservedProperty[\"@iot.id\"]\n            );\n            if (getfeat !== undefined) {\n                let feat: Feature = getfeat;\n                let isin: boolean = false;\n                features.forEach(f => {\n                    if (f.getId() === feat.getId()) {\n                        isin = true;\n                    }\n                })\n                if (isin === false) {\n                    features.push(getfeat);\n                }\n            }\n        });\n\n        return new ObservationStation(\n            json[\"@iot.id\"],\n            json.name,\n            json.description,\n            pos,\n            features\n        );\n    }\n}\n\nexport class GetStationBuilder implements QueryBuilder {\n    public getQuery(options: getStationOptions): string {\n        return (\n            \"Things('\" +\n            options.id +\n            \"')?$select=@iot.id,name,description&$expand=Locations($select=location),Datastreams/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface getStationOptions {\n    id: string;\n}\n\ninterface ObservationStationEntity {\n    name: string;\n    description: string;\n    Datastreams?: DatastreamsEntity[] | null;\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedPropertyEntity;\n}\ninterface ObservedPropertyEntity {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: LocationEntity;\n}\ninterface LocationEntity {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetObservationStationsFactory extends FrostFactory<\n    ObservationStation[]\n    > {\n    constructor() {\n        super(\n            new GetObservationStationsConverter(),\n            new GetObservationStationsBuilder()\n        );\n    }\n}\n\nexport class GetObservationStationsConverter\n    implements ResultModelConverter<ObservationStation[]> {\n    public convert(\n        json: ResultList,\n        options: GetObservationStationsOptions\n    ): ObservationStation[] {\n        let stations: ObservationStation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        json.value.forEach((element) => {\n            let coord: number[] = element.Locations[0].location.coordinates;\n            let pos: Position = new Position(coord[1], coord[0]);\n\n            let features: Feature[] = [];\n            let fp: FeatureProvider = FeatureProvider.getInstance();\n            if (\n                element.Datastreams === null ||\n                element.Datastreams === undefined\n            ) {\n                throw new Error(\"Cannot parse response of server\");\n            }\n            element.Datastreams.forEach((stream) => {\n                let feat: Feature | undefined = fp.getFeature(\n                    stream.ObservedProperty[\"@iot.id\"]\n                );\n                if (feat !== undefined) {\n                    features.push(feat);\n                }\n            });\n            stations.push(\n                new ObservationStation(\n                    element[\"@iot.id\"],\n                    element.name,\n                    element.description,\n                    pos,\n                    []\n                )\n            );\n        });\n        return stations;\n    }\n}\n\nexport class GetObservationStationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationStationsOptions): string {\n        return (\n            \"Things?$filter=geo.distance(Locations/location,geography'POINT(\" +\n            options.middle.getLongitude() +\n            \" \" +\n            options.middle.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))&$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface GetObservationStationsOptions {\n    middle: Position;\n    radius: number;\n}\n\nexport interface ResultList {\n    value?: ValueEntity[] | null;\n}\nexport interface ValueEntity {\n    name: string;\n    description: string;\n    properties?: Properties | null;\n    \"Datastreams@iot.navigationLink\": string;\n    Datastreams?: DatastreamsEntity[] | null;\n    \"MultiDatastreams@iot.navigationLink\": string;\n    \"Locations@iot.navigationLink\": string;\n    Locations: LocationsEntity[];\n    \"HistoricalLocations@iot.navigationLink\": string;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Properties {\n    \"hardware.id\": string;\n    shortname: string;\n    \"operator.domain\": string;\n    station_active_from?: string | null;\n    station_setting_name?: string | null;\n    \"station type name\"?: string | null;\n    station_no?: number | null;\n    documentation?: string | null;\n}\nexport interface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\nexport interface ObservedProperty {\n    \"@iot.id\": string;\n}\nexport interface LocationsEntity {\n    location: Location;\n}\nexport interface Location {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\nimport { Scale } from \"../../../Model/Scale\";\n\nexport class GetLatestObservationFactory extends FrostFactory<Observation> {\n    constructor() {\n        super(\n            new GetLatestObservationConverter(),\n            new GetLatestObservationBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationConverter\n    implements ResultModelConverter<Observation> {\n    public convert(\n        json: ResultList,\n        options: GetLatestObservationOptions\n    ): Observation {\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        if (json.value[0] === null || json.value[0] === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        if (\n            json.value[0].Observations === null ||\n            json.value[0].Observations === undefined\n        ) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        if (\n            json.value[0].Observations[0] === null ||\n            json.value[0].Observations[0] === undefined\n        ) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n\n        let observation: ObservationsEntity = json.value[0].Observations[0];\n\n        return new Observation(\n            options.station,\n            options.feature,\n            observation.result,\n            new Date(observation.phenomenonTime)\n        );\n    }\n}\n\nexport class GetLatestObservationBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() +\n            \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Observations($top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationOptions {\n    station: ObservationStation;\n    feature: Feature;\n}\n\nexport interface ResultList {\n    value?: ValueEntity[] | null;\n}\nexport interface ValueEntity {\n    Observations?: ObservationsEntity[] | null;\n    \"Observations@iot.nextLink\": string;\n    \"@iot.id\": string;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\nimport { Stream } from \"stream\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetLatestObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(\n            new GetLatestObservationsConverter(),\n            new GetLatestObservationsBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(\n        json: ResultList,\n        options: GetLatestObservationsOptions\n    ): Observation[] {\n        let observations: Observation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n\n        json.value.forEach((stream) => {\n            try {\n                let thing: Thing = stream.Thing;\n                if (thing.Locations === null || thing.Locations === undefined) {\n                    return;\n                }\n                if (\n                    thing.Locations[0].location.coordinates === null ||\n                    thing.Locations[0].location.coordinates === undefined\n                ) {\n                    return;\n                }\n                let pos: Position = new Position(\n                    thing.Locations[0].location.coordinates[1],\n                    thing.Locations[0].location.coordinates[0]\n                );\n\n                let features: Feature[] = [];\n\n                if (\n                    thing.Datastreams === null ||\n                    thing.Datastreams === undefined\n                ) {\n                    return;\n                }\n\n                let fp: FeatureProvider = FeatureProvider.getInstance();\n\n                thing.Datastreams.forEach((dastream) => {\n                    let feat: Feature | undefined = fp.getFeature(\n                        dastream.ObservedProperty[\"@iot.id\"]\n                    );\n                    if (feat !== undefined) {\n                        features.push(feat);\n                    }\n                });\n\n                let sta: ObservationStation = new ObservationStation(\n                    thing[\"@iot.id\"],\n                    thing.name,\n                    thing.description,\n                    pos,\n                    features\n                );\n\n                if (\n                    stream.Observations === null ||\n                    stream.Observations === undefined\n                ) {\n                    return;\n                }\n                if (stream.Observations[0] === null) {\n                    return;\n                }\n                observations.push(\n                    new Observation(\n                        sta,\n                        options.feature,\n                        stream.Observations[0].result,\n                        new Date(stream.Observations[0].phenomenonTime)\n                    )\n                );\n            } catch (e) { }\n        });\n\n        return observations;\n    }\n}\n\nexport class GetLatestObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationsOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id,name&$filter=geo.distance(Thing/Locations/location,geography'POINT(\" +\n            options.center.getLongitude() +\n            \" \" +\n            options.center.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(phenomenonTime,(now() sub duration'P1d')) and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Thing($select=name,@iot.id;$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)),Observations($select=result;$filter=phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationsOptions {\n    center: Position;\n    radius: number;\n    feature: Feature;\n}\n\ninterface ResultList {\n    value?: ValueEntity[] | null;\n}\ninterface ValueEntity {\n    name: string;\n    Thing: Thing;\n    Observations?: (ObservationsEntity | null)[] | null;\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string | null;\n}\ninterface Thing {\n    name: string;\n    description: string;\n    Datastreams?: DatastreamsEntity[] | null;\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\ninterface ObservedProperty {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: Location;\n}\ninterface Location {\n    type: string;\n    coordinates?: number[] | null;\n}\ninterface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\n\nexport class GetObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(new GetObservationsConverter(), new GetObservationsBuilder());\n    }\n}\n\nexport class GetObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(\n        json: ResultList,\n        options: GetObservationsOptions\n    ): Observation[] {\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        let observations: Observation[] = [];\n        json.value.forEach((stream) => {\n            if (\n                stream.Observations === null ||\n                stream.Observations === undefined\n            ) {\n                return;\n            }\n            stream.Observations.forEach((obs) => {\n                if (obs !== null) {\n                    observations.push(\n                        new Observation(\n                            options.station,\n                            options.feature,\n                            obs.result,\n                            new Date(obs.phenomenonTime)\n                        )\n                    );\n                }\n            });\n        });\n        return observations;\n    }\n}\n\nexport class GetObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationsOptions): string {\n        return \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() + \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() + \"'&$expand=Observations($filter=overlaps(phenomenonTime, \" +\n            this.properDate(options.start) + \"/\" + this.properDate(options.end) + \");$orderby=phenomenonTime desc)\";\n    }\n\n    private properDate(date: Date): string {\n        return date.getFullYear() + \"-\" + date.getMonth() + \"-\" +\n            date.getDay() + \"T\" + date.getHours + \":\" + date.getMinutes + \":\" + date.getSeconds() + \"Z\";\n    }\n}\n\nexport interface GetObservationsOptions {\n    station: ObservationStation;\n    feature: Feature;\n    start: Date;\n    end: Date;\n}\n\nexport interface ResultList {\n    value?: ValueEntity[] | null;\n}\nexport interface ValueEntity {\n    Observations?: (ObservationsEntity | null)[] | null;\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string | null;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    resultTime: string;\n    result: number;\n    parameters: Parameters;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Parameters {\n    \"last calibration\": string;\n}\n","import { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Color } from \"../../Model/Color\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport FrostServer from \"./FrostServer\";\nimport { GetStationFactory } from \"./factories/GetStation\";\nimport { FrostResult } from \"../../Model/FrostResult\";\nimport { GetObservationStationsFactory } from \"./factories/GetObservationStations\";\nimport { GetLatestObservationFactory } from \"./factories/GetLatestObservation\";\nimport { GetLatestObservationsFactory } from \"./factories/GetLatestObservations\";\nimport { GetObservationsFactory } from \"./factories/GetObservations\";\n\nexport default class DataProvider {\n    private static server: FrostServer = new FrostServer(\n        \"https://api.smartaq.net/v1.0/\"\n    );\n\n    private static handleFrostResult<T>(fr: FrostResult<T>): T {\n        let result: T | null = fr.getResult();\n        if (!fr.getSuccess() || result === null) {\n            //Error handling here\n            throw new Error(fr.getMessage());\n        } else {\n            return result;\n        }\n\n\n    }\n\n    static async getObservationStations(\n        middle: Position,\n        radius: number\n    ): Promise<ObservationStation[]> {\n        let fr: FrostResult<ObservationStation[]> = await this.server.request(\n            new GetObservationStationsFactory(),\n            {\n                middle,\n                radius,\n            }\n        );\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        let fr: FrostResult<Observation> = await this.server.request(\n            new GetLatestObservationFactory(),\n            { station, feature }\n        );\n        return this.handleFrostResult(fr);\n    }\n\n    static async getStation(id: string): Promise<ObservationStation> {\n        let fr: FrostResult<ObservationStation> = await this.server.request(\n            new GetStationFactory(),\n            { id }\n        );\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Promise<Observation[]> {\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            new GetLatestObservationsFactory(),\n            {\n                center,\n                radius,\n                feature,\n            }\n        );\n        let obsnull: Observation[] | null = fr.getResult();\n        if (obsnull !== null) {\n            return obsnull;\n        }\n        alert(fr.getMessage() + \"dp spec\");\n        return [];\n    }\n\n    static async getObservations(\n        station: ObservationStation,\n        feature: Feature,\n        start: Date,\n        end: Date\n    ): Promise<Observation[]> {\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            new GetObservationsFactory(),\n            {\n                station,\n                feature,\n                start,\n                end,\n            }\n        );\n        let obsnull: Observation[] | null = fr.getResult();\n        if (obsnull !== null) {\n            return obsnull;\n        }\n        alert(fr.getMessage() + \"dp spec\");\n        return [];\n    }\n}\n","import { Position } from './Position';\nimport { Feature } from './Feature';\nimport IDiagramController from '../Controller/DiagramController/DiagramController';\n\nexport class ObservationStation {\n    private id: string;\n    private name: string;\n    private description: string;\n    private position: Position;\n    private availableFeatures: Feature[];\n\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.position = position;\n        this.availableFeatures = availableFeatures;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public getPosition(): Position {\n        return this.position;\n    }\n\n    public getFeatures(): Feature[] {\n        return this.availableFeatures;\n    }\n\n    public getDiagramController(): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        for (let feature of this.availableFeatures) {\n            let featureDiagramControllerArray = feature.getDiagramController(this);\n            for (let controller of featureDiagramControllerArray) {\n                diagramController.push(controller);\n            }\n        }\n        return diagramController;\n    }\n\n    public hasFeature(feature: Feature): boolean {\n        //Not sure if this works \n        var found: boolean = false;\n        var length: number = this.availableFeatures.length;\n        for (var counter: number = 0; counter < length; counter++) {\n            if (feature === this.availableFeatures[counter]) {\n                found = true;\n            }\n        }\n        return found;\n    }\n}","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nimport ObservationStationProfile from \"./ObservationStationProfile\";\nimport LocationMap from \"./LocationMap\";\nimport Diagram from \"./Diagram\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\nimport MockDataProvider from \"../../Controller/MockDataProvider\";\n\nexport default class DetailPage extends React.Component<\n    IDetailPageProps,\n    IDetailPageState\n> {\n    constructor(props: IDetailPageProps) {\n        super(props);\n        this.state = { obs: null };\n        DataProvider.getStation(this.props.match.params.id).then((o) => {\n            this.setState({ obs: o });\n        });\n    }\n\n    //styles of this component\n    styles = {\n        main_container: {\n            paddingTop: \"20px\",\n        },\n    };\n\n    //return diagrams of this observation station\n    renderDiagrams() {\n        if (this.state.obs === null) return <CircularProgress />;\n\n        var diagramController = this.state.obs.getDiagramController();\n        return diagramController.map((controller) => (\n            <Grid item xl={6} lg={6} md={6} sm={6} xs={6}>\n                <Diagram controller={controller} />\n            </Grid>\n        ));\n    }\n\n    //render component\n    render() {\n        return (\n            <Grid container justify=\"center\">\n                <Grid\n                    container\n                    justify=\"center\"\n                    spacing={4}\n                    xl={8}\n                    lg={8}\n                    md={8}\n                    sm={12}\n                    xs={12}\n                    style={this.styles.main_container}\n                >\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12}>\n                        {this.state.obs ? (\n                            <ObservationStationProfile\n                                observationStation={this.state.obs}\n                            />\n                        ) : (\n                            <CircularProgress />\n                        )}\n                    </Grid>\n                    <Hidden only={[\"sm\", \"xs\"]}>\n                        <Grid item xl={4} lg={4} md={4}>\n                            {this.state.obs ? (\n                                <LocationMap\n                                    position={this.state.obs.getPosition()}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Grid>\n                    </Hidden>\n                    {this.renderDiagrams()}\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\ninterface IDetailPageProps {\n    match: { params: { id: string } };\n}\n\ninterface IDetailPageState {\n    obs: ObservationStation | null;\n}\n","import React from \"react\";\nimport {\n    Card,\n    Typography,\n    Divider,\n    CardContent,\n    Grid,\n} from \"@material-ui/core\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport ObservationItem from \"./ObservationItem\";\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\nimport Language from \"../../Controller/Storage/Language\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nexport default class ObservationStationProfile extends React.Component<\n    IObservationStationProfileProps,\n    IObservationStationProfileState\n    > {\n    languageProvider: Language;\n\n    constructor(props: IObservationStationProfileProps) {\n        super(props);\n        this.state = {\n            latestObservations: [],\n        };\n        this.languageProvider = Language.getInstance();\n        this.getLatestObservations().then((o) =>\n            this.setState({ latestObservations: o })\n        );\n    }\n\n    //styles for this component\n    styles = {\n        pos: {\n            marginBottom: 12,\n        },\n        section_1: {\n            padding: \"20px\",\n        },\n        section_2: {\n            padding: \"20px\",\n        },\n        feature_container: {\n            marginTop: \"20px\",\n        },\n    };\n\n    //colors that are asignable to the observation items icons\n    colors = [\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\",\n        \"#673ab7\",\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#8bc34a\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#795548\",\n        \"#9e9e9e\",\n        \"#607d8b\",\n    ];\n\n    //returns the latest observation for each feature of this observation station\n    private async getLatestObservations(): Promise<Array<Observation>> {\n        var features = this.props.observationStation.getFeatures();\n        console.log(this.props.observationStation);\n        var observations = new Array<Observation>();\n\n        for (let feature of features) {\n            var observation = await DataProvider.getLatestObservation(this.props.observationStation, feature);\n            observations.push(observation);\n        }\n\n        return observations;\n    }\n\n    //returns a random color from the above ones\n    private getRandomColor() {\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\n        var color = this.colors[randomNumber];\n        this.colors.splice(randomNumber, 1);\n        return Color.getColorFromHex(color);\n    }\n\n    //returns JSX Elements for each latest observation\n    private renderLatestObservations() {\n        return this.state.latestObservations.map((observation) => (\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <ObservationItem\n                    color={this.getRandomColor()}\n                    observation={observation}\n                />\n            </Grid>\n        ));\n    }\n\n    //returns the timestamp of the latest observation as a readable string\n    private renderObservationDate() {\n        if (this.state.latestObservations.length !== 0) {\n            return this.languageProvider.getDateString(\n                this.state.latestObservations[0].getTimeStamp()\n            );\n        } else {\n            return \"\";\n        }\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardContent>\n                    <div style={this.styles.section_1}>\n                        <Typography align=\"left\" variant=\"h4\" component=\"h2\">\n                            {this.props.observationStation.getName()}\n                        </Typography>\n                        <Typography\n                            align=\"left\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                            style={this.styles.pos}\n                        >\n                            {this.props.observationStation\n                                .getPosition()\n                                .getString()}\n                        </Typography>\n                        <Typography align=\"left\" variant=\"body2\" component=\"p\">\n                            {this.props.observationStation.getDescription()}\n                        </Typography>\n                    </div>\n                    <Divider variant=\"middle\" />\n                    <div style={this.styles.section_2}>\n                        <Grid container alignItems=\"stretch\">\n                            <Grid item xs>\n                                <Typography align=\"left\" variant=\"subtitle1\">\n                                    {this.languageProvider.getText(\n                                        \"last_measurement\"\n                                    )}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography\n                                    color=\"textSecondary\"\n                                    variant=\"subtitle1\"\n                                >\n                                    {this.renderObservationDate()}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid\n                            container\n                            style={this.styles.feature_container}\n                            spacing={2}\n                        >\n                            {this.renderLatestObservations()}\n                        </Grid>\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationStationProfileProps {\n    observationStation: ObservationStation;\n}\n\ninterface IObservationStationProfileState {\n    latestObservations: Observation[];\n}\n","import React from 'react';\n\nimport {\n    Card,\n    Grid,\n    Avatar,\n    Typography,\n    Box,\n} from '@material-ui/core';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library, IconName } from '@fortawesome/fontawesome-svg-core';\nimport { faThermometerHalf, faSmog, faTachometerAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport { Color } from '../../Model/Color';\nimport { Observation } from '../../Model/Observation';\nimport { Feature } from '../../Model/Feature';\n\nimport './ObservationItem.css';\n\n\nlibrary.add(faThermometerHalf, faSmog, faTachometerAlt);\n\nexport default class ObservationItem extends React.Component<IObservationItemProps, IObservationItemState> {\n    constructor(props: IObservationItemProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card className='feature-card'>\n                <Box className='card-content'>\n                    <Grid container direction='row'>\n                        <Grid container direction='column' justify='center' xl={2} lg={2} md={2} sm={2} xs={2}>\n                            <Avatar style={{ backgroundColor: this.props.color.getHex() }}>\n                                <FontAwesomeIcon icon={this.props.observation.getFeature().getIconName() as IconName} />\n                            </Avatar>\n                        </Grid>\n                        <Grid container direction='column' xl={10} lg={10} md={10} sm={10} xs={10}>\n                            <Typography className='centered-text' color='textSecondary'>{this.props.observation.getFeature().getName()}</Typography>\n                            <Typography className='centered-text' variant='subtitle1'>{this.props.observation.getValue() + ' ' + this.props.observation.getFeature().getUnitOfMeasurement()}</Typography>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationItemProps {\n    color: Color;\n    observation: Observation;\n}\n\ninterface IObservationItemState { }","import React from 'react';\n\nimport { Card } from '@material-ui/core';\n\nimport { Map, TileLayer, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport Leaflet from 'leaflet';\n\nimport { Position } from '../../Model/Position';\n\n\n\nexport default class LocationMap extends React.Component<ILocationMapProps, ILocationMapState> {\n\n    //zoom level of the map\n    private static readonly ZOOM_LEVEL = 20;\n\n    // server that provides tiles to render the map\n    private static readonly TILE_SERVER = 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\n    private static readonly TILE_SERVER_ATTRIBUTION = '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\n\n    // custom icon to show position\n    private static readonly MARKER_ICON_PATH = './marker_icon.svg'; //path to the icon image\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\n\n    static MARKER_ICON = new Leaflet.Icon({\n        iconUrl: require('' + LocationMap.MARKER_ICON_PATH),\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\n        iconAnchor: [LocationMap.MARKER_ICON_SIZE / 2, LocationMap.MARKER_ICON_SIZE], // point of the icon which will correspond to marker's location\n    });\n\n    constructor(props: ILocationMapProps) {\n        super(props);\n    }\n\n    // custom css styles\n    styles = {\n        map: {\n            height: '300px',\n        },\n    }\n\n    //render component as JSX.Element\n    render() {\n        var position = new Leaflet.LatLng(this.props.position.getLatitude(), this.props.position.getLongitude());\n        return (\n            <Card>\n                <Map\n                    center={position} //center map to the required position\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\n                    style={this.styles.map} //provide custom styles\n\n                    // diable zooming via mouse and keyboard and disable dragging\n                    scrollWheelZoom={false}\n                    dragging={false}\n                    keyboard={false}\n                    doubleClickZoom={false}\n                >\n                    <TileLayer\n                        url={LocationMap.TILE_SERVER}\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\n                    />\n                    <Marker\n                        position={position}\n                        icon={LocationMap.MARKER_ICON}\n                    />\n                </Map>\n            </Card>\n        );\n    }\n}\n\ninterface ILocationMapProps {\n    position: Position;\n}\n\ninterface ILocationMapState {\n}","import React from 'react';\nimport { Card, Divider, Typography, Grid, CircularProgress, Select, MenuItem, } from '@material-ui/core';\nimport Chart from \"react-google-charts\";\n\nimport IDiagramController from '../../Controller/DiagramController/DiagramController';\n\nexport default class Diagram extends React.Component<IDiagramProps, IDiagramState> {\n    //controller for this diagram\n    controller: IDiagramController;\n\n    constructor(props: IDiagramProps) {\n        super(props);\n        this.controller = this.props.controller;\n\n        //setup default configuration in state\n        this.state = {\n            configurationOption: this.controller.getDefaultConfigurationOption(),\n        }\n\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(this);\n    }\n\n    //styles of this component\n    styles = {\n        header: {\n            padding: '10px',\n            paddingLeft: '40px',\n        },\n        diagram: {\n            width: '100%',\n            height: '350px',\n        },\n    };\n\n    //change configuration in state\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\n        this.setState({\n            configurationOption: (event.target.value as string),\n        });\n    }\n\n    //return configuration options as menu items\n    renderConfigurationOptions() {\n        var configurationOptions = this.controller.getConfigurationOptions();\n        return (\n            configurationOptions.map((option) =>\n                <MenuItem value={option}>{option}</MenuItem>\n            )\n        );\n    }\n\n    //renders the configuration form of this diagram\n    renderDiagramConfiguration() {\n        //if configuration is enabled return slect form with configuration options\n        if (this.controller.isConfigurable()) {\n            return (\n                <Grid item>\n                    <Select\n                        value={this.state.configurationOption}\n                        onChange={this.handleConfigurationChange}\n                    >\n                        {this.renderConfigurationOptions()}\n                    </Select>\n                </Grid>\n            );\n            //not configurable return empty string\n        } else return ('');\n    }\n\n    //render component\n    render() {\n        return (\n            <Card>\n                <div style={this.styles.header}>\n                    <Grid container justify='space-between' alignItems='center'>\n                        <Grid item>\n                            <Typography variant='subtitle1'>{this.controller.feature.getName()}</Typography>\n                        </Grid>\n                        {this.renderDiagramConfiguration()}\n                    </Grid>\n                </div>\n                <Divider />\n                <Chart\n                    width={this.styles.diagram.width}\n                    height={this.styles.diagram.height}\n                    chartType={this.controller.getChartType()}\n                    options={this.controller.getGraphicsOptions()}\n                    loader={\n                        <Grid container justify='center' alignContent='center' style={this.styles.diagram}>\n                            <CircularProgress />\n                        </Grid>\n                    }\n                    data={this.controller.getData(this.state.configurationOption)}\n                />\n            </Card>\n        );\n    }\n}\n\nexport interface IDiagramProps {\n    controller: IDiagramController;\n}\n\ninterface IDiagramState {\n    configurationOption: string;\n}"],"sourceRoot":""}