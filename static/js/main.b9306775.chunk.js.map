{"version":3,"sources":["Controller/TestConfiguration.ts","Model/Polygon.ts","Controller/NearConfiguration.ts","Model/Position.ts","Jsons sync /^/.*$","View sync /^.*$","View/marker_icon.svg","serviceWorker.ts","index.tsx","Model/Color.ts","Controller/Storage/Language.ts","Model/Observation.ts","Model/ObservationStation.ts","Controller/FeatureProvider.ts","Controller/MockDataProvider.ts","Controller/FROST/MockDataProvider.ts","Model/Scale.ts","Controller/MapConfiguration.ts","Model/Viewport.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastYearPieChartController.ts","Controller/DiagramController/YearComparisonLineChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","Model/MapPin.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/StationConfiguration.ts","View/Layout.tsx","View/MapPage/Map.tsx","View/MapPage/StationInfo.tsx","View/MapPage/FeatureInfo.tsx","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/DetailPage.tsx","View/ObservationStationProfile.tsx","View/ObservationItem.tsx","View/LocationMap.tsx","View/AboutPage.tsx","View/Diagrams/Diagram.tsx","View/ErrorPage.tsx","View/LayoutComponents/LanguageMenu.tsx","View/LayoutComponents/PageMenu.tsx","View/PrivacyPolicyPage.tsx","Controller/Storage/MapConfigurationMemory.ts","Controller/MapController.ts","View/MapPage/MapPage.tsx"],"names":["TestConfiguration","feature","view","MapPin","getCenter","getString","Color","Math","random","station","Observation","Date","now","polygon","stations","getStations","values","index","length","this","getLatestObservationMock","v","push","getValue","avgValue","reduce","acc","c","getScale","getColor","Polygon","ObservationStation","Position","getFeatures","getRelatedScale","features","MapConfiguration","color","NearConfiguration","selectedFeature","scale","obs","value","getId","getPosition","observations","min","apply","map","p","max","sc","key","floor","val","getLimit","getHex","Scale","MockDataProvider","getLatestObservations","getZoom","buildNearScale","pins","forEach","o","buildMapPin","getObservationStation","latitude","longitude","abs","Error","pos","sqrt","pow","getLatitude","getLongitude","lat","lng","round","toString","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","Layout","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","r","g","b","TypeError","toHex","n","hex","toUpperCase","exec","parseInt","Language","selectedLangId","languages","selectedLang","languageData","text","strings","alert","name","languageID","find","undefined","localStorage","setItem","langs","Map","element","set","languageInstance","local","getItem","changeLanguage","observationStation","timestamp","description","position","availableFeatures","diagramController","getDiagramController","contr","found","counter","FeatureProvider","context","require","definition","f","Feature","nameId","descriptionId","defaultScale","webLinkId","limit","unitOfMeasurement","diagrams","icon","featureId","includes","getFeatureById","replace","json","instance","colors","randomColor","center","count","i","mockStation","mockFeature","radius","mockObservations","start","end","frequency","date","Array","valueOf","getFullYear","getMonth","getDate","observation","getHours","middle","results","a","parseFloat","q","fetch","result","Observations","Thing","Datastreams","flatMap","d","getInstance","getFeature","ObservedProperty","calculatePollutionIndex","Locations","coordinates","phenomenonTime","res","query","log","gOSsPromise","response","isNullOrUndefined","linearTransition","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","sort","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","obsStation","Viewport","zoom","ChartType","Timespan","FHLCConfigurationOption","timespan","xAxis","FeatureHistoryLineChartController","yAxisLabel","getName","getUnitOfMeasurement","chartType","graphicsOptions","isConfigutable","defaultConfigurationOption","configurationOptions","option","configurationOptionName","configurationOption","getFHLCConfigurationOption","getStart","getObservations","data","getTimeStamp","options","LINE_CHART","type","label","ComparisonToLastYearPieChartController","isConfigurable","configuration","getCTLYPCConfigurationOption","lastObservationValue","pop","higher","lower","PIE_CHART","YCLCCConfigurationOption","numberOfYears","YearComparisonLineChartController","getYCLCCConfigurationOption","cleanedObservations","filter","years","header","year","splice","dt","DataTable","addValue","dtAsArray","toArray","hAxis","format","gridlines","DTRow","numberOfValues","arrayRepresentation","dtrowA","dtrowB","rows","columnKey","rowIndex","getRowIndex","getBaseDate","columnIndex","getColumnIndex","datesAreEqual","BASE_YEAR","getMinutes","getSeconds","getMilliseconds","dateA","dateB","row","DiagramFactory","diagramMap","has","get","call","language","relatedWeblinkId","controllerIds","iconName","getText","controller","PolygonConfiguration","getRadius","vertices","tris","Delaunay","triangulate","polys","triangle","s1","p1","x","y","s2","p2","s3","p3","StationConfiguration","latestObs","className","exact","path","component","MapPage","DetailPage","AboutPage","PrivacyPolicyPage","props","nextViewport","lock","oldViewport","state","viewport","lastObservation","pin","L","IconMaterial","iconColor","markerColor","outlineColor","outlineWidth","setTimeout","newView","viewportLeafletToModel","getDistance","updateViewport","onViewportChange","setState","handlePopup","obsSt","getCoordinates","attribution","url","getIconFromMapPin","onOpen","polygons","positions","getPositionsFromPolygon","React","Component","StationInfo","href","alignContent","direction","spacing","variant","container","item","xs","display","onClick","openDetails","style","minWidth","useStyles","makeStyles","createStyles","typography","padding","background","marginBottom","box","alignItems","FeatureInfo","classes","useState","anchorEl","setAnchorEl","open","aria-describedby","event","currentTarget","visibility","onClose","anchorOrigin","vertical","horizontal","transformOrigin","getDescription","getRelatedWeblink","root","formControl","margin","FeatureSelect","setOpen","listAllFeatures","setFeature","config","setConfig","useEffect","startConf","conf","changeConfig","testConf","onConfigurationChange","nearConf","polyConf","stationConf","onChange","target","Search","searchTerm","locationEnabled","permissions","status","geolocation","getCurrentPosition","coords","updatePosition","err","input","onKeyPress","onSearch","locationClick","iconButton","orientation","divider","disabled","withStyles","width","maxWidth","marginLeft","flex","height","backgroundColor","getStyleFromScale","grad","slice","Legend","border","styles","main_container","paddingTop","getStation","xl","lg","md","sm","justify","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","marginTop","latestObservations","getLatestObservation","randomNumber","getRandomColor","month","day","getDay","hour","minute","getDateString","strParameters","num","str","align","renderObservationDate","renderLatestObservations","ObservationItem","feature_card","card_content","faThermometerHalf","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","paddingLeft","diagram","getDefaultConfigurationOption","handleConfigurationChange","bind","getConfigurationOptions","renderConfigurationOptions","renderDiagramConfiguration","getChartType","getGraphicsOptions","loader","getData","ErrorPage","LanguageMenu","availableLanguages","ref","getSelectedLanguage","handleClick","handleClose","getAvailabeleLanguages","lang","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","endIcon","aria-controls","aria-haspopup","langList","PageMenu","toogleDrawer","toogle","Link","to","textDecoration","float","anchor","button","DEFAULT_CONF","DEFAULT_VIEWPORT","MapConfigurationMemory","JSON","stringify","constructor","ls","parse","obj","MapController","useMemory","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","save","getPins","getPolygons","encodeURIComponent","updateCurrentPosition","lon","setCenter","mapController","selectedStation","getViewport","update","pinPromise","polyPromsie","Promise","all","pinPoly","sortedPins","dis","disSum","temp","handleViewportChange","promise","changePopupStation","term","search","isFinite","getMin","getMax","Box","onStationSelected","getFeatureSelectConf","zIndex","bottom","right"],"mappings":"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","file":"static/js/main.b9306775.chunk.js","sourcesContent":["import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport { Color } from \"../Model/Color\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Observation } from \"../Model/Observation\";\r\n\r\nexport default class TestConfiguration extends MapConfiguration {\r\n    private feature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.feature = feature;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [\r\n            new MapPin(\r\n                view.getCenter().getString(),\r\n                view.getCenter(),\r\n                10,\r\n                new Color(\r\n                    Math.random() * 255,\r\n                    Math.random() * 255,\r\n                    Math.random() * 255\r\n                )\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private async getLatestObservationMock(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 50,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\r\n        var stations = polygon.getStations();\r\n        var values = [];\r\n        for (let index = 0; index < stations.length; index++) {\r\n            var v = await this.getLatestObservationMock(\r\n                stations[index],\r\n                this.feature\r\n            );\r\n            values.push(v.getValue());\r\n        }\r\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\r\n        return this.getScale().getColor(avgValue);\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [\r\n            new Polygon(\r\n                [\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.4),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.5),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(50, 8.45),\r\n                        []\r\n                    ),\r\n                ],\r\n                new Color(0, 0, 0)\r\n            ),\r\n        ];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.getFeatures()[0].getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.feature];\r\n    }\r\n\r\n    setFeatures(features: Feature[]) {\r\n        if (features.length === 0) {\r\n            return; //no elements in array\r\n        }\r\n        this.feature = features[0];\r\n    }\r\n}\r\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport MockDataProvider from \"./FROST/MockDataProvider\";\r\nimport { Observation } from \"../Model/Observation\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\n\r\nconst SAMPLE_SCALE = 20;\r\n\r\nexport default class NearConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n    private scale: Scale;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n        this.scale = this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\r\n        return new MapPin(\r\n            obs.getId(),\r\n            obs.getPosition(),\r\n            value,\r\n            this.scale.getColor(value)\r\n        );\r\n    }\r\n\r\n    private buildNearScale(observations: Observation[]): Scale {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        var max = Math.max.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n\r\n        var sc: { [key: number]: string } = {};\r\n        // Sample 10 times between 0 => min and limit of feature => max\r\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\r\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\r\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\r\n            sc[key] = this.selectedFeature\r\n                .getRelatedScale()\r\n                .getColor(val)\r\n                .getHex();\r\n        }\r\n        return new Scale(true, sc);\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var observations = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n\r\n        this.scale = this.buildNearScale(observations);\r\n\r\n        var pins: MapPin[] = [];\r\n        observations.forEach((o) => {\r\n            pins.push(\r\n                this.buildMapPin(o.getObservationStation(), o.getValue())\r\n            );\r\n        });\r\n        return pins;\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n    getScale(): Scale {\r\n        return this.scale;\r\n    }\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","var map = {\n\t\"./MockFeature\": 147,\n\t\"./MockFeature.json\": 147,\n\t\"./TestFeature\": 148,\n\t\"./TestFeature.json\": 148,\n\t\"./saqnopmcpm2p5\": 149,\n\t\"./saqnopmcpm2p5.json\": 149,\n\t\"./saqnopncpm10\": 150,\n\t\"./saqnopncpm10.json\": 150,\n\t\"./saqnopplev\": 151,\n\t\"./saqnopplev.json\": 151,\n\t\"./saqnopta\": 152,\n\t\"./saqnopta.json\": 152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 208;","var map = {\n\t\"./AboutPage\": 92,\n\t\"./AboutPage.tsx\": 92,\n\t\"./DetailPage\": 88,\n\t\"./DetailPage.tsx\": 88,\n\t\"./Diagrams/Diagram\": 93,\n\t\"./Diagrams/Diagram.tsx\": 93,\n\t\"./ErrorPage\": 94,\n\t\"./ErrorPage.tsx\": 94,\n\t\"./Layout\": 81,\n\t\"./Layout.tsx\": 81,\n\t\"./LayoutComponents/LanguageMenu\": 95,\n\t\"./LayoutComponents/LanguageMenu.tsx\": 95,\n\t\"./LayoutComponents/PageMenu\": 96,\n\t\"./LayoutComponents/PageMenu.tsx\": 96,\n\t\"./LocationMap\": 91,\n\t\"./LocationMap.tsx\": 91,\n\t\"./MapPage/FeatureInfo\": 84,\n\t\"./MapPage/FeatureInfo.tsx\": 84,\n\t\"./MapPage/FeatureSelect\": 85,\n\t\"./MapPage/FeatureSelect.tsx\": 85,\n\t\"./MapPage/Legend\": 87,\n\t\"./MapPage/Legend.tsx\": 87,\n\t\"./MapPage/Map\": 82,\n\t\"./MapPage/Map.css\": 146,\n\t\"./MapPage/Map.tsx\": 82,\n\t\"./MapPage/MapPage\": 98,\n\t\"./MapPage/MapPage.tsx\": 98,\n\t\"./MapPage/Search\": 86,\n\t\"./MapPage/Search.tsx\": 86,\n\t\"./MapPage/StationInfo\": 83,\n\t\"./MapPage/StationInfo.tsx\": 83,\n\t\"./ObservationItem\": 90,\n\t\"./ObservationItem.tsx\": 90,\n\t\"./ObservationStationProfile\": 89,\n\t\"./ObservationStationProfile.tsx\": 89,\n\t\"./PrivacyPolicyPage\": 97,\n\t\"./PrivacyPolicyPage.tsx\": 97,\n\t\"./marker_icon.svg\": 220\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 218;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.5891ef15.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"typeface-roboto\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport lightGreen from \"@material-ui/core/colors/green\";\r\nimport Layout from \"./View/Layout\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: lightGreen[500],\r\n        },\r\n        secondary: {\r\n            main: purple[500],\r\n        },\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <Layout />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        if (n < 0 || n > 255) {\n            return this.toHex(0); //This should never happen, only for reusing this method later.\n        }\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n  id: string;\n  name: string;\n  strings: Strings;\n}\n\ninterface Strings {\n  [id: string]: string;\n}\n\nexport default class Language {\n  private static languageInstance: Language;\n\n  private selectedLangId: string;\n  private languages: Lang[];\n  private selectedLang: Lang;\n\n  constructor() {\n    this.selectedLangId = \"de-de\";\n    this.languages = languageData.languages;\n    this.selectedLang = this.languages[0];\n  }\n\n  public static getInstance(): Language {\n    if (!this.languageInstance) {\n      this.languageInstance = new Language();\n      var local = localStorage.getItem(\"language\");\n      if (local) {\n        //Change language if selected\n        this.languageInstance.changeLanguage(local);\n      }\n    }\n    return this.languageInstance;\n  }\n\n  public getText(id: string): string {\n    let text: string = this.selectedLang.strings[id];\n    if (text === \"\" || text == null) {\n      alert(\n        \"There is no string with id: \" +\n          id +\n          \" in \" +\n          this.selectedLang.name +\n          \".\"\n      );\n      return \"STRING MISSING\";\n    }\n    return text;\n  }\n\n  public getSelectedLanguage(): string {\n    return this.selectedLang.name;\n  }\n\n  public getSelectedLanguageId(): string {\n    return this.selectedLang.id;\n  }\n\n  public changeLanguage(languageID: string): void {\n    let find: Lang | undefined = this.languages.find(\n      (e) => e.id === languageID\n    );\n    if (find !== undefined) {\n      this.selectedLang = find;\n      this.selectedLangId = languageID;\n      localStorage.setItem(\"language\", this.selectedLangId);\n    }\n  }\n\n  public getAvailabeleLanguages(): Map<string, string> {\n    let langs: Map<string, string> = new Map<string, string>();\n    this.languages.forEach((element) => {\n      langs.set(element.id, element.name);\n    });\n    return langs;\n  }\n}\n","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import { Position } from './Position';\r\nimport { Feature } from './Feature';\r\nimport IDiagramController from '../Controller/DiagramController/DiagramController';\r\n\r\nexport class ObservationStation {\r\n    private id: string;\r\n    private name: string;\r\n    private description: string;\r\n    private position: Position;\r\n    private availableFeatures: Feature[];\r\n\r\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.position = position;\r\n        this.availableFeatures = availableFeatures;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.description;\r\n    }\r\n\r\n    public getPosition(): Position {\r\n        return this.position;\r\n    }\r\n\r\n    public getFeatures(): Feature[] {\r\n        return this.availableFeatures;\r\n    }\r\n\r\n    public getDiagramController(): IDiagramController[] {\r\n        var diagramController: IDiagramController[] = [];\r\n\r\n        this.availableFeatures.forEach(feature => {\r\n            let featureDiagramControllerArray = feature.getDiagramController(this);\r\n            featureDiagramControllerArray.forEach(contr => {\r\n                diagramController.push(contr);\r\n            });\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public hasFeature(feature: Feature): boolean {\r\n        //Not sure if this works \r\n        var found: boolean = false;\r\n        var length: number = this.availableFeatures.length;\r\n        for (var counter: number = 0; counter < length; counter++) {\r\n            if (feature === this.availableFeatures[counter]) {\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n}","import { Feature } from \"../Model/Feature\";\r\nimport { Scale } from \"../Model/Scale\";\r\n\r\nexport default class FeatureProvider {\r\n    private context: any;\r\n    private features: { [id: string]: Feature };\r\n    private static instance: FeatureProvider | null = null;\r\n\r\n    constructor() {\r\n        this.features = {};\r\n        this.context = require.context(\"../Jsons/\", true);\r\n    }\r\n\r\n    static getInstance(): FeatureProvider {\r\n        if (!this.instance) {\r\n            this.instance = new FeatureProvider();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private addFeature(definition: FeatureDefinition) {\r\n        if (definition) {\r\n            var f = new Feature(\r\n                definition.id,\r\n                definition.nameId,\r\n                definition.descriptionId,\r\n                new Scale(true, definition.defaultScale),\r\n                definition.webLinkId,\r\n                definition.limit,\r\n                definition.unitOfMeasurement,\r\n                definition.diagrams,\r\n                definition.icon,\r\n            );\r\n            this.features[f.getId()] = f;\r\n        }\r\n    }\r\n\r\n    //Returns all loaded features\r\n    listAllFeatures(): Feature[] {\r\n        return Object.keys(this.features).map((key) => {\r\n            return this.features[key];\r\n        });\r\n    }\r\n\r\n    getFeature(featureId: string): Feature | undefined {\r\n        if (Object.keys(this.features).includes(featureId)) {\r\n            return this.features[featureId];\r\n        } else {\r\n            var f = this.getFeatureById(featureId);\r\n            if (f) {\r\n                //Successfully read feature json\r\n                this.features[featureId] = f;\r\n                return f;\r\n            } else {\r\n                //console.log(\"Failed to read, \" + featureId, \".\");\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getFeatureById(featureId: string): Feature | null {\r\n        featureId = featureId.replace(/:/g, \"\");\r\n        try {\r\n            var json = this.context(\"./\" + featureId + \".json\");\r\n        } catch {\r\n            return null;\r\n        }\r\n        if (!json) {\r\n            return null; //Failed to read file\r\n        }\r\n        var definition = json as FeatureDefinition;\r\n        return new Feature(\r\n            definition.id,\r\n            definition.nameId,\r\n            definition.descriptionId,\r\n            new Scale(true, definition.defaultScale),\r\n            definition.webLinkId,\r\n            definition.limit,\r\n            definition.unitOfMeasurement,\r\n            definition.diagrams,\r\n            definition.icon,\r\n        );\r\n    }\r\n}\r\n\r\ninterface FeatureDefinition {\r\n    id: string;\r\n    nameId: string;\r\n    unitOfMeasurement: string;\r\n    descriptionId: string;\r\n    defaultScale: { [key: number]: string };\r\n    webLinkId: string;\r\n    limit: number;\r\n    diagrams: string[];\r\n    icon: string;\r\n}\r\n","import { Feature } from \"../Model/Feature\";\r\nimport { Observation } from \"../Model/Observation\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { Color } from \"../Model/Color\";\r\n\r\nexport default class MockDataProvider {\r\n    private static stations: { [key: string]: ObservationStation } = {};\r\n\r\n    private static randomColor(): Color {\r\n        return new Color(\r\n            Math.random() * 255,\r\n            Math.random() * 255,\r\n            Math.random() * 255\r\n        );\r\n    }\r\n    static mockFeature(): Feature {\r\n        var colors: { [key: number]: string } = {};\r\n        for (let index = 0; index < 5; index++) {\r\n            var c = this.randomColor().getHex();\r\n            colors[Math.floor(Math.random() * 100)] = c;\r\n        }\r\n        var scale = new Scale(true, colors);\r\n        return new Feature(\r\n            \"MockFeature\",\r\n            \"nameId\",\r\n            \"descId\",\r\n            scale,\r\n            \"weblink\",\r\n            100,\r\n            \"uoM\",\r\n            ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\r\n            ''\r\n        );\r\n    }\r\n    private static mockStation(center: Position): ObservationStation {\r\n        var id = Math.floor(Math.random() * 10000).toString();\r\n        var station = new ObservationStation(\r\n            id,\r\n            \"mockName\",\r\n            \"mockDesc\",\r\n            new Position(\r\n                center.getLatitude() + 6 * Math.random() - 3,\r\n                center.getLongitude() + 6 * Math.random() - 3\r\n            ),\r\n            []\r\n        );\r\n        MockDataProvider.stations[station.getId()] = station;\r\n        return station;\r\n    }\r\n\r\n    private static mockObservations(center: Position): Observation[] {\r\n        var count = Math.floor(Math.random() * 9) + 2;\r\n        var obs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            obs.push(\r\n                new Observation(\r\n                    this.mockStation(center),\r\n                    this.mockFeature(),\r\n                    Math.random() * 100,\r\n                    new Date(Date.now())\r\n                )\r\n            );\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Observation[] {\r\n        return this.mockObservations(center);\r\n    }\r\n\r\n    static getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Observation {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 100,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    static getObservations(\r\n        station: ObservationStation,\r\n        start: Date,\r\n        end: Date,\r\n        feature: Feature,\r\n        //how many observations per day are expected\r\n        frequency: number\r\n    ): Observation[] {\r\n        let date = start;\r\n        let observations = new Array<Observation>();\r\n\r\n        if (frequency <= 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        } else if (frequency > 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 24 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        }\r\n\r\n        return observations;\r\n    }\r\n\r\n    static getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): ObservationStation[] {\r\n        var obs = [];\r\n        for (let index = 0; index < 7; index++) {\r\n            obs.push(this.mockStation(middle));\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getStation(id: string): ObservationStation {\r\n        return new ObservationStation(\r\n            id,\r\n            'mockName',\r\n            'mockDesc',\r\n            new Position(0, 0),\r\n            [\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n            ]\r\n        );\r\n    }\r\n}","import { Feature } from \"../../Model/Feature\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Color } from \"../../Model/Color\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\nconst PNC10_ID = \"saqn:op:ncpm10\";\r\n\r\nexport default class MockDataProvider {\r\n    private static stations: { [key: string]: ObservationStation } = {};\r\n    private static gOSsPromise: Promise<any>;\r\n\r\n    private static randomColor(): Color {\r\n        return new Color(\r\n            Math.random() * 255,\r\n            Math.random() * 255,\r\n            Math.random() * 255\r\n        );\r\n    }\r\n    static mockFeature(): Feature {\r\n        var colors: { [key: number]: string } = {};\r\n        for (let index = 0; index < 5; index++) {\r\n            var c = this.randomColor().getHex();\r\n            colors[Math.floor(Math.random() * 100)] = c;\r\n        }\r\n        var scale = new Scale(true, colors);\r\n        return new Feature(\r\n            \"MockFeature\",\r\n            \"nameId\",\r\n            \"descId\",\r\n            scale,\r\n            \"weblink\",\r\n            100,\r\n            \"uoM\",\r\n            [],\r\n            \"icon\"\r\n        );\r\n    }\r\n    private static mockStation(center: Position): ObservationStation {\r\n        var id = Math.floor(Math.random() * 10000).toString();\r\n        var station = new ObservationStation(\r\n            id,\r\n            \"mockName\",\r\n            \"mockDesc\",\r\n            new Position(\r\n                center.getLatitude() + 6 * Math.random() - 3,\r\n                center.getLongitude() + 6 * Math.random() - 3\r\n            ),\r\n            []\r\n        );\r\n        MockDataProvider.stations[station.getId()] = station;\r\n        return station;\r\n    }\r\n    private static mockObservations(center: Position): Observation[] {\r\n        var count = Math.floor(Math.random() * 9) + 2;\r\n        var obs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            obs.push(\r\n                new Observation(\r\n                    this.mockStation(center),\r\n                    this.mockFeature(),\r\n                    Math.random() * 100,\r\n                    new Date(Date.now())\r\n                )\r\n            );\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    private static calculatePollutionIndex(results: {\r\n        [key: string]: string;\r\n    }): number {\r\n        if (Object.keys(results).length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        var r = Object.values(results);\r\n\r\n        var a = 0;\r\n        r.forEach((n) => (a += parseFloat(n)));\r\n        return Math.sqrt(a) / r.length;\r\n    }\r\n\r\n    static async getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Promise<Observation[]> {\r\n        var q =\r\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\r\n            \"$select=@iot.id,name\" +\r\n            \"&$filter=geo.distance(Thing/Locations/location,geography'POINT({lon} {lat})') lt {radius} and \" +\r\n            \"overlaps(phenomenonTime,(now() sub duration'P1d')) and \" +\r\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\r\n            \"&$expand=Thing($select=name,@iot.id;$expand=Locations($select=location),\" +\r\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)),\" +\r\n            \"Observations($select=result,phenomenonTime;$filter=\" +\r\n            \"phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1\" +\r\n            \")\";\r\n        q = q\r\n            .replace(/{lon}/g, center.getLongitude().toString())\r\n            .replace(/{lat}/g, center.getLatitude().toString())\r\n            .replace(/{radius}/g, radius.toString())\r\n            .replace(/{featureId}/g, feature.getId());\r\n        var json = await (await fetch(q)).json();\r\n        var result: IGetLatestObs[] = json.value;\r\n        var observations: Observation[] = [];\r\n        result.forEach((element) => {\r\n            if (element.Observations.length !== 0) {\r\n                var features: Feature[] = element.Thing.Datastreams.flatMap(\r\n                    (d) => {\r\n                        var f = FeatureProvider.getInstance().getFeature(\r\n                            d.ObservedProperty[\"@iot.id\"]\r\n                        );\r\n                        return f ?? [];\r\n                    }\r\n                );\r\n                if (feature.getId() === PNC10_ID) {\r\n                    element.Observations[0].result = this.calculatePollutionIndex(\r\n                        element.Observations[0].result as {\r\n                            [key: string]: string;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                var o = new Observation(\r\n                    new ObservationStation(\r\n                        element.Thing[\"@iot.id\"],\r\n                        element.Thing.name,\r\n                        element.Thing[\"@iot.id\"] + \"_desc\",\r\n                        new Position(\r\n                            element.Thing.Locations[0].location.coordinates[1],\r\n                            element.Thing.Locations[0].location.coordinates[0]\r\n                        ),\r\n                        features\r\n                    ),\r\n                    feature,\r\n                    (element.Observations[0].result as number) ?? -1,\r\n                    new Date(element.Observations[0].phenomenonTime)\r\n                );\r\n                observations.push(o);\r\n                MockDataProvider.stations[\r\n                    o.getObservationStation().getId()\r\n                ] = o.getObservationStation();\r\n            }\r\n        });\r\n\r\n        return observations;\r\n    }\r\n\r\n    static async getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        if (feature.getId() === \"MockFeature\") {\r\n            return this.mockObservations(station.getPosition())[0];\r\n        }\r\n        var q =\r\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\r\n            \"$select=@iot.id\" +\r\n            \"&$filter=Thing/@iot.id eq '{stationId}' and \" +\r\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\r\n            \"&$expand=Observations(\" +\r\n            \"$top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\";\r\n        q = q\r\n            .replace(/{featureId}/g, feature.getId())\r\n            .replace(/{stationId}/g, station.getId());\r\n        var res: IGetLatestObservation[] = (await (await fetch(q)).json())\r\n            .value;\r\n        //console.log(res);\r\n        if (!res || res.length === 0) {\r\n            return new Observation(station, feature, -1, new Date(Date.now()));\r\n        }\r\n        if (feature.getId() === PNC10_ID) {\r\n            res[0].Observations[0].result = this.calculatePollutionIndex(\r\n                res[0].Observations[0].result as {\r\n                    [key: string]: string;\r\n                }\r\n            );\r\n        }\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            res[0].Observations[0].result as number,\r\n            new Date(res[0].Observations[0].phenomenonTime)\r\n        );\r\n    }\r\n\r\n    static getObservations(\r\n        station: ObservationStation,\r\n        start: Date,\r\n        end: Date,\r\n        feature: Feature,\r\n        frequency?: Date\r\n    ): Observation[] {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    static async getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): Promise<ObservationStation[]> {\r\n        var query =\r\n            \"https://api.smartaq.net/v1.0/Things?\" +\r\n            \"$filter=geo.distance(Locations/location,geography'POINT({lon} {lat})') \" +\r\n            \"lt {radius} \" +\r\n            \"and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))\" +\r\n            \"&$expand=Locations($select=location),\" +\r\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)\";\r\n        console.log(\r\n            query\r\n                .replace(/{lon}/g, middle.getLongitude().toString())\r\n                .replace(/{lat}/g, middle.getLatitude().toString())\r\n                .replace(/{radius}/g, radius.toString())\r\n        );\r\n        MockDataProvider.gOSsPromise = fetch(\r\n            query\r\n                .replace(/{lon}/g, middle.getLongitude().toString())\r\n                .replace(/{lat}/g, middle.getLatitude().toString())\r\n                .replace(/{radius}/g, radius.toString())\r\n        );\r\n        var response = await (await MockDataProvider.gOSsPromise).json();\r\n        var obs: ObservationStation[] = [];\r\n        response.value.forEach((element: IGetObservationStations) => {\r\n            var features: Feature[] = element.Datastreams.flatMap((d) => {\r\n                var f = FeatureProvider.getInstance().getFeature(\r\n                    d.ObservedProperty[\"@iot.id\"]\r\n                );\r\n                if (!isNullOrUndefined(f)) {\r\n                    return f as Feature;\r\n                } else {\r\n                    return [];\r\n                }\r\n            });\r\n            var o = new ObservationStation(\r\n                element[\"@iot.id\"],\r\n                element.name,\r\n                element.description,\r\n                new Position(\r\n                    element.Locations[0].location.coordinates[1],\r\n                    element.Locations[0].location.coordinates[0]\r\n                ),\r\n                features\r\n            );\r\n            obs.push(o);\r\n            MockDataProvider.stations[o.getId()] = o;\r\n        });\r\n        return obs;\r\n    }\r\n\r\n    static getStation(id: string): ObservationStation {\r\n        return MockDataProvider.stations[id];\r\n    }\r\n}\r\n\r\ninterface IGetObservationStations {\r\n    \"@iot.id\": string;\r\n    name: string;\r\n    description: string;\r\n    Locations: [\r\n        {\r\n            location: {\r\n                coordinates: [number, number, number];\r\n            };\r\n        }\r\n    ];\r\n    Datastreams: {\r\n        ObservedProperty: {\r\n            \"@iot.id\": string;\r\n        };\r\n    }[];\r\n}\r\n\r\ninterface IGetLatestObservation {\r\n    Observations: [\r\n        {\r\n            phenomenonTime: string;\r\n            result: number | { [key: string]: string };\r\n        }\r\n    ];\r\n}\r\n\r\ninterface IGetLatestObs {\r\n    \"@iot.id\": string;\r\n    Thing: {\r\n        \"@iot.id\": string;\r\n        Locations: [\r\n            {\r\n                location: {\r\n                    coordinates: [number, number];\r\n                };\r\n            }\r\n        ];\r\n        name: string;\r\n        Datastreams: {\r\n            ObservedProperty: {\r\n                \"@iot.id\": string;\r\n            };\r\n        }[];\r\n    };\r\n    Observations: {\r\n        result: number | { [key: string]: string };\r\n        phenomenonTime: string;\r\n    }[];\r\n}\r\n","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import { Viewport } from \"../Model/Viewport\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\n\r\nexport default abstract class MapConfiguration {\r\n    protected buildMapPin(\r\n        obsStation: ObservationStation,\r\n        value: number\r\n    ): MapPin {\r\n        return new MapPin(\r\n            obsStation.getId(),\r\n            obsStation.getPosition(),\r\n            value,\r\n            this.getScale().getColor(value)\r\n        );\r\n    }\r\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\r\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\r\n    abstract getScale(): Scale;\r\n    abstract getFeatures(): Feature[];\r\n}\r\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\n\r\nexport default interface IDiagramController {\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    //returns type of chart\r\n    getChartType: () => ChartType,\r\n\r\n    //returns options that specify how the diagram is displayed\r\n    getGraphicsOptions: () => {},\r\n\r\n    //returns whether a diagram can be configured via a select form. In this case getSelectOprions must return an Array of select options\r\n    isConfigurable: () => boolean,\r\n\r\n    //returns all options that can be selected to configure the diagram\r\n    getConfigurationOptions: () => string[],\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption: () => string,\r\n\r\n    //returns the data that can be displayed in the diagram\r\n    getData: (configurationOptionName: string) => any[][],\r\n}\r\n\r\nexport enum ChartType {\r\n    LINE_CHART = 'LineChart',\r\n    PIE_CHART = 'PieChart',\r\n}","export default class Timespan {\r\n\r\n  //length in milliseconds\r\n  length: number;\r\n\r\n  constructor(length: number) {\r\n    this.length = length;\r\n  }\r\n\r\n  //returns the end of a timespan given the start date\r\n  public getEnd(start: Date): Date {\r\n    return (new Date(start.valueOf() + this.length));\r\n  }\r\n\r\n  //returns the start of a timespan given the end date\r\n  public getStart(end: Date): Date {\r\n    return (new Date(end.valueOf() - this.length));\r\n  }\r\n}\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport Timespan from '../../Model/Timespan';\r\nimport MockDataProvider from '../MockDataProvider';\r\n\r\nclass FHLCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n    //type and label for the xAxis\r\n    xAxis: { type: string, label: string };\r\n\r\n    constructor(name: string, timespan: Timespan, frequency: number, xAxis: { type: string, label: string }) {\r\n        this.name = name;\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n        this.xAxis = xAxis;\r\n    }\r\n}\r\n\r\nexport class FeatureHistoryLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = true;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        //last 24 hours\r\n        new FHLCConfigurationOption('last_24_hours', new Timespan(24 * 60 * 60 * 1000), 24, { type: 'date', label: 'Day' }),\r\n        //last 7 days\r\n        new FHLCConfigurationOption('last_7_days', new Timespan(7 * 24 * 60 * 60 * 1000), 12, { type: 'date', label: 'Day' }),\r\n        //last 31 days\r\n        new FHLCConfigurationOption('last_31_days', new Timespan(31 * 24 * 60 * 60 * 1000), 6, { type: 'date', label: 'Day' }),\r\n        //last year\r\n        new FHLCConfigurationOption('last_year', new Timespan(365 * 24 * 60 * 60 * 1000), 1, { type: 'date', label: 'Day' }),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = FeatureHistoryLineChartController.configurationOptions[0];\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel = this.feature.getName() + '[' + this.feature.getUnitOfMeasurement() + ']';\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return FeatureHistoryLineChartController.chartType;\r\n    };\r\n\r\n    getGraphicsOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return names of graphics options\r\n    getViewOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return FeatureHistoryLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return FeatureHistoryLineChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(option => option.name);\r\n        return optionNames;\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): any[][] {\r\n        //get option object\r\n        var configurationOption: FHLCConfigurationOption = this.getFHLCConfigurationOption(configurationOptionName);\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configurationOption.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configurationOption.frequency,\r\n        );\r\n\r\n        //add react google chart specific header\r\n        var data: any[] = [\r\n            [\r\n                configurationOption.xAxis,\r\n                this.yAxisLabel,\r\n            ],\r\n        ];\r\n\r\n        //extract values and timestamps from observations\r\n        observations.forEach(observation => {\r\n            let timestamp = observation.getTimeStamp();\r\n            let value = observation.getValue();\r\n            data.push([timestamp, value]);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\r\n        var options = FeatureHistoryLineChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(`${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`);\r\n    }\r\n}\r\n\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport Timespan from '../../Model/Timespan';\r\nimport MockDataProvider from '../MockDataProvider';\r\n\r\n\r\nclass CTLYPCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n\r\n    constructor(name: string, timespan: Timespan, frequency: number) {\r\n        this.name = name;\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class ComparisonToLastYearPieChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.PIE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigurable = false;\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new CTLYPCConfigurationOption('default_configuration', new Timespan(365 * 24 * 60 * 60 * 1000), 24),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = ComparisonToLastYearPieChartController.configurationOptions[0];\r\n\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n    }\r\n\r\n    getChartType(): ChartType {\r\n        return ComparisonToLastYearPieChartController.chartType;\r\n    }\r\n\r\n    getGraphicsOptions() {\r\n        return ComparisonToLastYearPieChartController.graphicsOptions;\r\n    }\r\n\r\n    isConfigurable() {\r\n        return ComparisonToLastYearPieChartController.isConfigurable;\r\n    }\r\n\r\n    getConfigurationOptions() {\r\n        return ComparisonToLastYearPieChartController.configurationOptions.map(option => option.name);\r\n    };\r\n\r\n    getDefaultConfigurationOption() {\r\n        return ComparisonToLastYearPieChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    getData(configurationOptionName: string): any[][] {\r\n        //configuration option by name\r\n        var configuration = this.getCTLYPCConfigurationOption(configurationOptionName);\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configuration.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configuration.frequency,\r\n        );\r\n\r\n        var lastObservationValue = observations.pop()?.getValue() as number;\r\n\r\n        var higher = 0;\r\n        var lower = 0;\r\n\r\n        observations.forEach(observation => {\r\n            (observation.getValue() > lastObservationValue) ? (higher++) : (lower++);\r\n        });\r\n\r\n        var data = [\r\n            ['Vergleich zum letzten Messwert', 'Anzahl Tage'],\r\n            ['higher', higher],\r\n            ['lower', lower],\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getCTLYPCConfigurationOption(name: string): CTLYPCConfigurationOption {\r\n        var options = ComparisonToLastYearPieChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(`${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`);\r\n    }\r\n}\r\n\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport MockDataProvider from '../MockDataProvider';\r\n\r\nclass YCLCCConfigurationOption {\r\n    name: string;\r\n    numberOfYears: number;\r\n    frequency: number;\r\n\r\n    constructor(name: string, numberOfYears: number, frequency: number) {\r\n        this.name = name;\r\n        this.numberOfYears = numberOfYears;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class YearComparisonLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = false;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new YCLCCConfigurationOption('default_configuration', 3, 1),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = new YCLCCConfigurationOption('default_configuration', 10, 1);\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {\r\n        hAxis: {\r\n            format: 'MMM',\r\n            gridlines: { count: 6 }\r\n        },\r\n    };\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel = `${this.feature.getName()} [${this.feature.getUnitOfMeasurement()}]`;\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return YearComparisonLineChartController.chartType;\r\n    };\r\n\r\n    getGraphicsOptions() {\r\n        return YearComparisonLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return YearComparisonLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return YearComparisonLineChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        return YearComparisonLineChartController.configurationOptions.map(option => option.name);\r\n    }\r\n\r\n    getYCLCCConfigurationOption(name: string) {\r\n        for (let option of YearComparisonLineChartController.configurationOptions) {\r\n            if (option.name === name) return option;\r\n        }\r\n        throw new Error('Configuration option: ' + name + ' does not exist for YearComparisonLineChart');\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): Array<Array<string | Date | number | null>> {\r\n        let configurationOption = this.getYCLCCConfigurationOption(configurationOptionName);\r\n        let numberOfYears = configurationOption.numberOfYears;\r\n        let frequency = configurationOption.frequency;\r\n\r\n        let now = new Date(Date.now());\r\n\r\n        //start of timespan\r\n        let start = new Date(now.getFullYear() - numberOfYears, 0, 1);\r\n        //end of timespan\r\n        let end = now;\r\n\r\n        //request (mock-)data\r\n        let observations = MockDataProvider.getObservations(this.observationStation, start, end, this.feature, frequency);\r\n\r\n        //filter out the null values\r\n        let cleanedObservations = observations.filter(observation => {\r\n            return (observation !== null);\r\n        });\r\n\r\n        //determine the displayed years\r\n        let years: number[] = new Array<number>();\r\n        for (let i = 0; i < numberOfYears; i++) {\r\n            years.push(now.getFullYear() - i);\r\n        }\r\n\r\n        //define header\r\n        let header: string[] = years.map(year => year.toString());\r\n        header.splice(0, 0, 'dates');\r\n\r\n\r\n        //define new data table with header\r\n        let dt = new DataTable(header)\r\n\r\n        //add every observation to the table\r\n        for (let observation of cleanedObservations) {\r\n            let date = observation.getTimeStamp();\r\n            let year = date.getFullYear().toString();\r\n            let value = observation.getValue();\r\n            dt.addValue(date, year, value);\r\n        }\r\n\r\n        //return data table as a twodimensional array\r\n        let dtAsArray = dt.toArray();\r\n        console.log(dtAsArray);\r\n        return dtAsArray;\r\n    }\r\n}\r\n\r\nclass DTRow {\r\n    date: Date;\r\n    values: Array<number>;\r\n\r\n    constructor(date: Date, numberOfValues: number) {\r\n        this.date = date;\r\n        this.values = new Array<number>(numberOfValues);\r\n    }\r\n\r\n    addValue(value: number, index: number) {\r\n        this.values[index] = value;\r\n    }\r\n\r\n    toArray(): Array<Date | number> {\r\n        let arrayRepresentation = new Array<Date | number>();\r\n        arrayRepresentation = this.values;\r\n        arrayRepresentation.splice(0, 0, this.date);\r\n        return arrayRepresentation;\r\n    }\r\n\r\n    static sort(dtrowA: DTRow, dtrowB: DTRow): number {\r\n        return ((dtrowA.date.valueOf() <= dtrowB.date.valueOf() ? -1 : 1));\r\n    }\r\n}\r\n\r\nclass DataTable {\r\n    static readonly BASE_YEAR = 2020;\r\n\r\n    header: string[];\r\n    rows: DTRow[];\r\n    numberOfValues: number;\r\n\r\n    constructor(header: string[]) {\r\n        this.header = header;\r\n        this.numberOfValues = header.length - 1;\r\n        this.rows = new Array<DTRow>();\r\n    }\r\n\r\n    addValue(date: Date, columnKey: string, value: number) {\r\n        //get row\r\n        let rowIndex = this.getRowIndex(date);\r\n        if (rowIndex === null) {\r\n            this.rows.push(new DTRow(this.getBaseDate(date), this.numberOfValues));\r\n            rowIndex = (this.rows.length - 1);\r\n        }\r\n\r\n        //get column\r\n        let columnIndex = this.getColumnIndex(columnKey);\r\n        if (columnKey === null) {\r\n            throw new Error(`No column key: ${columnKey} in this data table`);\r\n        }\r\n        columnIndex = columnIndex as number;\r\n\r\n        //add value\r\n        this.rows[rowIndex].addValue(value, columnIndex);\r\n    }\r\n\r\n    getColumnIndex(key: string): number | null {\r\n        for (let index = 0; index < this.header.length; index++) {\r\n            if (key === this.header[index]) {\r\n                return (index - 1);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getRowIndex(date: Date): number | null {\r\n        for (let index = 0; index < this.rows.length; index++) {\r\n            if (this.datesAreEqual(date, this.rows[index].date)) {\r\n                return index;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getBaseDate(date: Date) {\r\n        let baseDate = new Date(\r\n            DataTable.BASE_YEAR,\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        );\r\n        return baseDate;\r\n    }\r\n\r\n    //returns whether two dates are the same except their years\r\n    datesAreEqual(dateA: Date, dateB: Date): boolean {\r\n        let equal: boolean =\r\n            (dateA.getMonth() === dateB.getMonth()) &&\r\n            (dateA.getDate() === dateB.getDate()) &&\r\n            (dateA.getHours() === dateB.getHours()) &&\r\n            (dateA.getMinutes() === dateB.getMinutes()) &&\r\n            (dateA.getSeconds() === dateB.getSeconds()) &&\r\n            (dateA.getMilliseconds() === dateB.getMilliseconds());\r\n        return equal;\r\n    }\r\n\r\n    sort() {\r\n        this.rows.sort(DTRow.sort);\r\n    }\r\n\r\n    toArray() {\r\n        this.sort();\r\n\r\n        let arrayRepresentation = new Array<Array<string | Date | number | null>>();\r\n        arrayRepresentation = this.rows.map(row => row.toArray());\r\n        arrayRepresentation.splice(0, 0, this.header);\r\n        return arrayRepresentation;\r\n    }\r\n}\r\n\r\n","import { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport { FeatureHistoryLineChartController } from './FeatureHistoryLineChartController';\r\nimport { ComparisonToLastYearPieChartController } from './ComparisonToLastYearPieChartController';\r\nimport { YearComparisonLineChartController } from './YearComparisonLineChartController';\r\nimport IDiagramController from './DiagramController';\r\n\r\nexport default class DiagramFactory {\r\n    private static readonly diagramMap = new Map<string, Function>([\r\n        ['FeatureHistoryLineChart', (observationStation: ObservationStation, feature: Feature) => { return new FeatureHistoryLineChartController(observationStation, feature) }],\r\n        ['ComparisonToLastYearPieChart', (observationStation: ObservationStation, feature: Feature) => { return new ComparisonToLastYearPieChartController(observationStation, feature) }],\r\n        ['YearComparisonLineChart', (observationStation: ObservationStation, feature: Feature) => { return new YearComparisonLineChartController(observationStation, feature) }],\r\n    ]);\r\n\r\n    public static getDiagramController(id: string, observationStation: ObservationStation, feature: Feature): IDiagramController {\r\n        if (DiagramFactory.diagramMap.has(id)) {\r\n            var constructController = DiagramFactory.diagramMap.get(id) as Function;\r\n            return constructController.call(DiagramFactory, observationStation, feature);\r\n        } else {\r\n            throw new Error(`Diagram id: ${id}, is not supported`);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Scale } from \"./Scale\";\r\nimport { Observation } from \"./Observation\";\r\nimport { ObservationStation } from \"./ObservationStation\";\r\nimport Language from \"../Controller/Storage/Language\";\r\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\r\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport class Feature {\r\n    private id: string;\r\n    private nameId: string;\r\n    private descriptionId: string;\r\n    private scale: Scale;\r\n    private relatedWeblinkId: string;\r\n    private limit: number;\r\n    private unitOfMeasurement: string;\r\n    private controllerIds: string[];\r\n    private iconName: string;\r\n\r\n    constructor(\r\n        id: string,\r\n        nameId: string,\r\n        descriptionId: string,\r\n        scale: Scale,\r\n        relatedWeblinkId: string,\r\n        limit: number,\r\n        unitOfMeasurement: string,\r\n        controllerIds: string[],\r\n        iconName: string\r\n    ) {\r\n        this.id = id;\r\n        this.nameId = nameId;\r\n        this.descriptionId = descriptionId;\r\n        this.scale = scale;\r\n        this.relatedWeblinkId = relatedWeblinkId;\r\n        this.limit = limit;\r\n        this.unitOfMeasurement = unitOfMeasurement;\r\n        this.controllerIds = controllerIds;\r\n        this.iconName = iconName;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return language.getText(this.nameId);\r\n        //return this.nameId;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return language.getText(this.descriptionId);\r\n        //return this.descriptionId;\r\n    }\r\n\r\n    public getRelatedWeblink(): string {\r\n        return language.getText(this.relatedWeblinkId);\r\n        //return this.relatedWeblinkId;\r\n    }\r\n\r\n    public getRelatedScale(): Scale {\r\n        return this.scale;\r\n    }\r\n\r\n    public getDiagramController(\r\n        observationStation: ObservationStation\r\n    ): IDiagramController[] {\r\n        var diagramController = new Array<IDiagramController>();\r\n\r\n        this.controllerIds.forEach((id) => {\r\n            let controller = DiagramFactory.getDiagramController(\r\n                id,\r\n                observationStation,\r\n                this\r\n            );\r\n            diagramController.push(controller);\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public getLimit(): number {\r\n        return this.limit;\r\n    }\r\n\r\n    public getUnitOfMeasurement(): string {\r\n        return this.unitOfMeasurement;\r\n    }\r\n\r\n    public isLimitExceeded(observation: Observation): boolean {\r\n        return observation.getValue() > this.limit;\r\n    }\r\n\r\n    public getIconName(): string {\r\n        return this.iconName;\r\n    }\r\n}\r\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import MapConfiguration from \"../MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport MockDataProvider from \"../FROST/MockDataProvider\";\r\n//@ts-ignore\r\nimport Delaunay from \"delaunay-triangulation\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\n\r\nexport default class PolygonConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [];\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        var observations = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getRadius(),\r\n            this.selectedFeature\r\n        );\r\n        var stations: {\r\n            [key: string]: Observation;\r\n        } = {};\r\n        var vertices: Delaunay.Point[] = [];\r\n\r\n        for (let index = 0; index < observations.length; index++) {\r\n            stations[\r\n                observations[index]\r\n                    .getObservationStation()\r\n                    .getPosition()\r\n                    .getString()\r\n            ] = observations[index];\r\n        }\r\n\r\n        var tris = Delaunay.triangulate(vertices);\r\n        var polys: Polygon[] = [];\r\n        tris.forEach((triangle: any) => {\r\n            var s1 =\r\n                stations[\r\n                    new Position(triangle.p1.x, triangle.p1.y).getString()\r\n                ];\r\n            var s2 =\r\n                stations[\r\n                    new Position(triangle.p2.x, triangle.p2.y).getString()\r\n                ];\r\n            var s3 =\r\n                stations[\r\n                    new Position(triangle.p3.x, triangle.p3.y).getString()\r\n                ];\r\n            var avgValue = (s1.getValue() + s2.getValue() + s3.getValue()) / 3;\r\n            polys.push(\r\n                new Polygon(\r\n                    [\r\n                        s1.getObservationStation(),\r\n                        s2.getObservationStation(),\r\n                        s3.getObservationStation(),\r\n                    ],\r\n                    this.getScale().getColor(avgValue)\r\n                )\r\n            );\r\n        });\r\n\r\n        return polys;\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport MockDataProvider from \"./FROST/MockDataProvider\";\r\nimport { Feature } from \"../Model/Feature\";\r\n\r\nexport default class StationConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var latestObs = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n        return latestObs.map((o) =>\r\n            this.buildMapPin(o.getObservationStation(), o.getValue())\r\n        );\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport MapPage from \"./MapPage/MapPage\";\r\nimport DetailPage from \"./DetailPage\";\r\nimport ErrorPage from \"./ErrorPage\";\r\nimport AboutPage from \"./AboutPage\";\r\nimport PrivacyPolicyPage from \"./PrivacyPolicyPage\";\r\nimport PageMenu from \"./LayoutComponents/PageMenu\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Language from \"../Controller/Storage/Language\";\r\n\r\nfunction Layout() {\r\n    let language: Language = Language.getInstance();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <PageMenu language={language} />\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/\"\r\n                        component={MapPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/detail/:id\"\r\n                        component={DetailPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/about\"\r\n                        component={AboutPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/privacy-policy\"\r\n                        component={PrivacyPolicyPage}\r\n                    />\r\n                    {/* If no url pattern matches an error page is shown */}\r\n                    <Route>\r\n                        <ErrorPage\r\n                            code={404}\r\n                            message={Language.getInstance().getText(\"Error404\")}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import \"./Map.css\";\r\nimport React from \"react\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\n\r\nimport {\r\n    Map as LeafletMap,\r\n    TileLayer,\r\n    Marker,\r\n    Polygon as LeafletPolygon,\r\n    Viewport as LeafletViewport,\r\n    Popup,\r\n} from \"react-leaflet\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { StationInfo } from \"./StationInfo\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nrequire(\"leaflet-iconmaterial\");\r\n\r\nconst VIEW_UPDATE_DELAY = 500; // in ms\r\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\r\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\r\nconst DEFAULT_ZOOM = 5;\r\ninterface State {\r\n    viewport: Viewport;\r\n    lastObservation: Observation | null;\r\n}\r\n\r\ninterface Props {\r\n    onViewportChange: (viewport: Viewport) => void;\r\n    handlePopup: (pin: MapPin) => Promise<Observation>;\r\n    viewport: Viewport;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n}\r\n\r\nexport class Map extends React.Component<Props, State> {\r\n    nextViewport: LeafletViewport | null;\r\n    lock: boolean;\r\n    oldViewport: Viewport | null;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.lock = false;\r\n        this.nextViewport = null;\r\n        this.oldViewport = null;\r\n        this.state = {\r\n            viewport: this.props.viewport,\r\n            lastObservation: null,\r\n        };\r\n    }\r\n\r\n    private getIconFromMapPin(pin: MapPin): L.Icon {\r\n        // Custom icons with colors\r\n        //TODO: Add warning if limit is reached? (requires design change)\r\n        // @ts-ignore\r\n        var icon = L.IconMaterial.icon({\r\n            icon: \"\", // Name of Material icon\r\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\r\n            markerColor: pin.getColor().getHex(), // Marker fill color\r\n            outlineColor: \"black\", // Marker outline color\r\n            outlineWidth: 1, // Marker outline width\r\n        });\r\n        return icon;\r\n    }\r\n\r\n    private onViewportChange(viewport: LeafletViewport) {\r\n        this.nextViewport = viewport; //Update new viewport\r\n        if (!this.lock) {\r\n            if (!this.oldViewport) {\r\n                this.oldViewport = this.state.viewport; //Set viewport of last update\r\n            }\r\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\r\n            setTimeout(() => {\r\n                var newView = this.viewportLeafletToModel(\r\n                    this.nextViewport as LeafletViewport\r\n                );\r\n                this.lock = false;\r\n                if (\r\n                    this.oldViewport &&\r\n                    (newView\r\n                        .getCenter()\r\n                        .getDistance(this.oldViewport?.getCenter()) >\r\n                        DISTANCE_THRESHOLD ||\r\n                        Math.abs(\r\n                            newView.getZoom() - this.oldViewport?.getZoom()\r\n                        ) >= ZOOM_THRESHOLD)\r\n                ) {\r\n                    this.updateViewport(newView); //Only update if change has been significant\r\n                }\r\n            }, VIEW_UPDATE_DELAY);\r\n        }\r\n    }\r\n\r\n    private updateViewport(viewport: Viewport) {\r\n        this.props.onViewportChange(viewport);\r\n\r\n        this.setState({ viewport: viewport });\r\n        this.oldViewport = null;\r\n    }\r\n\r\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\r\n        return new Viewport(\r\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\r\n            viewport.zoom ?? DEFAULT_ZOOM\r\n        );\r\n    }\r\n\r\n    private async handlePopup(pin: MapPin) {\r\n        var observation = await this.props.handlePopup(pin);\r\n        this.setState({ lastObservation: observation });\r\n    }\r\n\r\n    private getPositionsFromPolygon(\r\n        polygon: Polygon\r\n    ): { lat: number; lng: number }[] {\r\n        return polygon\r\n            .getStations()\r\n            .map((obsSt: ObservationStation) =>\r\n                obsSt.getPosition().getCoordinates()\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <LeafletMap\r\n                    center={this.state.viewport.getCenter().getCoordinates()}\r\n                    zoom={this.state.viewport.getZoom()}\r\n                    onViewportChange={(v) => this.onViewportChange(v)}\r\n                >\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {this.props.pins.map((pin) => (\r\n                        <Marker\r\n                            position={pin.getPosition().getCoordinates()}\r\n                            icon={this.getIconFromMapPin(pin)}\r\n                        >\r\n                            <Popup onOpen={() => this.handlePopup(pin)}>\r\n                                {this.state.lastObservation ? (\r\n                                    <StationInfo\r\n                                        lastObservation={\r\n                                            this.state.lastObservation\r\n                                        }\r\n                                    />\r\n                                ) : (\r\n                                    <p>\r\n                                        {Language.getInstance().getText(\r\n                                            \"loading\"\r\n                                        )}\r\n                                    </p>\r\n                                )}\r\n                            </Popup>\r\n                        </Marker>\r\n                    ))}\r\n                    {this.props.polygons.map((polygon) => (\r\n                        <LeafletPolygon\r\n                            positions={this.getPositionsFromPolygon(polygon)}\r\n                            color={polygon.getColor().getHex()}\r\n                        />\r\n                    ))}\r\n                </LeafletMap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { Button, Typography, Grid } from \"@material-ui/core\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nimport FeatureInfo from \"./FeatureInfo\";\r\n\r\nlet language: Language = Language.getInstance();\r\n\r\ninterface State { }\r\ninterface Props {\r\n    lastObservation: Observation;\r\n}\r\n\r\nconst DETAIL_PATH = \"detail/\";\r\n\r\nexport class StationInfo extends React.Component<Props, State> {\r\n    openDetails() {\r\n        window.location.href =\r\n            DETAIL_PATH +\r\n            this.props.lastObservation.getObservationStation().getId();\r\n    }\r\n\r\n    render() {\r\n        var station = this.props.lastObservation.getObservationStation();\r\n        return (\r\n            <Grid alignContent=\"center\" direction=\"column\" spacing={5}>\r\n                <Typography variant=\"h4\" color=\"secondary\">\r\n                    {station.getName()}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    {station.getPosition().getString()}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n                        <Grid item xs>\r\n                            {this.props.lastObservation.getFeature().getName() +\r\n                                \":\"}\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            <Typography\r\n                                variant=\"h6\"\r\n                                display=\"inline\"\r\n                                color=\"primary\"\r\n                            >\r\n                                {Math.floor(\r\n                                    this.props.lastObservation.getValue() * 100\r\n                                ) / 100}{\" \"}\r\n                                {this.props.lastObservation\r\n                                    .getFeature()\r\n                                    .getUnitOfMeasurement()}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Typography>\r\n                <FeatureInfo\r\n                    feature={this.props.lastObservation.getFeature()}\r\n                />\r\n                <Button\r\n                    onClick={() => this.openDetails()}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ minWidth: \"300px\" }}\r\n                >\r\n                    {language.getText(\"stationInfoButton\")}\r\n                </Button>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Avatar, Button, Box } from \"@material-ui/core\";\r\nimport InfoIcon from \"@material-ui/icons/InfoRounded\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        typography: {\r\n            padding: theme.spacing(2),\r\n        },\r\n        icon: {\r\n            background: theme.palette.primary.main,\r\n            marginBottom: \"10px\",\r\n        },\r\n        box: {\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            padding: \"1px\",\r\n        },\r\n    })\r\n);\r\n\r\nlet language = Language.getInstance();\r\nconst LINK_BUTTON = \"RelatedLink\";\r\n\r\ninterface IProps {\r\n    feature: Feature | null | undefined;\r\n}\r\n\r\nexport default function FeatureInfo(props: IProps) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLImageElement | null>(\r\n        null\r\n    );\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <Avatar\r\n                className={classes.icon}\r\n                aria-describedby={id}\r\n                onClick={handleClick}\r\n                style={{ visibility: props.feature ? \"visible\" : \"hidden\" }}\r\n            >\r\n                <InfoIcon />\r\n            </Avatar>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"center\",\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\",\r\n                }}\r\n            >\r\n                <Box className={classes.box}>\r\n                    <Typography className={classes.typography}>\r\n                        {props.feature?.getDescription() ??\r\n                            language.getText(\"error\")}\r\n                    </Typography>\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        href={\r\n                            props.feature?.getRelatedWeblink() ??\r\n                            language.getText(\"error\")\r\n                        }\r\n                    >\r\n                        {language.getText(LINK_BUTTON)}\r\n                    </Button>\r\n                </Box>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Card,\r\n    CardContent,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\nimport LayersIcon from \"@material-ui/icons/Layers\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport MapConfiguration from \"../../Controller/MapConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\r\nimport NearConfiguration from \"../../Controller/NearConfiguration\";\r\nimport StationConfiguration from \"../../Controller/StationConfiguration\";\r\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\r\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\r\ninterface Props {\r\n    onConfigurationChange(mapConfig: MapConfiguration): void;\r\n    startConf?: { conf: string; feature: string };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            background: theme.palette.primary.main,\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function FeatureSelect(props: Props) {\r\n    const TEST_CONFIG = \"TestConfiguration\";\r\n    const NEAR_CONFIG = \"NearConfiguration\";\r\n    const POLY_CONFIG = \"PolygonConfiguration\";\r\n    const STATION_CONFIG = \"StationConfiguration\";\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\r\n    const [feature, setFeature] = useState<Feature | undefined>(\r\n        FeatureProvider.getInstance().listAllFeatures()[0]\r\n    );\r\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\r\n        setOpen(open ? null : event.currentTarget);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.startConf) {\r\n            //Get start values from props\r\n            setFeature(\r\n                FeatureProvider.getInstance().getFeature(\r\n                    props.startConf.feature\r\n                )\r\n            );\r\n            setConfig(props.startConf.conf);\r\n        }\r\n    }, []);\r\n    const changeConfig = (conf: string, feature: Feature) => {\r\n        console.log(conf);\r\n        setConfig(conf);\r\n        switch (conf) {\r\n            case TEST_CONFIG:\r\n                var testConf = new TestConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(testConf);\r\n                break;\r\n            case NEAR_CONFIG:\r\n                var nearConf = new NearConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(nearConf);\r\n                break;\r\n            case POLY_CONFIG:\r\n                var polyConf = new PolygonConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(polyConf);\r\n                break;\r\n            case STATION_CONFIG:\r\n                var stationConf = new StationConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(stationConf);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleFeatureChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        var f = FeatureProvider.getInstance().getFeature(\r\n            event.target.value as string\r\n        ); //Feature Id\r\n        setFeature(f);\r\n\r\n        if (f) {\r\n            if (config) {\r\n                changeConfig(config, f);\r\n            } else {\r\n                throw new Error(\"No config selected\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleConfigChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        if (!feature) {\r\n            return; //A feature has to be selected, should never happen.\r\n        }\r\n        changeConfig(event.target.value as string, feature);\r\n        //window.location.reload(); //Reload with new config\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Avatar className={classes.root} onClick={handleClick}>\r\n                <LayersIcon />\r\n            </Avatar>\r\n            {open ? (\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel>{\"Feature\"}</InputLabel>\r\n                            <Select\r\n                                onChange={handleFeatureChange}\r\n                                value={feature?.getId() ?? \"\"}\r\n                            >\r\n                                {FeatureProvider.getInstance()\r\n                                    .listAllFeatures()\r\n                                    .map((f) => (\r\n                                        <MenuItem value={f.getId()}>\r\n                                            {f.getName()}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel>{\"Style\"}</InputLabel>\r\n                            <Select\r\n                                onChange={handleConfigChange}\r\n                                value={config ?? \"\"}\r\n                            >\r\n                                <MenuItem value={POLY_CONFIG}>\r\n                                    {POLY_CONFIG}\r\n                                </MenuItem>\r\n                                <MenuItem value={STATION_CONFIG}>\r\n                                    {STATION_CONFIG}\r\n                                </MenuItem>\r\n                                <MenuItem value={NEAR_CONFIG}>\r\n                                    {NEAR_CONFIG}\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </CardContent>\r\n                </Card>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport {\n    TextField,\n    Paper,\n    IconButton,\n    Divider,\n    Theme,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LocationIcon from \"@material-ui/icons/LocationOn\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({\n    root: {\n        margin: \"5px 5px\",\n        padding: \"2px 4px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        width: \"100%\",\n        maxWidth: \"500px\",\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n});\n\nlet language = Language.getInstance();\n\ninterface Props {\n    classes: any;\n    onSearch(term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nclass Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Paper className={this.props.classes.root}>\n                <TextField\n                    type=\"search\"\n                    variant=\"outlined\"\n                    className={this.props.classes.input}\n                    label={language.getText(\"search\")}\n                    onKeyPress={(e) => {\n                        if (e.key === \"Enter\") {\n                            this.props.onSearch(this.state.searchTerm); //Enter key was pressed, search for this.state.searchTerm\n                        }\n                    }}\n                    onChange={(e) => {\n                        this.setState({ searchTerm: e.target.value });\n                    }}\n                    value={this.state.searchTerm}\n                />\n                <IconButton\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                >\n                    <SearchIcon />\n                </IconButton>\n                <Divider\n                    orientation=\"vertical\"\n                    className={this.props.classes.divider}\n                />\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                    disabled={!this.state.locationEnabled}\n                >\n                    <LocationIcon />\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles)(Search);\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        box: {\n            padding: theme.spacing(1),\n            width: \"50px\",\n            backgroundColor: \"white\",\n        },\n    })\n);\n\ninterface Props {\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"80px\",\n        width: \"40px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Box className={classes.box} border={1}>\n            <Grid container direction=\"column\">\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Legend;\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport MockDataProvider from '../Controller/MockDataProvider';\r\n\r\nimport { ObservationStation } from '../Model/ObservationStation';\r\n\r\nimport ObservationStationProfile from './ObservationStationProfile';\r\nimport LocationMap from './LocationMap';\r\nimport Diagram from './Diagrams/Diagram';\r\n\r\nexport default class DetailPage extends React.Component<IDetailPageProps, IDetailPageState> {\r\n\r\n    //the concerning observation station of this page\r\n    observationStation: ObservationStation;\r\n\r\n    constructor(props: IDetailPageProps) {\r\n        super(props);\r\n\r\n        //get observation station by id\r\n        this.observationStation = MockDataProvider.getStation(this.props.id);\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        main_container: {\r\n            paddingTop: '20px',\r\n        },\r\n    }\r\n\r\n    //return diagrams of this observation station\r\n    renderDiagrams() {\r\n        var diagramController = this.observationStation.getDiagramController();\r\n        return (\r\n            diagramController.map((controller) => (\r\n                <Grid item xl={6} lg={6} md={6} sm={6} xs={6} >\r\n                    <Diagram controller={controller} />\r\n                </Grid>)\r\n            ));\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Grid container justify='center'>\r\n                <Grid container justify='center' spacing={4} xl={8} lg={8} md={8} sm={12} xs={12} style={this.styles.main_container}>\r\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12} >\r\n                        <ObservationStationProfile observationStation={this.observationStation} />\r\n                    </Grid>\r\n                    <Hidden only={['sm', 'xs']}>\r\n                        <Grid item xl={4} lg={4} md={4}>\r\n                            <LocationMap position={this.observationStation.getPosition()} />\r\n                        </Grid>\r\n                    </Hidden>\r\n                    {this.renderDiagrams()}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IDetailPageProps {\r\n    id: string;\r\n}\r\n\r\ninterface IDetailPageState { }\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    Divider,\r\n    CardContent,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { ObservationStation } from '../Model/ObservationStation';\r\nimport ObservationItem from './ObservationItem';\r\nimport MockDataProvider from '../Controller/MockDataProvider';\r\nimport { Color } from '../Model/Color';\r\nimport { Observation } from '../Model/Observation';\r\n\r\nexport default class ObservationStationProfile extends React.Component<IObservationStationProfileProps, IObservationStationProfileState> {\r\n\r\n    //the corresponding observation station to this component\r\n    observationStation: ObservationStation;\r\n\r\n    constructor(props: IObservationStationProfileProps) {\r\n        super(props);\r\n        this.observationStation = this.props.observationStation;\r\n        this.state = {\r\n            latestObservations: this.getLatestObservations(),\r\n        }\r\n    }\r\n\r\n    //styles for this component\r\n    styles = {\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n        section_1: {\r\n            padding: '20px',\r\n        },\r\n        section_2: {\r\n            padding: '20px',\r\n        },\r\n        feature_container: {\r\n            marginTop: '20px',\r\n        },\r\n    }\r\n\r\n    //colors that are asignable to the observation items icons\r\n    colors = [\r\n        '#f44336',\r\n        '#e91e63',\r\n        '#9c27b0',\r\n        '#673ab7',\r\n        '#3f51b5',\r\n        '#2196f3',\r\n        '#00bcd4',\r\n        '#009688',\r\n        '#4caf50',\r\n        '#8bc34a',\r\n        '#cddc39',\r\n        '#ffeb3b',\r\n        '#ffc107',\r\n        '#ff9800',\r\n        '#ff5722',\r\n        '#795548',\r\n        '#9e9e9e',\r\n        '#607d8b',\r\n    ];\r\n\r\n\r\n    //returns the latest observation for each feature of this observation station\r\n    private getLatestObservations() {\r\n        var features = this.observationStation.getFeatures();\r\n        var observations = new Array<Observation>();\r\n\r\n        features.forEach(feature => {\r\n            let observation = MockDataProvider.getLatestObservation(this.observationStation, feature);\r\n            observations.push(observation);\r\n        });\r\n\r\n        return observations;\r\n    }\r\n\r\n    //returns a random color from the above ones\r\n    private getRandomColor() {\r\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\r\n        var color = this.colors[randomNumber];\r\n        this.colors.splice(randomNumber, 1);\r\n        return Color.getColorFromHex(color);\r\n    }\r\n\r\n    //returns JSX Elements for each latest observation\r\n    private renderLatestObservations() {\r\n        return this.state.latestObservations.map((observation) =>\r\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\r\n                <ObservationItem color={this.getRandomColor()} observation={observation} />\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    //returns the timestamp of the latest observation as a readable string\r\n    private renderObservationDate() {\r\n        if (this.state.latestObservations.length !== 0) {\r\n            var timestamp = this.state.latestObservations[0].getTimeStamp();\r\n\r\n            var year = timestamp.getFullYear();\r\n            var month = timestamp.getMonth();\r\n            var day = timestamp.getDay();\r\n            var hour = timestamp.getHours();\r\n            var minute = timestamp.getMinutes();\r\n\r\n            return this.getDateString(year, month, day, hour, minute);\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    //returns a readable date string\r\n    private getDateString(year: number, month: number, day: number, hour: number, minute: number) {\r\n        var parameters: number[] = [year, month, day, hour, minute];\r\n        var strParameters: string[] = parameters.map((num) => num.toString());\r\n        strParameters = strParameters.map((str) => {\r\n            if (str.length === 1) {\r\n                return ('0' + str);\r\n            } else {\r\n                return str;\r\n            }\r\n        });\r\n        return '' + strParameters[2] + '.' + strParameters[1] + '.' + strParameters[0] + ', ' + strParameters[3] + ':' + strParameters[4] + ' Uhr';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    <div style={this.styles.section_1}>\r\n                        <Typography align=\"left\" variant=\"h4\" component='h2' >\r\n                            {this.observationStation.getName()}\r\n                        </Typography>\r\n                        <Typography align=\"left\" color='textSecondary' component=\"p\" style={this.styles.pos}>\r\n                            {this.observationStation.getPosition().getString()}\r\n                        </Typography>\r\n                        <Typography align='left' variant=\"body2\" component=\"p\" >\r\n                            {this.observationStation.getDescription()}\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider variant=\"middle\" />\r\n                    <div style={this.styles.section_2}>\r\n                        <Grid container alignItems='stretch'>\r\n                            <Grid item xs>\r\n                                <Typography align='left' variant='subtitle1'>\r\n                                    Letzte Messung\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography color='textSecondary' variant='subtitle1'>\r\n                                    {this.renderObservationDate()}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container style={this.styles.feature_container} spacing={2}>\r\n\r\n                            {this.renderLatestObservations()}\r\n\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n            </Card >\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationStationProfileProps {\r\n    observationStation: ObservationStation;\r\n}\r\n\r\ninterface IObservationStationProfileState {\r\n    latestObservations: Observation[],\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    Grid,\r\n    Avatar,\r\n    Typography,\r\n    CardContent,\r\n} from '@material-ui/core';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThermometerHalf } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Color } from '../Model/Color';\r\nimport { Observation } from '../Model/Observation';\r\nimport { Feature } from '../Model/Feature';\r\n\r\n\r\nexport default class ObservationItem extends React.Component<IObservationItemProps, IObservationItemState> {\r\n\r\n    color: Color;\r\n    observation: Observation;\r\n    feature: Feature;\r\n\r\n    styles = {\r\n        feature_card: {\r\n        },\r\n        card_content: {\r\n            padding: '10px',\r\n        },\r\n    };\r\n\r\n    constructor(props: IObservationItemProps) {\r\n        super(props);\r\n        this.color = this.props.color;\r\n        this.observation = this.props.observation;\r\n        this.feature = this.observation.getFeature();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={this.styles.feature_card} >\r\n                <CardContent style={this.styles.card_content}>\r\n                    <Grid container alignItems='center'>\r\n                        <Grid item xl={2} lg={2} md={2} sm={2} xs={2}>\r\n                            <Avatar style={{ backgroundColor: this.color.getHex() }}>\r\n                                <FontAwesomeIcon icon={faThermometerHalf} />\r\n                            </Avatar>\r\n                        </Grid>\r\n                        <Grid item xl={10} lg={10} md={10} sm={10} xs={10}>\r\n                            <Typography color='textSecondary'>{this.feature.getName()}</Typography>\r\n                            <Typography variant='subtitle1'>{this.observation.getValue() + ' ' + this.feature.getUnitOfMeasurement()}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationItemProps {\r\n    color: Color;\r\n    observation: Observation;\r\n}\r\n\r\ninterface IObservationItemState { }","import React from 'react';\r\n\r\nimport { Card } from '@material-ui/core';\r\n\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport Leaflet from 'leaflet';\r\n\r\nimport { Position } from '../Model/Position';\r\n\r\n\r\n\r\nexport default class LocationMap extends React.Component<ILocationMapProps, ILocationMapState> {\r\n\r\n    //geo coordinates that will be marked on the map\r\n    position: Leaflet.LatLng;\r\n\r\n    //zoom level of the map\r\n    private static readonly ZOOM_LEVEL = 20;\r\n\r\n    // server that provides tiles to render the map\r\n    private static readonly TILE_SERVER = 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\r\n    private static readonly TILE_SERVER_ATTRIBUTION = '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\r\n\r\n    // custom icon to show position\r\n    private static readonly MARKER_ICON_PATH = './marker_icon.svg'; //path to the icon image\r\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\r\n\r\n    static MARKER_ICON = new Leaflet.Icon({\r\n        iconUrl: require('' + LocationMap.MARKER_ICON_PATH),\r\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\r\n        iconAnchor: [LocationMap.MARKER_ICON_SIZE / 2, LocationMap.MARKER_ICON_SIZE], // point of the icon which will correspond to marker's location\r\n    });\r\n\r\n    constructor(props: ILocationMapProps) {\r\n        super(props);\r\n        this.position = new Leaflet.LatLng(this.props.position.getLatitude(), this.props.position.getLongitude());\r\n    }\r\n\r\n    // custom css styles\r\n    styles = {\r\n        map: {\r\n            height: '300px',\r\n        },\r\n    }\r\n\r\n    //render component as JSX.Element\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Map\r\n                    center={this.position} //center map to the required position\r\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\r\n                    style={this.styles.map} //provide custom styles\r\n\r\n                    // diable zooming via mouse and keyboard and disable dragging\r\n                    scrollWheelZoom={false}\r\n                    dragging={false}\r\n                    keyboard={false}\r\n                    doubleClickZoom={false}\r\n                >\r\n                    <TileLayer\r\n                        url={LocationMap.TILE_SERVER}\r\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\r\n                    />\r\n                    <Marker\r\n                        position={this.position}\r\n                        icon={LocationMap.MARKER_ICON}\r\n                    />\r\n                </Map>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ILocationMapProps {\r\n    position: Position;\r\n}\r\n\r\ninterface ILocationMapState {\r\n}","import React from \"react\";\nimport { Fragment } from \"react\";\n\nexport default class AboutPage extends React.Component<\n    IAboutPageProps,\n    IAboutPageState\n> {\n    render() {\n        return (\n            <Fragment>\n                <h1>AboutPage</h1>\n            </Fragment>\n        );\n    }\n}\n\ninterface IAboutPageProps {}\n\ninterface IAboutPageState {}\n","import React from 'react';\r\nimport { Card, Divider, Typography, Grid, CircularProgress, Select, MenuItem, } from '@material-ui/core';\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport IDiagramController from '../../Controller/DiagramController/DiagramController';\r\n\r\nexport default class Diagram extends React.Component<IDiagramProps, IDiagramState> {\r\n    //controller for this diagram\r\n    controller: IDiagramController;\r\n\r\n    constructor(props: IDiagramProps) {\r\n        super(props);\r\n        this.controller = this.props.controller;\r\n\r\n        //setup default configuration in state\r\n        this.state = {\r\n            configurationOption: this.controller.getDefaultConfigurationOption(),\r\n        }\r\n\r\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(this);\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        header: {\r\n            padding: '10px',\r\n            paddingLeft: '40px',\r\n        },\r\n        diagram: {\r\n            width: '100%',\r\n            height: '350px',\r\n        },\r\n    };\r\n\r\n    //change configuration in state\r\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n        this.setState({\r\n            configurationOption: (event.target.value as string),\r\n        });\r\n    }\r\n\r\n    //return configuration options as menu items\r\n    renderConfigurationOptions() {\r\n        var configurationOptions = this.controller.getConfigurationOptions();\r\n        return (\r\n            configurationOptions.map((option) =>\r\n                <MenuItem value={option}>{option}</MenuItem>\r\n            )\r\n        );\r\n    }\r\n\r\n    //renders the configuration form of this diagram\r\n    renderDiagramConfiguration() {\r\n        //if configuration is enabled return slect form with configuration options\r\n        if (this.controller.isConfigurable()) {\r\n            return (\r\n                <Grid item>\r\n                    <Select\r\n                        value={this.state.configurationOption}\r\n                        onChange={this.handleConfigurationChange}\r\n                    >\r\n                        {this.renderConfigurationOptions()}\r\n                    </Select>\r\n                </Grid>\r\n            );\r\n            //not configurable return empty string\r\n        } else return ('');\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <div style={this.styles.header}>\r\n                    <Grid container justify='space-between' alignItems='center'>\r\n                        <Grid item>\r\n                            <Typography variant='subtitle1'>{this.controller.feature.getName()}</Typography>\r\n                        </Grid>\r\n                        {this.renderDiagramConfiguration()}\r\n                    </Grid>\r\n                </div>\r\n                <Divider />\r\n                <Chart\r\n                    width={this.styles.diagram.width}\r\n                    height={this.styles.diagram.height}\r\n                    chartType={this.controller.getChartType()}\r\n                    options={this.controller.getGraphicsOptions()}\r\n                    loader={\r\n                        <Grid container justify='center' alignContent='center' style={this.styles.diagram}>\r\n                            <CircularProgress />\r\n                        </Grid>\r\n                    }\r\n                    data={this.controller.getData(this.state.configurationOption)}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface IDiagramProps {\r\n    controller: IDiagramController;\r\n}\r\n\r\ninterface IDiagramState {\r\n    configurationOption: string;\r\n}","import React from 'react';\nimport { Fragment } from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </Fragment>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n  selectedLang: string;\n  anchorEl: Element | null;\n}\n\ninterface IProps {\n  language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n  private availableLanguages: Map<string, string>;\n  private ref: any;\n  private language: Language;\n\n  constructor(props: IProps) {\n    super(props);\n    this.language = props.language;\n    this.state = {\n      selectedLang: this.language.getSelectedLanguage(),\n      anchorEl: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.availableLanguages = this.language.getAvailabeleLanguages();\n  }\n\n  isSelectedLang(lang: string): boolean {\n    //return lang === this.state.selectedLang;\n    return false;\n  }\n\n  handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n    this.setState({ anchorEl: event.currentTarget });\n  }\n\n  handleClose(): void {\n    this.setState({ anchorEl: null });\n  }\n\n  handleMenuItemClick(event: React.MouseEvent<HTMLElement>, id: string): void {\n    this.language.changeLanguage(id);\n    window.location.reload();\n    this.setState({\n      anchorEl: null,\n      selectedLang: this.language.getSelectedLanguage(),\n    });\n  }\n\n  langList(): JSX.Element[] {\n    let list: JSX.Element[] = [];\n    this.availableLanguages.forEach((lang: string, id: string) => {\n      list.push(\n        <MenuItem\n          onClick={(e) => this.handleMenuItemClick(e, id)}\n          selected={id === this.language.getSelectedLanguageId()}\n        >\n          {lang}\n        </MenuItem>\n      );\n    });\n    return list;\n  }\n\n  render(): JSX.Element {\n    return (\n      <div>\n        <Button\n          onClick={this.handleClick}\n          color=\"inherit\"\n          startIcon={<Translate />}\n          endIcon={<ExpandMore />}\n          aria-controls=\"simple-menu\"\n          aria-haspopup=\"true\"\n        >\n          {this.state.selectedLang}\n        </Button>\n        <Menu\n          open={Boolean(this.state.anchorEl)}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n        >\n          {this.langList()}\n        </Menu>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQnet\n                        </Typography>\n                        <div style={{ marginLeft: 'auto' }}>\n\n                            <LanguageMenu language={this.language} />\n\n                        </div>\n                        <div>\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\n                                <MenuIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}","import React from \"react\";\n\nexport default class PrivacyPolicyPage extends React.Component<\n    IPrivacyPolicyPageProps,\n    IPrivacyPolicyPageState\n> {\n    render() {\n        return <h1>Privacy Policy Page</h1>;\n    }\n}\n\ninterface IPrivacyPolicyPageProps {}\n\ninterface IPrivacyPolicyPageState {}\n","import MapConfiguration from \"../MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport TestConfiguration from \"../TestConfiguration\";\r\nimport NearConfiguration from \"../NearConfiguration\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\r\nimport StationConfiguration from \"../StationConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\r\nconst DEFAULT_CONF = new StationConfiguration(\r\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\r\n);\r\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\r\n\r\nexport default class MapConfigurationMemory {\r\n    static save(conf: MapConfiguration, view: Viewport) {\r\n        localStorage.setItem(\r\n            LOCALSTORAGE_MAPCONF,\r\n            JSON.stringify({\r\n                type: conf.constructor.name,\r\n                feature: conf.getFeatures()[0].getId(),\r\n                view: view,\r\n            })\r\n        );\r\n    }\r\n\r\n    static load(): [MapConfiguration, Viewport] {\r\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\r\n        if (\r\n            ls &&\r\n            (JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: Viewport;\r\n            })\r\n        ) {\r\n            //return configuration if it exists\r\n            var obj = JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: any;\r\n            };\r\n            var view = new Viewport(\r\n                new Position(\r\n                    obj.view.center.latitude,\r\n                    obj.view.center.longitude\r\n                ),\r\n                obj.view.zoom\r\n            );\r\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\r\n            if (isNullOrUndefined(feature)) {\r\n                throw new Error(\r\n                    \"Feature \" + obj.feature + \" is not supported.\"\r\n                );\r\n            }\r\n            if (obj.type === \"NearConfiguration\") {\r\n                return [new NearConfiguration(feature), view];\r\n            } else if (obj.type === \"PolygonConfiguration\") {\r\n                return [new PolygonConfiguration(feature), view];\r\n            } else if (obj.type === \"StationConfiguration\") {\r\n                return [new StationConfiguration(feature), view];\r\n            } else {\r\n                return [new TestConfiguration(feature), view];\r\n            }\r\n        }\r\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\r\n    }\r\n}\r\n","import { MapPin } from \"../Model/MapPin\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Observation } from \"../Model/Observation\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport MapConfiguration from \"./MapConfiguration\";\r\nimport MapConfigurationMemory from \"./Storage/MapConfigurationMemory\";\r\nimport MockDataProvider from \"./FROST/MockDataProvider\";\r\nimport PolygonConfiguration from \"./MapPage/PolygonConfiguration\";\r\n\r\nexport class MapController {\r\n    private config: MapConfiguration;\r\n    private viewport: Viewport;\r\n\r\n    private DEFAULT_POSITION: Position = new Position(49, 8.4);\r\n    private DEFAULT_ZOOM: number = 5;\r\n\r\n    constructor(useMemory: boolean = true) {\r\n        if (useMemory) {\r\n            var mcm = MapConfigurationMemory.load();\r\n            this.config = mcm[0];\r\n            this.viewport = mcm[1];\r\n        } else {\r\n            this.viewport = new Viewport(\r\n                this.DEFAULT_POSITION,\r\n                this.DEFAULT_ZOOM\r\n            );\r\n            this.config = new PolygonConfiguration(\r\n                MockDataProvider.mockFeature()\r\n            );\r\n        }\r\n        if (this.config.getFeatures().length === 0) {\r\n            throw Error(\"Invalid MapConfiguration\");\r\n        }\r\n    }\r\n\r\n    async handlePopup(pin: MapPin): Promise<Observation> {\r\n        var station = await MockDataProvider.getStation(pin.getId());\r\n        return MockDataProvider.getLatestObservation(\r\n            station,\r\n            this.config.getFeatures()[0]\r\n        );\r\n    }\r\n\r\n    private save() {\r\n        MapConfigurationMemory.save(this.config, this.viewport);\r\n    }\r\n\r\n    /** \r\n    private configType(conf : any) : string {\r\n        switch (conf.constructor.name) {\r\n            case \"PolygonConfigutr\":\r\n                \r\n                break;\r\n        \r\n            default:\r\n                throw new Error(\"Could not find configuration.\")\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    getFeatureSelectConf(): { conf: string; feature: string } {\r\n        var f = this.config.getFeatures()[0].getId();\r\n        var c = this.config.constructor.name;\r\n        return { conf: c, feature: f };\r\n    }\r\n\r\n    getViewport(): Viewport {\r\n        return this.viewport;\r\n    }\r\n\r\n    handleViewportChange(viewport: Viewport) {\r\n        this.viewport = viewport;\r\n        this.save();\r\n    }\r\n\r\n    async getPins(): Promise<MapPin[]> {\r\n        return this.config.getPins(this.viewport);\r\n    }\r\n\r\n    async getPolygons(): Promise<Polygon[]> {\r\n        return this.config.getPolygons(this.viewport);\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.config.getScale();\r\n    }\r\n\r\n    changeFeature(feature: Feature) {\r\n        //TODO\r\n    }\r\n\r\n    onConfigurationChange(conf: MapConfiguration) {\r\n        this.config = conf;\r\n        this.save();\r\n    }\r\n\r\n    async search(searchTerm: string) {\r\n        if (searchTerm.length === 0) {\r\n            return; //No search possible\r\n        }\r\n\r\n        var response = await fetch(\r\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\r\n                encodeURIComponent(searchTerm)\r\n        );\r\n        var json = await response.json();\r\n        if (json.length === 0) {\r\n            return; //No location found\r\n        }\r\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\r\n    }\r\n\r\n    updateCurrentPosition(position: Position) {\r\n        this.viewport.setCenter(position);\r\n        console.log(position);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Map } from \"./Map\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapController } from \"../../Controller/MapController\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport FeatureSelect from \"./FeatureSelect\";\r\nimport Search from \"./Search\";\r\nimport Legend from \"./Legend\";\r\nimport { Box, Theme } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nconst styles = (theme: Theme) => ({});\r\n\r\ninterface State {\r\n    selectedStation: ObservationStation | null;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n    viewport: Viewport;\r\n}\r\n\r\ninterface Props {\r\n    classes: any;\r\n}\r\n\r\nconst DEFAULT_MIN = 0;\r\nconst DEFAULT_MAX = 100;\r\n\r\nclass MapPage extends React.Component<Props, State> {\r\n    mapController: MapController;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.mapController = new MapController();\r\n\r\n        this.state = {\r\n            selectedStation: null,\r\n            viewport: this.mapController.getViewport(),\r\n            pins: [],\r\n            polygons: [],\r\n        };\r\n        this.update();\r\n    }\r\n\r\n    // Set station as source for the StationInfo Popup\r\n    changePopupStation(station: ObservationStation) {\r\n        this.setState({\r\n            selectedStation: station,\r\n        });\r\n    }\r\n\r\n    // Reload Pins and Polygons\r\n    update() {\r\n        var pinPromise = this.mapController.getPins();\r\n        var polyPromsie = this.mapController.getPolygons();\r\n        Promise.all([pinPromise, polyPromsie]).then((pinPoly) => {\r\n            this.setState({\r\n                pins: pinPoly[0],\r\n                polygons: pinPoly[1],\r\n            });\r\n        });\r\n    }\r\n\r\n    getValueAt(position: Position, feature: Feature): number {\r\n        // Get pins sorted by distance\r\n        var sortedPins = this.state.pins.sort((a, b) => {\r\n            return (\r\n                a.getPosition().getDistance(position) -\r\n                b.getPosition().getDistance(position)\r\n            );\r\n        });\r\n        var dis = 0; //Distance of nearest station to position\r\n        var disSum = 0;\r\n        if (sortedPins.length !== 0) {\r\n            dis = sortedPins[0].getPosition().getDistance(position);\r\n        }\r\n        var value = 0;\r\n        for (let i = 0; i <= 2; i++) {\r\n            //nearest 3 stations (if they exist)\r\n            if (sortedPins.length > i) {\r\n                var temp =\r\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\r\n                disSum += temp;\r\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\r\n            }\r\n        }\r\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\r\n    }\r\n\r\n    onViewportChange(viewport: Viewport) {\r\n        this.mapController.handleViewportChange(viewport);\r\n        //Update Page\r\n        this.setState({\r\n            viewport: viewport,\r\n        });\r\n        this.update();\r\n    }\r\n\r\n    async onStationSelected(pin: MapPin): Promise<Observation> {\r\n        this.setState({ selectedStation: null });\r\n        var promise = this.mapController.handlePopup(pin);\r\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\r\n        return promise;\r\n    }\r\n\r\n    onSearch(term: string) {\r\n        this.mapController.search(term);\r\n        this.setState({ selectedStation: this.state.selectedStation });\r\n    }\r\n\r\n    getMin(): number {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(min)) {\r\n            min = DEFAULT_MIN;\r\n        }\r\n        return min;\r\n    }\r\n\r\n    getMax(): number {\r\n        var max = Math.max.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(max)) {\r\n            max = DEFAULT_MAX;\r\n        }\r\n        return max;\r\n    }\r\n\r\n    render() {\r\n        var min = this.getMin();\r\n        var max = this.getMax();\r\n        return (\r\n            <Box>\r\n                <Search\r\n                    onSearch={(term) => this.onSearch(term)}\r\n                    updatePosition={(pos) => {\r\n                        var view = this.state.viewport;\r\n                        view.setCenter(pos);\r\n                        this.onViewportChange(view);\r\n                    }}\r\n                />\r\n                <Map\r\n                    viewport={this.state.viewport}\r\n                    onViewportChange={(viewport) => {\r\n                        this.onViewportChange(viewport);\r\n                    }}\r\n                    handlePopup={(pin) => this.onStationSelected(pin)}\r\n                    pins={this.state.pins}\r\n                    polygons={this.state.polygons}\r\n                />\r\n                <FeatureSelect\r\n                    onConfigurationChange={(conf) => {\r\n                        this.mapController.onConfigurationChange(conf);\r\n                        this.update();\r\n                    }}\r\n                    startConf={this.mapController.getFeatureSelectConf()}\r\n                />\r\n                <Box\r\n                    zIndex={1000}\r\n                    style={{ position: \"absolute\", bottom: \"7%\", right: \"5%\" }}\r\n                >\r\n                    <Legend\r\n                        min={min}\r\n                        max={max}\r\n                        scale={this.mapController.getScale()}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MapPage);\r\n"],"sourceRoot":""}