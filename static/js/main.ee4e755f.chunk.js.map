{"version":3,"sources":["View/DetailPage sync /^.*$","View/DetailPage/marker_icon.svg","serviceWorker.ts","Model/Viewport.ts","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapPage/MapConfiguration.ts","Controller/MapPage/NearConfiguration.ts","Model/Polygon.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/MapPage/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapPage/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/About.tsx","View/PrivacyPolicy.tsx","View/Layout/LanguageMenu.tsx","View/Layout/PageMenu.tsx","View/HowItWorks.tsx","View/Layout/Layout.tsx","Controller/Storage/Configuration.ts","index.tsx","Controller/Storage/Language.ts","Model/FrostResult.ts","Controller/Frost/FrostServer.ts","Controller/Frost/FrostFactory.ts","Model/ObservationStation.ts","Controller/Frost/factories/GetStation.ts","Controller/Frost/factories/GetObservationStations.ts","Controller/Frost/factories/GetLatestObservation.ts","Controller/Frost/factories/GetLatestObservations.ts","Controller/Frost/factories/GetObservations.ts","Controller/Frost/DataProvider.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/DiagramController/RequestReducer.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastMonthPieChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","Controller/FeatureProvider.ts","Model/Position.ts","Model/Color.ts","Model/Observation.ts","View/DetailPage/DetailPage.tsx","View/DetailPage/ObservationStationProfile.tsx","View/DetailPage/ObservationItem.tsx","View/DetailPage/LocationMap.tsx","View/DetailPage/Diagram.tsx","Model/Scale.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","language","Language","getInstance","StationInfo","props","state","roadName","DataProvider","getAddress","lastObservation","getObservationStation","getPosition","then","road","setState","href","getId","station","Box","className","Grid","container","direction","Typography","variant","color","getName","getString","Divider","orientation","justify","getFeature","getRelatedWeblink","data-testid","display","Math","floor","getValue","getUnitOfMeasurement","Button","onClick","openDetails","getText","React","Component","require","Map","nextViewport","lock","oldViewport","viewport","pin","icon","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","regEx","test","iconName","exec","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","abs","getZoom","updateViewport","onViewportChange","Position","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","zoomControl","minZoom","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","key","Popup","onOpen","CircularProgress","polygons","index","positions","getPositionsFromPolygon","fillOpacity","Tooltip","getAverageValue","getObservations","MapPin","value","MapConfiguration","obsStation","getScale","NearConfiguration","feature","selectedFeature","scale","getRelatedScale","obs","observations","min","apply","p","max","sc","val","getLimit","Scale","view","getLatestObservations","filter","buildNearScale","forEach","push","buildMapPin","Polygon","length","reduce","a","b","PolygonConfiguration","getRadius","polys","triangulate","points","getLatitude","getLongitude","output","tri","Delaunator","from","triangles","i","triObs","StationConfiguration","latestObs","DEFAULT_CONF","FeatureProvider","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","localStorage","setItem","JSON","stringify","type","getFeatures","ls","getItem","parse","obj","latitude","longitude","isNullOrUndefined","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","f","getPins","getPolygons","searchTerm","fetch","encodeURIComponent","response","json","Promise","reject","updateCurrentPosition","lat","lon","setCenter","useStyles","makeStyles","theme","createStyles","root","background","palette","primary","main","title","textAlign","width","marginBottom","popup","padding","paddingBottom","formControl","marginTop","FeatureSelect","classes","useState","open","setOpen","listAllFeatures","setFeature","setConfig","useEffect","startConf","changeConfig","nearConf","onConfigurationChange","polyConf","stationConf","alignItems","Card","FormControl","InputLabel","Select","onChange","event","target","MenuItem","Avatar","Search","locationEnabled","navigator","permissions","query","name","status","console","log","geolocation","getCurrentPosition","res","coords","updatePosition","err","onSubmit","onSearch","InputBase","placeholder","IconButton","locationClick","disabled","spacing","getStyleFromScale","grad","slice","height","Legend","style","flexItem","unit","MapPage","mapController","selectedStation","getViewport","additionalPins","update","pinPromise","polyPromise","all","pinPoly","sortedPins","sort","dis","disSum","temp","handleViewportChange","some","promise","changePopupStation","term","preventDefault","search","setHomeMarker","alert","replace","mp","Color","isFinite","getMin","getMax","pos","onStationSelected","concat","getFeatureSelectConf","getSelectedFeature","withStyles","ErrorPage","message","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","selectedLang","getSelectedLanguage","anchorEl","handleClick","bind","handleClose","getAvailableLanguages","lang","currentTarget","changeLanguage","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","onClose","langList","PageMenu","toogleDrawer","toogle","AppBar","boxShadow","zIndex","Toolbar","component","Link","to","textDecoration","Hidden","smDown","fontStyle","marginLeft","float","htmlColor","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","HowItWorks","Layout","exact","path","DetailPage","Configuration","frostUrl","instance","iConf","newConf","supportedFeatures","createMuiTheme","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","selectedLangId","languages","languageData","text","strings","languageID","find","undefined","langs","element","set","date","languageId","toLocaleString","languageInstance","local","FrostResult","result","success","errorMessage","FrostServer","ff","options","getQueryBuilder","getQuery","ok","statusText","converter","getConverter","convert","FrostFactory","rmc","qb","ObservationStation","description","availableFeatures","diagramController","Array","featureDiagramControllerArray","getDiagramController","controller","GetStationFactory","GetStationConverter","GetStationBuilder","Locations","coordinates","features","fp","Datastreams","getfeat","ObservedProperty","feat","isin","GetObservationStationsFactory","GetObservationStationsConverter","GetObservationStationsBuilder","stations","coord","stream","middle","radius","GetLatestObservationFactory","GetLatestObservationConverter","GetLatestObservationBuilder","rl","Observations","Observation","Date","phenomenonTime","GetLatestObservationsFactory","GetLatestObservationsConverter","GetLatestObservationsBuilder","thing","Thing","dastream","sta","GetObservationsFactory","GetObservationsConverter","GetObservationsBuilder","start","toISOString","end","fr","getResult","getSuccess","getMessage","frostFactory","server","request","handleFrostResult","step","getTime","setHours","getHours","promises","flatMap","r","toString","address","city","ChartType","Timespan","valueOf","RequestReducer","results","hourBlock","avg","getTimeStamp","day","observationStation","setMinutes","zero","eight","sixteen","reduceBlocks","endDate","startDate","setMonth","getMonth","GetDataForDay","setDate","getDate","prev","next","languageProvider","FHLCConfigurationOption","nameId","timespan","frequency","additionalGraphicsOptions","FeatureHistoryLineChartController","currentConfigurationOption","configurationOptions","ID","chartType","graphicsOptions","isConfigutable","optionName","getFHLCConfigurationOption","option","configurationOptionName","getStart","now","MONTH_IN_MILLI","getDataByYear","getDataByMonth","data","timestamp","row1","row2","table","splice","LINE_CHART","hAxis","format","gridlines","count","legend","ComparisonToLastMonthPieChartController","getCTLMPCConfigurationOption","additionalGraphicOptions","isConfigurable","configuration","getFullYear","newObs","lastObservationValue","pop","higher","lower","higherTag","lowerTag","PIE_CHART","pieSliceText","pieStartAngle","slices","0","1","DiagramFactory","diagramMap","has","get","call","Feature","descriptionId","relatedWeblinkId","limit","unitOfMeasurement","controllerIds","featureDefinition","addFeature","definition","defaultScale","webLinkId","diagrams","featureId","includes","sqrt","pow","lng","round","g","TypeError","toHex","n","hex","toUpperCase","parseInt","styles","main_container","paddingTop","params","item","xl","lg","md","sm","xs","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","colors","latestObservations","positionText","randomNumber","random","getColorFromHex","getRandomColor","getDateString","align","getDescription","renderObservationDate","renderLatestObservations","library","add","faThermometerHalf","faSmog","faTachometerAlt","ObservationItem","backgroundColor","getIconName","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","header","paddingLeft","diagram","handleConfigurationChange","configurationOption","setConfigurationOption","getData","getConfigurationOptions","getCurrentConfigurationOption","renderConfigurationOptions","alignContent","getChartType","getGraphicsOptions","loader","getID","renderDiagramConfiguration","renderChart","linearTransition","dict","sortOnKeys","Number","getLinearTransition","numKeys","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB"],"mappings":"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","file":"static/js/main.ee4e755f.chunk.js","sourcesContent":["var map = {\n\t\"./DetailPage\": 73,\n\t\"./DetailPage.tsx\": 73,\n\t\"./Diagram\": 77,\n\t\"./Diagram.tsx\": 77,\n\t\"./LocationMap\": 76,\n\t\"./LocationMap.tsx\": 76,\n\t\"./ObservationItem\": 75,\n\t\"./ObservationItem.css\": 111,\n\t\"./ObservationItem.tsx\": 75,\n\t\"./ObservationStationProfile\": 74,\n\t\"./ObservationStationProfile.tsx\": 74,\n\t\"./marker_icon.svg\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 166;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.a06775c7.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n}\n","import React from \"react\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Button, Typography, Grid, Box, Divider } from \"@material-ui/core\";\nimport Language from \"../../Controller/Storage/Language\";\n\nimport \"./StationInfo.css\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nlet language: Language = Language.getInstance();\n\ninterface State {\n    roadName: string;\n}\ninterface Props {\n    lastObservation: Observation;\n}\n\nconst DETAIL_PATH = \"/pse-airquality-react/detail/\";\n\nexport class StationInfo extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { roadName: \"\" };\n        DataProvider.getAddress(\n            this.props.lastObservation.getObservationStation().getPosition()\n        ).then((road) => {\n            this.setState({ roadName: road });\n        });\n    }\n    openDetails() {\n        window.location.href =\n            DETAIL_PATH +\n            this.props.lastObservation.getObservationStation().getId();\n    }\n\n    render() {\n        var station = this.props.lastObservation.getObservationStation();\n        return (\n            <Box className=\"popup\">\n                <Grid container direction=\"column\">\n                    <Typography\n                        className=\"title\"\n                        variant=\"h5\"\n                        color=\"textPrimary\"\n                    >\n                        {station.getName()}\n                    </Typography>\n                    <Typography className=\"position\" color=\"textSecondary\">\n                        {station.getPosition().getString()}\n                    </Typography>\n                    <Typography className=\"position\" color=\"textSecondary\">\n                        {this.state.roadName}\n                    </Typography>\n                    <Divider orientation=\"horizontal\"></Divider>\n                    <Grid container direction=\"row\" justify=\"space-between\">\n                        <Typography\n                            className=\"feature\"\n                            variant=\"subtitle1\"\n                            color=\"textSecondary\"\n                        >\n                            {this.props.lastObservation.getFeature().getName() +\n                                \":\"}\n                        </Typography>\n                        <Typography color=\"primary\">\n                            <a\n                                href={this.props.lastObservation\n                                    .getFeature()\n                                    .getRelatedWeblink()}\n                                data-testid=\"featureWebLink\"\n                            >\n                                ?\n                            </a>\n                        </Typography>\n                    </Grid>\n                    <Typography\n                        className=\"value\"\n                        variant=\"h4\"\n                        display=\"inline\"\n                        color=\"primary\"\n                        data-testid=\"value\"\n                    >\n                        {Math.floor(\n                            this.props.lastObservation.getValue() * 100\n                        ) / 100}{\" \"}\n                        {this.props.lastObservation\n                            .getFeature()\n                            .getUnitOfMeasurement()}\n                    </Typography>\n                    <Button\n                        className=\"info-button\"\n                        data-testid=\"info-button\"\n                        color=\"primary\"\n                        onClick={() => this.openDetails()}\n                        variant=\"contained\"\n                    >\n                        {language.getText(\"stationInfoButton\")}\n                    </Button>\n                </Grid>\n            </Box>\n        );\n    }\n}\n","import \"./Map.css\";\nimport React from \"react\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport {\n    Map as LeafletMap,\n    TileLayer,\n    Marker,\n    Polygon as LeafletPolygon,\n    Viewport as LeafletViewport,\n    Popup,\n    Tooltip,\n} from \"react-leaflet\";\nimport { Position } from \"../../Model/Position\";\nimport { StationInfo } from \"./StationInfo\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nrequire(\"leaflet-iconmaterial\");\n\nconst VIEW_UPDATE_DELAY = 500; // in ms\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\nconst DEFAULT_ZOOM = 5;\ninterface State {\n    viewport: Viewport;\n    lastObservation: Observation | null;\n}\n\ninterface Props {\n    onViewportChange: (viewport: Viewport) => void;\n    handlePopup: (pin: MapPin) => Promise<Observation>;\n    viewport: Viewport;\n    pins: MapPin[];\n    polygons: Polygon[];\n}\n\nexport class Map extends React.Component<Props, State> {\n    nextViewport: LeafletViewport | null;\n    lock: boolean;\n    oldViewport: Viewport | null;\n    constructor(props: Props) {\n        super(props);\n        this.lock = false;\n        this.nextViewport = null;\n        this.oldViewport = null;\n        this.state = {\n            viewport: this.props.viewport,\n            lastObservation: null,\n        };\n    }\n\n    private getIconFromMapPin(pin: MapPin): L.Icon {\n        // Custom icons with colors\n        //TODO: Add warning if limit is reached? (requires design change)\n        // @ts-ignore\n        var icon = L.IconMaterial.icon({\n            icon: \"\", // Name of Material icon\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\n            markerColor: pin.getColor().getHex(), // Marker fill color\n            outlineColor: \"\", // Marker outline color\n            outlineWidth: 1, // Marker outline width\n        });\n        //Filter icons\n        var regEx = /icon-(.+)-.*/;\n        if (regEx.test(pin.getId())) {\n            var iconName = regEx.exec(pin.getId()) as RegExpExecArray;\n            //@ts-ignore\n            icon = L.IconMaterial.icon({\n                icon: iconName[1], // Name of Material icon\n                iconColor: \"white\", // Material icon color (could be rgba, hex, html name...)\n                markerColor: pin.getColor().getHex(), // Marker fill color\n                outlineColor: \"black\", // Marker outline color\n                outlineWidth: 1, // Marker outline width\n            });\n        }\n        return icon;\n    }\n\n    private onViewportChange(viewport: LeafletViewport) {\n        this.nextViewport = viewport; //Update new viewport\n        if (!this.lock) {\n            if (!this.oldViewport) {\n                this.oldViewport = this.state.viewport; //Set viewport of last update\n            }\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\n            setTimeout(() => {\n                var newView = this.viewportLeafletToModel(\n                    this.nextViewport as LeafletViewport\n                );\n                this.lock = false;\n                if (\n                    this.oldViewport &&\n                    (newView\n                        .getCenter()\n                        .getDistance(this.oldViewport?.getCenter()) >\n                        DISTANCE_THRESHOLD ||\n                        Math.abs(\n                            newView.getZoom() - this.oldViewport?.getZoom()\n                        ) >= ZOOM_THRESHOLD)\n                ) {\n                    this.updateViewport(newView); //Only update if change has been significant\n                }\n            }, VIEW_UPDATE_DELAY);\n        }\n    }\n\n    private updateViewport(viewport: Viewport) {\n        this.props.onViewportChange(viewport);\n\n        this.setState({ viewport: viewport });\n        this.oldViewport = null;\n    }\n\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\n        return new Viewport(\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\n            viewport.zoom ?? DEFAULT_ZOOM\n        );\n    }\n\n    private async handlePopup(pin: MapPin) {\n        this.setState({ lastObservation: null });\n        var observation = await this.props.handlePopup(pin);\n        this.setState({ lastObservation: observation });\n    }\n\n    private getPositionsFromPolygon(\n        polygon: Polygon\n    ): { lat: number; lng: number }[] {\n        return polygon\n            .getStations()\n            .map((obsSt: ObservationStation) =>\n                obsSt.getPosition().getCoordinates()\n            );\n    }\n\n    render() {\n        return (\n            <LeafletMap\n                center={this.state.viewport.getCenter().getCoordinates()}\n                zoom={this.state.viewport.getZoom()}\n                id=\"leafletMap\"\n                onViewportChange={(v) => this.onViewportChange(v)}\n                zoomControl={false}\n                minZoom={5}\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {this.props.pins.map((pin) => (\n                    <Marker\n                        position={pin.getPosition().getCoordinates()}\n                        icon={this.getIconFromMapPin(pin)}\n                        id={\"mapPin-\" + pin.getId()}\n                        key={pin.getId()}\n                    >\n                        <Popup\n                            onOpen={() => this.handlePopup(pin)}\n                            className=\"popup\"\n                        >\n                            {this.state.lastObservation ? (\n                                <StationInfo\n                                    lastObservation={this.state.lastObservation}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Popup>\n                    </Marker>\n                ))}\n                {this.props.polygons.map((polygon, index) => (\n                    <LeafletPolygon\n                        key={index}\n                        positions={this.getPositionsFromPolygon(polygon)}\n                        color={polygon.getColor().getHex()}\n                        fillOpacity={0.3}\n                    >\n                        <Tooltip>\n                            {Math.floor(polygon.getAverageValue() * 100) / 100 +\n                                \" \" +\n                                polygon\n                                    .getObservations()[0]\n                                    ?.getFeature()\n                                    .getUnitOfMeasurement() ?? \"\"}\n                        </Tooltip>\n                    </LeafletPolygon>\n                ))}\n            </LeafletMap>\n        );\n    }\n}\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nexport default abstract class MapConfiguration {\n    protected buildMapPin(\n        obsStation: ObservationStation,\n        value: number\n    ): MapPin {\n        return new MapPin(\n            obsStation.getId(),\n            obsStation.getPosition(),\n            value,\n            this.getScale().getColor(value)\n        );\n    }\n    abstract getId(): string;\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\n    abstract getScale(): Scale;\n    abstract getFeatures(): Feature[];\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nconst SAMPLE_SCALE = 20;\nconst ID = \"NearConfiguration\";\n\nexport default class NearConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n    private scale: Scale;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n        this.scale = this.selectedFeature.getRelatedScale();\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\n        return new MapPin(\n            obs.getId(),\n            obs.getPosition(),\n            value,\n            this.scale.getColor(value)\n        );\n    }\n\n    private buildNearScale(observations: Observation[]): Scale {\n        var min = Math.min.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n        var max = Math.max.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n\n        var sc: { [key: number]: string } = {};\n        // Sample 10 times between 0 => min and limit of feature => max\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\n            sc[key] = this.selectedFeature\n                .getRelatedScale()\n                .getColor(val)\n                .getHex();\n        }\n        return new Scale(true, sc);\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var observations = (\n            await DataProvider.getLatestObservations(\n                view.getCenter(),\n                view.getZoom(),\n                this.selectedFeature\n            )\n        ).filter((o) => o.getValue() < 5 * this.selectedFeature.getLimit());\n\n        this.scale = this.buildNearScale(observations);\n\n        var pins: MapPin[] = [];\n        observations.forEach((o) => {\n            pins.push(\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n        });\n        return pins;\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n    getScale(): Scale {\n        return this.scale;\n    }\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\nimport { Observation } from \"./Observation\";\n\nexport class Polygon {\n    private obs: Observation[];\n    private color: Color;\n    constructor(obs: Observation[], color: Color) {\n        this.obs = obs;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n\n    getObservations(): Observation[] {\n        return this.obs;\n    }\n\n    getStations(): ObservationStation[] {\n        return this.obs.map((o) => o.getObservationStation());\n    }\n\n    getAverageValue(): number {\n        return this.obs.length === 0\n            ? 0\n            : this.obs.reduce((a, b) => {\n                  return a + b.getValue();\n              }, 0) / this.obs.length;\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Feature } from \"../../Model/Feature\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\nimport Delaunator from \"delaunator\";\n\nconst ID = \"PolygonConfiguration\";\nexport default class PolygonConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [];\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        var observations = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getRadius(),\n            this.selectedFeature\n        );\n        var polys = this.triangulate(\n            observations.filter(\n                (o) => o.getValue() < 5 * this.selectedFeature.getLimit()\n            )\n        );\n        return polys;\n    }\n\n    // Convert Observations in array of triangular Polygons\n    private triangulate(observations: Observation[]): Polygon[] {\n        var points: [number, number][] = [];\n        observations.forEach((o) =>\n            points.push([\n                //Get number tupels from Position\n                o.getObservationStation().getPosition().getLatitude(),\n                o.getObservationStation().getPosition().getLongitude(),\n            ])\n        );\n        var delaunay = Delaunator.from(points);\n        var output = [];\n        var tri = delaunay.triangles; // Convert Points to indices for triangles\n        for (let i = 0; i < tri.length; i += 3) {\n            var triObs = [\n                // 3 sequential indices describe a triangle\n                observations[tri[i]],\n                observations[tri[i + 1]],\n                observations[tri[i + 2]],\n            ];\n            var val =\n                // Calculate average value for all of the stations\n                (observations[tri[i]].getValue() +\n                    observations[tri[i + 1]].getValue() +\n                    observations[tri[i + 2]].getValue()) /\n                3;\n            output.push(\n                new Polygon(\n                    triObs,\n                    this.selectedFeature.getRelatedScale().getColor(val)\n                )\n            );\n        }\n        return output;\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\n\nconst ID = \"StationConfiguration\";\n\nexport default class StationConfiguration extends MapConfiguration {\n    getId(): string {\n        return ID;\n    }\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var latestObs: Observation[] = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n        return latestObs\n            .filter((o) => o.getValue() < 5 * this.selectedFeature.getLimit())\n            .map((o) =>\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapPage/MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport NearConfiguration from \"../MapPage/NearConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\nimport StationConfiguration from \"../MapPage/StationConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport { isNullOrUndefined } from \"util\";\n\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\nconst DEFAULT_CONF = new StationConfiguration(\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\n);\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\n\nexport default class MapConfigurationMemory {\n    static save(conf: MapConfiguration, view: Viewport) {\n        localStorage.setItem(\n            LOCALSTORAGE_MAPCONF,\n            JSON.stringify({\n                type: conf.getId(),\n                feature: conf.getFeatures()[0].getId(),\n                view: view,\n            })\n        );\n    }\n\n    static load(): [MapConfiguration, Viewport] {\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\n        if (\n            ls &&\n            (JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: Viewport;\n            })\n        ) {\n            //return configuration if it exists\n            var obj = JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: any;\n            };\n            var view = new Viewport(\n                new Position(\n                    obj.view.center.latitude,\n                    obj.view.center.longitude\n                ),\n                obj.view.zoom\n            );\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\n            if (isNullOrUndefined(feature)) {\n                throw new Error(\n                    \"Feature \" + obj.feature + \" is not supported.\"\n                );\n            }\n            if (obj.type === \"NearConfiguration\") {\n                return [new NearConfiguration(feature), view];\n            } else if (obj.type === \"PolygonConfiguration\") {\n                return [new PolygonConfiguration(feature), view];\n            } else if (obj.type === \"StationConfiguration\") {\n                return [new StationConfiguration(feature), view];\n            } else {\n                throw new Error(\"Invalid configuration: \" + obj.type);\n            }\n        }\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\n    }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport MapConfiguration from \"./MapConfiguration\";\nimport MapConfigurationMemory from \"../Storage/MapConfigurationMemory\";\nimport StationConfiguration from \"./StationConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport NearConfiguration from \"./NearConfiguration\";\nimport PolygonConfiguration from \"./PolygonConfiguration\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nexport class MapController {\n    private config: MapConfiguration;\n    private viewport: Viewport;\n\n    private DEFAULT_POSITION: Position = new Position(48.37, 10.9); //Augsburg\n    private DEFAULT_ZOOM: number = 5;\n\n    constructor(useMemory: boolean = true) {\n        if (useMemory) {\n            var mcm = MapConfigurationMemory.load();\n            this.config = mcm[0];\n            this.viewport = mcm[1];\n        } else {\n            // Default viewport\n            this.viewport = new Viewport(\n                this.DEFAULT_POSITION,\n                this.DEFAULT_ZOOM\n            );\n            this.config = new StationConfiguration(\n                // Default configuration\n                FeatureProvider.getInstance().getFeature(\n                    \"saqn:op:mcpm2p5\"\n                ) as Feature\n            );\n        }\n        if (this.config.getFeatures().length === 0) {\n            throw Error(\"Invalid MapConfiguration\");\n        }\n    }\n\n    // Called when a pin on the map is clicked, gets information from server\n    async handlePopup(pin: MapPin): Promise<Observation> {\n        var station = await DataProvider.getStation(pin.getId());\n        return DataProvider.getLatestObservation(\n            station,\n            this.config.getFeatures()[0]\n        );\n    }\n\n    // Store configuration and viewport in local storage\n    private save() {\n        MapConfigurationMemory.save(this.config, this.viewport);\n    }\n\n    // Current configuration id and feature id\n    getFeatureSelectConf(): { conf: string; feature: string } {\n        var f = this.config.getFeatures()[0].getId();\n        var c = this.config.getId();\n        return { conf: c, feature: f };\n    }\n\n    // Current viewport\n    getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    // Called if the viewport has changed significantly\n    handleViewportChange(viewport: Viewport) {\n        if (viewport.getZoom() < 5) {\n            viewport = new Viewport(viewport.getCenter(), 5);\n        }\n        this.viewport = viewport;\n        this.save();\n    }\n\n    // Pins for leaflet map\n    async getPins(): Promise<MapPin[]> {\n        return this.config.getPins(this.viewport);\n    }\n\n    // Polygons to be drawn\n    async getPolygons(): Promise<Polygon[]> {\n        return this.config.getPolygons(this.viewport);\n    }\n\n    // The leaflet scale of the map\n    getScale(): Scale {\n        return this.config.getScale();\n    }\n\n    getSelectedFeature(): Feature {\n        return this.config.getFeatures()[0];\n    }\n\n    // Switch to configuration with different feature\n    changeFeature(feature: Feature) {\n        switch (this.config.getId()) {\n            case \"StationConfiguration\":\n                this.config = new StationConfiguration(feature);\n                break;\n            case \"NearConfiguration\":\n                this.config = new NearConfiguration(feature);\n                break;\n            case \"PolygonConfiguration\":\n                this.config = new PolygonConfiguration(feature);\n                break;\n\n            default:\n                throw new Error(\n                    \"Current configuration has invalid id: \" +\n                        this.config.getId()\n                );\n        }\n    }\n\n    // Called when user changes configuration\n    onConfigurationChange(conf: MapConfiguration) {\n        this.config = conf;\n        this.save();\n    }\n\n    // Get Position from search term using the nominatim API\n    async search(searchTerm: string): Promise<void> {\n        if (searchTerm.length === 0) {\n            return; //No search possible\n        }\n\n        var response = await fetch(\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\n                encodeURIComponent(searchTerm)\n        );\n        var json = await response.json();\n        if (json.length === 0) {\n            return Promise.reject(); //No location found\n        }\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\n        return Promise.resolve();\n    }\n\n    // Set new position\n    updateCurrentPosition(position: Position) {\n        this.viewport.setCenter(position);\n        this.save();\n    }\n}\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n    Avatar,\n    Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    Typography,\n    Divider,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport MapConfiguration from \"../../Controller/MapPage/MapConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport NearConfiguration from \"../../Controller/MapPage/NearConfiguration\";\nimport StationConfiguration from \"../../Controller/MapPage/StationConfiguration\";\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\nimport Language from \"../../Controller/Storage/Language\";\ninterface Props {\n    onConfigurationChange(mapConfig: MapConfiguration): void;\n    startConf?: { conf: string; feature: string };\n}\n\nlet language = Language.getInstance();\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: theme.palette.primary.main,\n            position: \"relative\",\n        },\n        title: {\n            textAlign: \"center\",\n            width: \"100%\",\n            marginBottom: \"10px\",\n        },\n        popup: {\n            padding: \"20px\",\n            paddingBottom: \"50px\",\n            marginBottom: \"-40px\",\n        },\n        formControl: {\n            width: \"100%\",\n            marginTop: \"10px\",\n            marginBottom: \"10px\",\n        },\n    })\n);\n\nexport default function FeatureSelect(props: Props) {\n    const NEAR_CONFIG = \"NearConfiguration\";\n    const POLY_CONFIG = \"PolygonConfiguration\";\n    const STATION_CONFIG = \"StationConfiguration\";\n    const classes = useStyles();\n    const [open, setOpen] = useState<boolean>(true);\n    const [feature, setFeature] = useState<Feature | undefined>(\n        FeatureProvider.getInstance().listAllFeatures()[0]\n    );\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setOpen(!open);\n    };\n\n    useEffect(() => {\n        if (props.startConf) {\n            //Get start values from props\n            setFeature(\n                FeatureProvider.getInstance().getFeature(\n                    props.startConf.feature\n                )\n            );\n            setConfig(props.startConf.conf);\n        }\n    }, [props.startConf]);\n\n    const changeConfig = (conf: string, feature: Feature) => {\n        switch (conf) {\n            case NEAR_CONFIG:\n                var nearConf = new NearConfiguration(feature); //Create new config\n                props.onConfigurationChange(nearConf);\n                break;\n            case POLY_CONFIG:\n                var polyConf = new PolygonConfiguration(feature); //Create new config\n                props.onConfigurationChange(polyConf);\n                break;\n            case STATION_CONFIG:\n                var stationConf = new StationConfiguration(feature); //Create new config\n                props.onConfigurationChange(stationConf);\n                break;\n            default:\n                return;\n        }\n        setConfig(conf);\n    };\n\n    const handleFeatureChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        var f = FeatureProvider.getInstance().getFeature(\n            event.target.value as string\n        ); //Feature Id\n        setFeature(f);\n\n        if (f) {\n            if (config) {\n                changeConfig(config, f);\n            }\n        }\n    };\n\n    const handleConfigChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        if (feature) {\n            changeConfig(event.target.value as string, feature);\n        }\n        //window.location.reload(); //Reload with new config\n    };\n\n    return (\n        <Fragment>\n            <Grid container direction=\"column\" alignItems=\"flex-end\">\n                {open ? (\n                    <Card className={classes.popup} variant=\"outlined\">\n                        <Grid container direction=\"column\">\n                            <Typography\n                                id=\"title\"\n                                className={classes.title}\n                                variant=\"subtitle1\"\n                                color=\"textPrimary\"\n                            >\n                                {language.getText(\"map_configuration_title\")}\n                            </Typography>\n                            <Divider orientation=\"horizontal\" />\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Feature\"}</InputLabel>\n                                <Select\n                                    id=\"featureSelectForm\"\n                                    onChange={handleFeatureChange}\n                                    value={feature?.getId() ?? \"\"}\n                                >\n                                    {FeatureProvider.getInstance()\n                                        .listAllFeatures()\n                                        .map((f) => (\n                                            <MenuItem\n                                                value={f.getId()}\n                                                key={f.getId()}\n                                            >\n                                                {f.getName()}\n                                            </MenuItem>\n                                        ))}\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Style\"}</InputLabel>\n                                <Select\n                                    id=\"confSelectForm\"\n                                    onChange={handleConfigChange}\n                                    value={config ?? \"\"}\n                                >\n                                    <MenuItem value={POLY_CONFIG}>\n                                        {language.getText(POLY_CONFIG)}\n                                    </MenuItem>\n                                    <MenuItem value={STATION_CONFIG}>\n                                        {language.getText(STATION_CONFIG)}\n                                    </MenuItem>\n                                    <MenuItem value={NEAR_CONFIG}>\n                                        {language.getText(NEAR_CONFIG)}\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                    </Card>\n                ) : (\n                    \"\"\n                )}\n                <Avatar\n                    className={classes.root}\n                    id=\"avatarButton\"\n                    onClick={handleClick}\n                >\n                    <LayersIcon />\n                </Avatar>\n            </Grid>\n        </Fragment>\n    );\n}\n","import React, { Fragment, SyntheticEvent } from \"react\";\nimport {\n    IconButton,\n    Divider,\n    InputBase,\n    Grid,\n    Card,\n    Box,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nimport \"./Search.css\";\n\nlet language = Language.getInstance();\n\ninterface Props {\n    onSearch(event: SyntheticEvent, term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nexport default class Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Card className=\"root\">\n                    <form\n                        className=\"search-form\"\n                        onSubmit={(e) =>\n                            this.props.onSearch(e, this.state.searchTerm)\n                        }\n                    >\n                        <InputBase\n                            className=\"input-field\"\n                            data-testid=\"textBox\"\n                            type=\"search\"\n                            onChange={(e) => {\n                                this.setState({\n                                    searchTerm: e.target.value,\n                                });\n                            }}\n                            placeholder={language.getText(\"search\")}\n                        />\n                        <IconButton\n                            className=\"search-button\"\n                            data-testid=\"searchButton\"\n                            type=\"submit\"\n                            onClick={(e) =>\n                                this.props.onSearch(e, this.state.searchTerm)\n                            }\n                        >\n                            <SearchIcon />\n                        </IconButton>\n                        <Box className=\"divider\"></Box>\n                        <IconButton\n                            className=\"location-button\"\n                            data-testid=\"locationButton\"\n                            onClick={() => this.locationClick()}\n                            disabled={!this.state.locationEnabled}\n                        >\n                            <GpsFixedIcon data-testid=\"locationIcon\" />\n                        </IconButton>\n                    </form>\n                </Card>\n            </Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography, Card, Divider } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            padding: theme.spacing(1),\n        },\n    })\n);\n\ninterface Props {\n    unit: string;\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"100px\",\n        width: \"30px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Card className={classes.container}>\n            <Grid container direction=\"column\" alignItems=\"center\">\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    data-testid=\"legend\"\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n                <Divider orientation=\"horizontal\" flexItem={true} />\n                <Typography variant=\"body2\">\n                    {\"[\" + props.unit + \"]\"}\n                </Typography>\n            </Grid>\n        </Card>\n    );\n}\n\nexport default Legend;\n","import React, { SyntheticEvent } from \"react\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Map } from \"./Map\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapController } from \"../../Controller/MapPage/MapController\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport FeatureSelect from \"./FeatureSelect\";\nimport Search from \"./Search\";\nimport Legend from \"./Legend\";\nimport { Box, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Color } from \"../../Model/Color\";\n\nimport \"./MapPage.css\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({});\n\ninterface State {\n    selectedStation: ObservationStation | null;\n    pins: MapPin[];\n    polygons: Polygon[];\n    viewport: Viewport;\n    additionalPins: MapPin[];\n}\n\ninterface Props {\n    classes: any;\n}\n\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\n\nclass MapPage extends React.Component<Props, State> {\n    mapController: MapController;\n\n    constructor(props: Props) {\n        super(props);\n        this.mapController = new MapController();\n\n        this.state = {\n            selectedStation: null,\n            viewport: this.mapController.getViewport(),\n            pins: [],\n            polygons: [],\n            additionalPins: [],\n        };\n        this.update();\n    }\n\n    // Set station as source for the StationInfo Popup\n    changePopupStation(station: ObservationStation) {\n        this.setState({\n            selectedStation: station,\n        });\n    }\n\n    // Reload Pins and Polygons\n    update() {\n        var pinPromise = this.mapController.getPins();\n        var polyPromise = this.mapController.getPolygons();\n        Promise.all([pinPromise, polyPromise]).then((pinPoly) => {\n            this.setState({\n                pins: pinPoly[0],\n                polygons: pinPoly[1],\n            });\n        });\n    }\n\n    getValueAt(position: Position, feature: Feature): number {\n        // Get pins sorted by distance\n        var sortedPins = this.state.pins.sort((a, b) => {\n            return (\n                a.getPosition().getDistance(position) -\n                b.getPosition().getDistance(position)\n            );\n        });\n        var dis = 0; //Distance of nearest station to position\n        var disSum = 0;\n        if (sortedPins.length !== 0) {\n            dis = sortedPins[0].getPosition().getDistance(position);\n        }\n        var value = 0;\n        for (let i = 0; i <= 2; i++) {\n            //nearest 3 stations (if they exist)\n            if (sortedPins.length > i) {\n                var temp =\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\n                disSum += temp;\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\n            }\n        }\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\n    }\n\n    onViewportChange(viewport: Viewport) {\n        this.mapController.handleViewportChange(viewport);\n        //Update Page\n        this.setState({\n            viewport: viewport,\n        });\n        this.update();\n    }\n\n    async onStationSelected(pin: MapPin): Promise<Observation> {\n        if (this.state.additionalPins.some((p) => pin.getId() === p.getId())) {\n            // Not a station, do nothing\n            return new Promise(() => {\n                return null;\n            });\n        }\n        this.setState({ selectedStation: null });\n        var promise = this.mapController.handlePopup(pin);\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\n        return promise;\n    }\n\n    onSearch(event: SyntheticEvent, term: string) {\n        event.preventDefault();\n        this.mapController.search(term).then(\n            () => {\n                this.setHomeMarker();\n                this.update();\n            },\n            () => {\n                alert(\n                    Language.getInstance()\n                        .getText(\"searchAlert\")\n                        .replace(\"{term}\", term)\n                );\n            }\n        );\n    }\n\n    setHomeMarker() {\n        var mp = new MapPin(\n            \"icon-home-1\",\n            this.state.viewport.getCenter(),\n            -1,\n            new Color(0, 0, 0)\n        );\n        this.setState({\n            additionalPins: [mp],\n            pins: this.state.pins,\n        });\n    }\n\n    getMin(): number {\n        var min = Math.min.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(min)) {\n            min = DEFAULT_MIN;\n        }\n        return min;\n    }\n\n    getMax(): number {\n        var max = Math.max.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(max)) {\n            max = DEFAULT_MAX;\n        }\n        return max;\n    }\n\n    render() {\n        var min = this.getMin();\n        var max = this.getMax();\n        return (\n            <Box className=\"map-page\">\n                <Box className=\"search\">\n                    <Search\n                        onSearch={(event, term) => this.onSearch(event, term)}\n                        updatePosition={(pos) => {\n                            var view = this.state.viewport;\n                            view.setCenter(pos);\n                            this.setHomeMarker();\n                            this.onViewportChange(view);\n                        }}\n                    />\n                </Box>\n                <Box className=\"map\">\n                    <Map\n                        viewport={this.state.viewport}\n                        onViewportChange={(viewport) => {\n                            this.onViewportChange(viewport);\n                        }}\n                        handlePopup={(pin) => this.onStationSelected(pin)}\n                        pins={this.state.pins.concat(this.state.additionalPins)}\n                        polygons={this.state.polygons}\n                    />\n                </Box>\n                <Box className=\"feature-select\">\n                    <FeatureSelect\n                        onConfigurationChange={(conf) => {\n                            this.mapController.onConfigurationChange(conf);\n                            this.update();\n                        }}\n                        startConf={this.mapController.getFeatureSelectConf()}\n                    />\n                </Box>\n                <Box className=\"legend\">\n                    <Legend\n                        min={min}\n                        max={max}\n                        unit={this.mapController\n                            .getSelectedFeature()\n                            .getUnitOfMeasurement()}\n                        scale={this.mapController.getScale()}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(MapPage);\n","import React from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <div className=\"informationPage\">\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </div>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class AboutPage extends React.Component<\n    IAboutPageProps,\n    IAboutPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"about\")}</h1>\n                <h3>{language.getText(\"aboutText\")}</h3>\n            </p>\n\n        </div>\n    }\n}\n\ninterface IAboutPageProps { }\n\ninterface IAboutPageState { }","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class PrivacyPolicyPage extends React.Component<\n    IPrivacyPolicyPageProps,\n    IPrivacyPolicyPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"privacyPolicy\")}</h1>\n                <h3>{language.getText(\"privacyPolicyText\")}</h3>\n            </p>\n        </div>\n    }\n}\n\ninterface IPrivacyPolicyPageProps { }\n\ninterface IPrivacyPolicyPageState { }\n","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n    selectedLang: string;\n    anchorEl: Element | null;\n}\n\ninterface IProps {\n    language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n    private availableLanguages: Map<string, string>;\n    private ref: any;\n    private language: Language;\n\n    constructor(props: IProps) {\n        super(props);\n        this.language = props.language;\n        this.state = {\n            selectedLang: this.language.getSelectedLanguage(),\n            anchorEl: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.availableLanguages = this.language.getAvailableLanguages();\n    }\n\n    isSelectedLang(lang: string): boolean {\n        //return lang === this.state.selectedLang;\n        return false;\n    }\n\n    handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n        this.setState({ anchorEl: event.currentTarget });\n    }\n\n    handleClose(): void {\n        this.setState({ anchorEl: null });\n    }\n\n    handleMenuItemClick(\n        event: React.MouseEvent<HTMLElement>,\n        id: string\n    ): void {\n        this.language.changeLanguage(id);\n        window.location.reload();\n        this.setState({\n            anchorEl: null,\n            selectedLang: this.language.getSelectedLanguage(),\n        });\n    }\n\n    langList(): JSX.Element[] {\n        let list: JSX.Element[] = [];\n        this.availableLanguages.forEach((lang: string, id: string) => {\n            list.push(\n                <MenuItem\n                    onClick={(e) => this.handleMenuItemClick(e, id)}\n                    selected={id === this.language.getSelectedLanguageId()}\n                >\n                    {lang}\n                </MenuItem>\n            );\n        });\n        return list;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Button\n                    onClick={this.handleClick}\n                    color=\"inherit\"\n                    startIcon={<Translate />}\n                    endIcon={<ExpandMore />}\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                >\n                    {this.state.selectedLang}\n                </Button>\n                <Menu\n                    open={Boolean(this.state.anchorEl)}\n                    anchorEl={this.state.anchorEl}\n                    onClose={this.handleClose}\n                >\n                    {this.langList()}\n                </Menu>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText, Hidden, Box, Button } from '@material-ui/core';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\" style={{\n                    height: '64px',\n                    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2)',\n                    position: 'relative',\n                    zIndex: 20,\n                }}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQNet\n                        </Typography>\n                        <Hidden smDown>\n                            <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', fontStyle: 'italic', color: 'unset' }}>\n                                {this.language.getText(\"SmartAQNet\")}\n                            </Typography>\n                        </Hidden>\n\n                        <Box style={{ marginLeft: 'auto' }}></Box>\n\n                        <Button startIcon={<HelpOutlineIcon />} component={Link} to='/pse-airquality-react/howitWorks' >\n                            {this.language.getText(\"help\")}\n                        </Button>\n\n                        <Box style={{ marginLeft: '20px' }}>\n                            <LanguageMenu language={this.language} />\n                        </Box>\n\n                        <IconButton style={{ float: \"right\" }} onClick={this.toogleDrawer}>\n                            <MenuIcon htmlColor='black' />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class HowItWorks extends React.Component<\n    IHowItWorksProps,\n    IHowItWorksState> {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"instructions\")}</h1>\n                <h3>{language.getText(\"shortDescription\")}</h3>\n            </p>\n            <p className=\"informationPage\">\n                <h2><u>{language.getText(\"SearchTitle\")}</u></h2>\n                <h3>{language.getText(\"Search\")}</h3>\n            </p>\n            <p className=\"informationPage\">\n                <h2><u>{language.getText(\"locationTitle\")}</u></h2>\n                <h3>{language.getText(\"location\")}</h3>\n            </p>\n            <p className=\"informationPage\">\n                <h2><u>{language.getText(\"FeatureMenuTitle\")}</u></h2>\n                <h3>{language.getText(\"FeatureMenu\")}</h3>\n            </p>\n        </div>\n\n    }\n}\n\ninterface IHowItWorksProps { }\n\ninterface IHowItWorksState { }\n","import React from \"react\";\nimport MapPage from \"../MapPage/MapPage\";\nimport DetailPage from \"./../DetailPage/DetailPage\";\nimport ErrorPage from \"../ErrorPage\";\nimport AboutPage from \"./../About\";\nimport PrivacyPolicyPage from \"./../PrivacyPolicy\";\nimport PageMenu from \"./PageMenu\";\nimport HowItWorks from \"./../HowItWorks\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Language from \"../../Controller/Storage/Language\";\nimport './Layout.css'\n\nfunction Layout() {\n    let language: Language = Language.getInstance();\n\n    return (\n        <div className=\"app\">\n            <Router>\n                <PageMenu language={language} />\n                <div className='page-content'>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/\"\n                            component={MapPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/detail/:id\"\n                            component={DetailPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/howItWorks\"\n                            component={HowItWorks}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/about\"\n                            component={AboutPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/privacy-policy\"\n                            component={PrivacyPolicyPage}\n                        />\n                        {/* If no url pattern matches an error page is shown */}\n                        <Route>\n                            <ErrorPage\n                                code={404}\n                                message={Language.getInstance().getText(\"Error404\")}\n                            />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nexport default Layout;\n","import FeatureProvider from \"../FeatureProvider\";\nimport { isNullOrUndefined } from \"util\";\n\nexport default class Configuration {\n    private static instance: Configuration | null;\n    private language: string = \"de-de\";\n    private frostUrl: string = \"\";\n\n    // Return singleton instance\n    static getInstance(): Configuration {\n        if (!Configuration.instance) {\n            Configuration.load();\n        }\n        return Configuration.instance as Configuration;\n    }\n\n    // Load instance from config.json\n    private static load() {\n        var json = require(\"../../Jsons/config.json\"); //Load config\n        var iConf = json as IConfig;\n        console.log(iConf);\n        if (isNullOrUndefined(iConf)) {\n            throw new Error(\"Config.json has wrong format.\");\n        }\n        var newConf = new Configuration();\n        newConf.language = iConf.language;\n        newConf.frostUrl = iConf.frostUrl;\n        iConf.supportedFeatures.forEach(\n            (f) => FeatureProvider.getInstance().getFeature(f) //Load all supported features\n        );\n\n        Configuration.instance = newConf;\n    }\n\n    // The default value for the language id\n    getLanguage(): string {\n        return this.language;\n    }\n\n    // The Url of the top level FROST REST API\n    getFrostUrl(): string {\n        return this.frostUrl;\n    }\n}\n\ninterface IConfig {\n    frostUrl: string;\n    language: string;\n    supportedFeatures: string[];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport lightGreen from \"@material-ui/core/colors/green\";\nimport Layout from \"./View/Layout/Layout\";\nimport Configuration from \"./Controller/Storage/Configuration\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: lightGreen[500],\n        },\n        secondary: {\n            main: purple[500],\n        },\n    },\n});\n\nConfiguration.getInstance(); //Initialize App Config\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <Layout />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n    id: string;\n    name: string;\n    strings: Strings;\n}\n\ninterface Strings {\n    [id: string]: string;\n}\n\nexport default class Language {\n    private static languageInstance: Language | null = null;\n\n    private selectedLangId: string;\n    private languages: Lang[];\n    private selectedLang: Lang;\n\n    //class Language is designed as a singleton. You can get access to the only instance via the getInstance method\n    constructor() {\n        this.selectedLangId = \"\";\n        this.languages = languageData.languages;\n        this.selectedLang = this.languages[0];\n    }\n\n    //returns the language instance\n    public static getInstance(): Language {\n        if (!Language.languageInstance) {\n            Language.languageInstance = new Language();\n            var local = localStorage.getItem(\"language\");\n            if (local) {\n                //Change language if selected\n                Language.languageInstance.changeLanguage(local);\n            }\n        }\n        return Language.languageInstance as Language;\n    }\n\n    //returns the string that corresponds to the string id in the currently selected language\n    public getText(id: string): string {\n        let text: string = this.selectedLang.strings[id];\n        if (text === \"\" || text == null) {\n            throw new Error(\n                `There is no string with id: ${id} in ${this.selectedLang.name}.`\n            );\n        }\n        return text;\n    }\n\n    public getSelectedLanguage(): string {\n        return this.selectedLang.name;\n    }\n\n    public getSelectedLanguageId(): string {\n        return this.selectedLang.id;\n    }\n\n    public changeLanguage(languageID: string): void {\n        let find: Lang | undefined = this.languages.find(\n            (e) => e.id === languageID\n        );\n        if (find !== undefined) {\n            this.selectedLang = find;\n            this.selectedLangId = languageID;\n            localStorage.setItem(\"language\", this.selectedLangId);\n        }\n    }\n\n    public getAvailableLanguages(): Map<string, string> {\n        let langs: Map<string, string> = new Map<string, string>();\n        this.languages.forEach((element) => {\n            langs.set(element.id, element.name);\n        });\n        return langs;\n    }\n\n    public getDateString(date: Date): string {\n        let languageId = this.getSelectedLanguageId();\n        return date.toLocaleString(languageId);\n    }\n}\n","export class FrostResult<T> {\n    private result: T | null; //payload of the response from the FROST server\n    private success: boolean;\n    private errorMessage: string;\n\n    constructor(result: T | null, success: boolean, errorMessage: string) {\n        this.result = result;\n        this.success = success;\n        this.errorMessage = errorMessage;\n    }\n\n    getResult(): T | null {\n        return this.result;\n    }\n\n    getSuccess(): boolean {\n        return this.success;\n    }\n\n    getMessage(): string {\n        return this.errorMessage;\n    }\n}\n","import { FrostResult } from \"../../Model/FrostResult\";\nimport FrostFactory from \"./FrostFactory\";\n\nexport default class FrostServer {\n    private url: string;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    public getUrl(): string {\n        return this.url;\n    }\n\n    public setUrl(url: string): void {\n        this.url = url;\n    }\n\n    public async request<T>(\n        ff: FrostFactory<T>,\n        options: any\n    ): Promise<FrostResult<T>> {\n        //get query from query builder\n        let query: string = ff.getQueryBuilder().getQuery(options);\n\n        //fetch response\n        let response: Response = await fetch(this.url + query);\n        if (!response.ok) {\n            //something went wrong in the fetching process\n            return new FrostResult<T>(\n                null,\n                false,\n                `Fetching Error: ${response.status} ${response.statusText}`\n            );\n        }\n\n        //convert response to json\n        let json: JSON = await response.json();\n\n        try {\n            //get type specific json converter\n            let converter = ff.getConverter();\n            //convert json to specific objects\n            let result: T = converter.convert(json, options);\n\n            return new FrostResult<T>(result, true, \"No error occured\");\n        } catch (error) {\n            //something went wrong in the convertion process\n            return new FrostResult<T>(null, false, (error as Error).message);\n        }\n    }\n}\n","import ResultModelConverter from \"./ResultModelConverter\";\nimport QueryBuilder from \"./QueryBuilder\";\n\nexport default abstract class FrostFactory<T> {\n    private rmc: ResultModelConverter<T>;\n    private qb: QueryBuilder;\n\n    constructor(rmc: ResultModelConverter<T>, qb: QueryBuilder) {\n        this.rmc = rmc;\n        this.qb = qb;\n    }\n\n    public getConverter(): ResultModelConverter<T> {\n        return this.rmc;\n    }\n\n    public getQueryBuilder(): QueryBuilder {\n        return this.qb;\n    }\n}\n","import { Position } from \"./Position\";\nimport { Feature } from \"./Feature\";\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\n\nexport class ObservationStation {\n    private id: string;\n    private name: string;\n    private description: string;\n    private position: Position;\n    private availableFeatures: Feature[];\n\n    constructor(\n        id: string,\n        name: string,\n        description: string,\n        position: Position,\n        availableFeatures: Feature[]\n    ) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.position = position;\n        this.availableFeatures = availableFeatures;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public getPosition(): Position {\n        return this.position;\n    }\n\n    public getFeatures(): Feature[] {\n        return this.availableFeatures;\n    }\n\n    public getDiagramController(): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        for (let feature of this.availableFeatures) {\n            let featureDiagramControllerArray = feature.getDiagramController(\n                this\n            );\n            for (let controller of featureDiagramControllerArray) {\n                diagramController.push(controller);\n            }\n        }\n        return diagramController;\n    }\n\n    public hasFeature(feature: Feature): boolean {\n        return this.availableFeatures.find((f) => f.getId() === feature.getId())\n            ? true\n            : false;\n    }\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetStationFactory extends FrostFactory<ObservationStation> {\n    constructor() {\n        super(new GetStationConverter(), new GetStationBuilder());\n    }\n}\n\nexport class GetStationConverter\n    implements ResultModelConverter<ObservationStation> {\n    public convert(\n        json: ObservationStationEntity,\n        options: getStationOptions\n    ): ObservationStation {\n        let pos: Position;\n        if (json.Locations === undefined || json.Locations === null || json.Locations[0] === undefined || json.Locations[0] === null) {\n            throw new Error(\"Thing has no Location\");\n        } else {\n            pos = new Position(\n                json.Locations[0].location.coordinates[1],\n                json.Locations[0].location.coordinates[0]\n            );\n        }\n\n        let features: Feature[] = [];\n\n        let fp: FeatureProvider = FeatureProvider.getInstance();\n        json.Datastreams.forEach((element) => {\n            let getfeat: Feature | undefined = fp.getFeature(\n                element.ObservedProperty[\"@iot.id\"]\n            );\n            if (getfeat !== undefined) {\n                let feat: Feature = getfeat;\n                let isin: boolean = false;\n                features.forEach(f => {\n                    if (f.getId() === feat.getId()) {\n                        isin = true;\n                    }\n                })\n                if (isin === false) {\n                    features.push(getfeat);\n                }\n            }\n        });\n\n        return new ObservationStation(\n            json[\"@iot.id\"],\n            json.name,\n            json.description,\n            pos,\n            features\n        );\n    }\n}\n\nexport class GetStationBuilder implements QueryBuilder {\n    public getQuery(options: getStationOptions): string {\n        return (\n            \"Things('\" +\n            options.id +\n            \"')?$select=@iot.id,name,description&$expand=Locations($select=location),Datastreams/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface getStationOptions {\n    id: string;\n}\n\ninterface ObservationStationEntity {\n    name: string;\n    description: string;\n    Datastreams: DatastreamsEntity[];\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedPropertyEntity;\n}\ninterface ObservedPropertyEntity {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: LocationEntity;\n}\ninterface LocationEntity {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetObservationStationsFactory extends FrostFactory<\n    ObservationStation[]\n    > {\n    constructor() {\n        super(\n            new GetObservationStationsConverter(),\n            new GetObservationStationsBuilder()\n        );\n    }\n}\n\nexport class GetObservationStationsConverter\n    implements ResultModelConverter<ObservationStation[]> {\n    public convert(\n        json: ResultList,\n        options: GetObservationStationsOptions\n    ): ObservationStation[] {\n        let stations: ObservationStation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        json.value.forEach((element) => {\n            let coord: number[] = element.Locations[0].location.coordinates;\n            let pos: Position = new Position(coord[1], coord[0]);\n\n            let features: Feature[] = [];\n            let fp: FeatureProvider = FeatureProvider.getInstance();\n            if (\n                element.Datastreams === null ||\n                element.Datastreams === undefined\n            ) {\n                throw new Error(\"Cannot parse response of server\");\n            }\n            element.Datastreams.forEach((stream) => {\n                let feat: Feature | undefined = fp.getFeature(\n                    stream.ObservedProperty[\"@iot.id\"]\n                );\n                if (feat !== undefined) {\n                    features.push(feat);\n                }\n            });\n            stations.push(\n                new ObservationStation(\n                    element[\"@iot.id\"],\n                    element.name,\n                    element.description,\n                    pos,\n                    []\n                )\n            );\n        });\n        return stations;\n    }\n}\n\nexport class GetObservationStationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationStationsOptions): string {\n        return (\n            \"Things?$filter=geo.distance(Locations/location,geography'POINT(\" +\n            options.middle.getLongitude() +\n            \" \" +\n            options.middle.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))&$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface GetObservationStationsOptions {\n    middle: Position;\n    radius: number;\n}\n\nexport interface ResultList {\n    value?: ValueEntity[] | null;\n}\nexport interface ValueEntity {\n    name: string;\n    description: string;\n    properties?: Properties | null;\n    \"Datastreams@iot.navigationLink\": string;\n    Datastreams?: DatastreamsEntity[] | null;\n    \"MultiDatastreams@iot.navigationLink\": string;\n    \"Locations@iot.navigationLink\": string;\n    Locations: LocationsEntity[];\n    \"HistoricalLocations@iot.navigationLink\": string;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Properties {\n    \"hardware.id\": string;\n    shortname: string;\n    \"operator.domain\": string;\n    station_active_from?: string | null;\n    station_setting_name?: string | null;\n    \"station type name\"?: string | null;\n    station_no?: number | null;\n    documentation?: string | null;\n}\nexport interface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\nexport interface ObservedProperty {\n    \"@iot.id\": string;\n}\nexport interface LocationsEntity {\n    location: Location;\n}\nexport interface Location {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\n\nexport class GetLatestObservationFactory extends FrostFactory<Observation> {\n    constructor() {\n        super(\n            new GetLatestObservationConverter(),\n            new GetLatestObservationBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationConverter\n    implements ResultModelConverter<Observation> {\n    //convert json to Observation object\n    public convert(\n        json: any,\n        options: GetLatestObservationOptions\n    ): Observation {\n        let rl: ResultList;\n        try {\n            //apply pattern\n            rl = json;\n        } catch {\n            throw new Error(\"Convertion Error: Unknown json pattern\");\n        }\n\n        let observation: ObservationsEntity = rl.value[0].Observations[0];\n\n        return new Observation(\n            options.station,\n            options.feature,\n            observation.result,\n            new Date(observation.phenomenonTime)\n        );\n    }\n}\n\nexport class GetLatestObservationBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() +\n            \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Observations($top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationOptions {\n    station: ObservationStation;\n    feature: Feature;\n}\n\nexport interface ResultList {\n    value: ValueEntity[];\n}\nexport interface ValueEntity {\n    Observations: ObservationsEntity[];\n    \"Observations@iot.nextLink\"?: string;\n    \"@iot.id\": string;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetLatestObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(\n            new GetLatestObservationsConverter(),\n            new GetLatestObservationsBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(\n        json: ResultList,\n        options: GetLatestObservationsOptions\n    ): Observation[] {\n        let observations: Observation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n\n        json.value.forEach((stream) => {\n            try {\n                let thing: Thing = stream.Thing;\n                if (thing.Locations === null || thing.Locations === undefined) {\n                    return;\n                }\n                if (\n                    thing.Locations[0].location.coordinates === null ||\n                    thing.Locations[0].location.coordinates === undefined\n                ) {\n                    return;\n                }\n                let pos: Position = new Position(\n                    thing.Locations[0].location.coordinates[1],\n                    thing.Locations[0].location.coordinates[0]\n                );\n\n                let features: Feature[] = [];\n\n                if (\n                    thing.Datastreams === null ||\n                    thing.Datastreams === undefined\n                ) {\n                    return;\n                }\n\n                let fp: FeatureProvider = FeatureProvider.getInstance();\n\n                thing.Datastreams.forEach((dastream) => {\n                    let feat: Feature | undefined = fp.getFeature(\n                        dastream.ObservedProperty[\"@iot.id\"]\n                    );\n                    if (feat !== undefined) {\n                        features.push(feat);\n                    }\n                });\n\n                let sta: ObservationStation = new ObservationStation(\n                    thing[\"@iot.id\"],\n                    thing.name,\n                    thing.description,\n                    pos,\n                    features\n                );\n\n                if (\n                    stream.Observations === null ||\n                    stream.Observations === undefined\n                ) {\n                    return;\n                }\n                if (stream.Observations[0] === null || stream.Observations[0] === undefined) {\n                    return;\n                }\n                observations.push(\n                    new Observation(\n                        sta,\n                        options.feature,\n                        stream.Observations[0].result,\n                        new Date(stream.Observations[0].phenomenonTime)\n                    )\n                );\n            } catch (e) { }\n        });\n\n        return observations;\n    }\n}\n\nexport class GetLatestObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationsOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id,name&$filter=geo.distance(Thing/Locations/location,geography'POINT(\" +\n            options.center.getLongitude() +\n            \" \" +\n            options.center.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(phenomenonTime,(now() sub duration'P1d')) and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Thing($select=name,description,@iot.id;$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)),Observations($select=result,phenomenonTime;$filter=phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationsOptions {\n    center: Position;\n    radius: number;\n    feature: Feature;\n}\n\ninterface ResultList {\n    value?: ValueEntity[] | null;\n}\ninterface ValueEntity {\n    name: string;\n    Thing: Thing;\n    Observations?: (ObservationsEntity | null)[] | null;\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string | null;\n}\ninterface Thing {\n    name: string;\n    description: string;\n    Datastreams?: DatastreamsEntity[] | null;\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\ninterface ObservedProperty {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: Location;\n}\ninterface Location {\n    type: string;\n    coordinates?: number[] | null;\n}\ninterface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\n\nexport class GetObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(new GetObservationsConverter(), new GetObservationsBuilder());\n    }\n}\n\nexport class GetObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(json: any, options: GetObservationsOptions): Observation[] {\n        let rl: ResultList;\n\n        try {\n            //convert json to template\n            rl = json;\n        } catch {\n            throw new Error(\"Convertion Error: unknown json template\");\n        }\n\n        let observations: Observation[] = [];\n\n        rl.value.forEach((stream) => {\n            stream.Observations.forEach((obs) => {\n                observations.push(\n                    new Observation(\n                        options.station,\n                        options.feature,\n                        obs.result,\n                        new Date(obs.phenomenonTime)\n                    )\n                );\n            });\n        });\n\n        return observations;\n    }\n}\n\nexport class GetObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationsOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() +\n            \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Observations($filter=overlaps(phenomenonTime, \" +\n            options.start.toISOString() +\n            \"/\" +\n            options.end.toISOString() +\n            \");$orderby=phenomenonTime desc)\"\n        );\n    }\n}\n\nexport interface GetObservationsOptions {\n    station: ObservationStation;\n    feature: Feature;\n    start: Date;\n    end: Date;\n}\n\nexport interface ResultList {\n    value: ValueEntity[];\n}\nexport interface ValueEntity {\n    Observations: ObservationsEntity[];\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    resultTime: string;\n    result: number;\n    parameters: Parameters;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Parameters {\n    \"last calibration\": string;\n}\n","import { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport FrostServer from \"./FrostServer\";\nimport { GetStationFactory } from \"./factories/GetStation\";\nimport { FrostResult } from \"../../Model/FrostResult\";\nimport { GetObservationStationsFactory } from \"./factories/GetObservationStations\";\nimport { GetLatestObservationFactory } from \"./factories/GetLatestObservation\";\nimport { GetLatestObservationsFactory } from \"./factories/GetLatestObservations\";\nimport { GetObservationsFactory } from \"./factories/GetObservations\";\n\nexport default class DataProvider {\n    private static server: FrostServer = new FrostServer(\n        \"https://api.smartaq.net/v1.0/\"\n    );\n\n    private static handleFrostResult<T>(fr: FrostResult<T>): T {\n        let result: T | null = fr.getResult();\n        if (!fr.getSuccess() || result === null) {\n            //Error handling here\n            throw new Error(fr.getMessage());\n        } else {\n            return result;\n        }\n    }\n\n    // returns all observation stations that are located within a specified radius around a geo position\n    static async getObservationStations(\n        middle: Position,\n        radius: number\n    ): Promise<ObservationStation[]> {\n        let frostFactory = new GetObservationStationsFactory();\n        let options = { middle, radius };\n\n        //fetch data\n        let fr: FrostResult<ObservationStation[]> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        //fetch data\n        let fr: FrostResult<Observation> = await this.server.request(\n            new GetLatestObservationFactory(),\n            { station, feature }\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getStation(id: string): Promise<ObservationStation> {\n        let frostFactory = new GetStationFactory();\n        let options = { id };\n\n        //fetch data\n        let fr: FrostResult<ObservationStation> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        //check whether something went wrong\n        if (!fr.getSuccess()) {\n            throw new Error(fr.getMessage());\n        }\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Promise<Observation[]> {\n        let frostFactory = new GetLatestObservationsFactory();\n        let options = { center, radius, feature };\n\n        //fetch data\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getObservations(\n        station: ObservationStation,\n        feature: Feature,\n        start: Date,\n        end: Date\n    ): Promise<Observation[]> {\n        let frostFactory = new GetObservationsFactory();\n\n        let options = [];\n\n        var step = new Date(start.getTime() + 6 * 60 * 60 * 1000);\n\n        do {\n            options.push({\n                station,\n                feature,\n                start: new Date(start.getTime()),\n                end: new Date(step < end ? step.getTime() : end.getTime()),\n            });\n            start.setHours(start.getHours() + 6);\n            step.setHours(step.getHours() + 6);\n        } while (step < end);\n\n        var promises: Promise<FrostResult<Observation[]>>[] = [];\n\n        options.forEach((o) => {\n            promises.push(this.server.request(frostFactory, o));\n        });\n        let res = await Promise.all(promises);\n        /*//fetch data\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            frostFactory,\n            options\n        );*/\n\n        return res.flatMap((r) => this.handleFrostResult(r));\n    }\n\n    static async getAddress(pos: Position): Promise<string> {\n        var json = await (\n            await fetch(\n                \"https://nominatim.openstreetmap.org/reverse?lat={lat}&lon={lon}&format=json\"\n                    .replace(\"{lat}\", pos.getLatitude().toString())\n                    .replace(\"{lon}\", pos.getLongitude().toString())\n            )\n        ).json();\n        if (json.address?.road && json.address?.city) {\n            return json.address.road + \", \" + json.address.city;\n        } else {\n            return \"?\";\n        }\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\n\nexport default interface IDiagramController {\n    observationStation: ObservationStation;\n    feature: Feature;\n\n    getID: () => string;\n    //returns type of chart\n    getChartType: () => ChartType;\n\n    //returns options that specify how the diagram is displayed\n    getGraphicsOptions: () => {};\n\n    //returns whether the diagram is configurable\n    isConfigurable: () => boolean;\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption: () => string;\n\n    //return names of configuration options\n    getConfigurationOptions: () => string[];\n\n    //sets the current configuration option of the diagram\n    setConfigurationOption: (optionName: string) => void;\n\n    //returns the data that can be displayed in the diagram\n    getData: (\n        configurationOptionName: string\n    ) => Promise<Array<Array<Date | null | number | string>>>;\n}\n\nexport enum ChartType {\n    LINE_CHART = \"LineChart\",\n    PIE_CHART = \"PieChart\",\n}\n","export default class Timespan {\n\n  //length in milliseconds\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n\n  //returns the end of a timespan given the start date\n  public getEnd(start: Date): Date {\n    return (new Date(start.valueOf() + this.length));\n  }\n\n  //returns the start of a timespan given the end date\n  public getStart(end: Date): Date {\n    return (new Date(end.valueOf() - this.length));\n  }\n}\n","import { Observation } from \"../../Model/Observation\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\n\nconst BLOCK_TIME = 1000 * 60 * 15; //15 minutes\n\nexport default class RequestReducer {\n    private static reduceBlocks(obs: Observation[][]): Observation[] {\n        var results: Observation[] = [];\n        obs.forEach((hourBlock) => {\n            if (hourBlock.length === 0) {\n                return;\n            }\n            var avg =\n                hourBlock.map((a) => a.getValue()).reduce((a, b) => a + b, 0) /\n                hourBlock.length; //avg value\n            results.push(\n                new Observation(\n                    hourBlock[0].getObservationStation(),\n                    hourBlock[0].getFeature(),\n                    avg,\n                    hourBlock[0].getTimeStamp()\n                )\n            );\n        });\n\n        return results;\n    }\n\n    static async GetDataForDay(\n        day: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): Promise<Observation[]> {\n        var promises: Promise<Observation[]>[] = [];\n\n        day.setMinutes(0);\n\n        var zero = new Date(day.getTime());\n        var eight = new Date(day.getTime());\n        var sixteen = new Date(day.getTime());\n\n        zero.setHours(0, 0, 0);\n        eight.setHours(8, 0, 0);\n        sixteen.setHours(16, 0, 0);\n\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                zero,\n                new Date(zero.getTime() + BLOCK_TIME)\n            )\n        );\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                eight,\n                new Date(eight.getTime() + BLOCK_TIME)\n            )\n        );\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                sixteen,\n                new Date(sixteen.getTime() + BLOCK_TIME)\n            )\n        );\n        var r = await Promise.all(promises);\n\n        return this.reduceBlocks(r);\n    }\n\n    static async getDataByMonth(\n        endDate: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ) {\n        var startDate = new Date(endDate.getTime());\n        startDate.setMonth(startDate.getMonth() - 1);\n\n        var promises: Promise<Observation[]>[] = [];\n\n        while (startDate < endDate) {\n            promises.push(\n                this.GetDataForDay(startDate, observationStation, feature)\n            );\n            startDate.setDate(startDate.getDate() + 1);\n        }\n        var results = await Promise.all(promises);\n        return results.reduce((prev, next) => {\n            return prev.concat(next);\n        }, []);\n    }\n\n    static async getDataByYear(\n        endDate: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ) {\n        var observations: Promise<Observation[]>[] = [];\n        //Months\n        for (var i = 0; i < 12; i++) {\n            endDate.setDate(1);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(8);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(15);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(22);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n\n            endDate.setMonth(endDate.getMonth() - 1);\n        }\n        var res = await Promise.all(observations);\n        return res.reduce((prev, next) => {\n            return prev.concat(next);\n        }, []);\n    }\n    /*\n    private static async estimateObservationCount(\n        start: Date,\n        end: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): Promise<number> {\n        var lastHour = await DataProvider.getObservations(\n            observationStation,\n            feature,\n            new Date(Date.now() - 60 * 60 * 1000),\n            new Date(Date.now())\n        );\n        var estimate =\n            lastHour.length *\n            (((end.getTime() - start.getTime()) / 1000) * 60 * 60);\n        return estimate;\n    }\n    */\n}\n","import Language from \"../Storage/Language\";\nimport IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\nimport RequestReducer from \"./RequestReducer\";\n\nlet languageProvider = Language.getInstance();\n\nclass FHLCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n    additionalGraphicsOptions: {};\n\n    constructor(\n        nameId: string,\n        timespan: Timespan,\n        frequency: number,\n        additionalGraphicsOptions: {}\n    ) {\n        this.name = languageProvider.getText(nameId);\n        this.timespan = timespan;\n        this.frequency = frequency;\n        this.additionalGraphicsOptions = additionalGraphicsOptions;\n    }\n}\n\nexport class FeatureHistoryLineChartController implements IDiagramController {\n    private static readonly ID = \"FeatureHistoryLineChart\";\n    //support line charts\n    private static readonly chartType = ChartType.LINE_CHART;\n    //enable configuration\n    private static readonly isConfigutable = true;\n    //available configuration options\n    private static readonly configurationOptions = [\n        //last 24 hours\n        new FHLCConfigurationOption(\n            \"last_24_hours\",\n            new Timespan(24 * 60 * 60 * 1000),\n            24,\n            {\n                hAxis: {\n                    format: \"HH:mm\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n        //last 7 days\n        new FHLCConfigurationOption(\n            \"last_7_days\",\n            new Timespan(7 * 24 * 60 * 60 * 1000),\n            12,\n            {\n                hAxis: {\n                    format: \"dd.MM\",\n                    gridlines: {\n                        count: 7,\n                    },\n                },\n            }\n        ),\n        //last 31 days\n        new FHLCConfigurationOption(\n            \"last_31_days\",\n            new Timespan(31 * 24 * 60 * 60 * 1000),\n            6,\n            {\n                hAxis: {\n                    format: \"dd.MM\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n        //last year\n        new FHLCConfigurationOption(\n            \"last_year\",\n            new Timespan(365 * 24 * 60 * 60 * 1000),\n            1,\n            {\n                hAxis: {\n                    format: \"MMM\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n    ];\n    // options for the graphical appearence (aplied for all configuration options)\n    private static readonly graphicsOptions = {\n        legend: { position: \"none\" },\n    };\n\n    observationStation: ObservationStation;\n    feature: Feature;\n    currentConfigurationOption: FHLCConfigurationOption;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.currentConfigurationOption =\n            FeatureHistoryLineChartController.configurationOptions[0];\n    }\n    getID() {\n        return FeatureHistoryLineChartController.ID;\n    }\n    //returns chart type\n    getChartType(): ChartType {\n        return FeatureHistoryLineChartController.chartType;\n    }\n\n    //returns options that specify how the diagram is displayed\n    getGraphicsOptions() {\n        return {\n            ...FeatureHistoryLineChartController.graphicsOptions,\n            ...this.currentConfigurationOption.additionalGraphicsOptions,\n        };\n    }\n\n    //returns whether the diagram is configurable\n    isConfigurable() {\n        return FeatureHistoryLineChartController.isConfigutable;\n    }\n\n    //sets the current configurationOption of the diagram\n    setConfigurationOption(optionName: string) {\n        this.currentConfigurationOption = this.getFHLCConfigurationOption(\n            optionName\n        );\n    }\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption() {\n        return this.currentConfigurationOption.name;\n    }\n\n    //return names of configuration options\n    getConfigurationOptions(): string[] {\n        //translate options to current language\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(\n            (option) => option.name\n        );\n        return optionNames;\n    }\n\n    //return data to display\n    async getData(\n        configurationOptionName: string\n    ): Promise<Array<Array<Date | number | string | null>>> {\n        //get timespan\n        var start: Date = this.currentConfigurationOption.timespan.getStart(\n            new Date(Date.now())\n        );\n        var observations: Observation[] = [];\n\n        /*\n        while (start.valueOf() < Date.now()) {\n            let end = new Date(\n                start.getFullYear(),\n                start.getMonth(),\n                start.getDate(),\n                start.getHours() + 6\n            );\n\n            \n            //get observations\n            let newObs = await DataProvider.getObservations(\n                this.observationStation,\n                this.feature,\n                start,\n                end\n            );\n            \n            let newObs = await this.reduceGetData(start, end);\n\n            observations = observations.concat(newObs);\n\n            start = end;\n        }\n        */\n\n        var end = new Date(Date.now());\n        var length = end.getTime() - start.getTime();\n        const MONTH_IN_MILLI = 1000 * 60 * 60 * 24 * 30;\n        const YEAR_IN_MILLI = MONTH_IN_MILLI * 12;\n        if (length >= YEAR_IN_MILLI) {\n            observations = await RequestReducer.getDataByYear(\n                end,\n                this.observationStation,\n                this.feature\n            );\n        } else if (length >= MONTH_IN_MILLI) {\n            observations = await RequestReducer.getDataByMonth(\n                end,\n                this.observationStation,\n                this.feature\n            );\n        } else {\n            observations = await DataProvider.getObservations(\n                this.observationStation,\n                this.feature,\n                start,\n                end\n            );\n        }\n\n        let data: Array<[Date, number]> = [];\n\n        //extract values and timestamps from observations\n        observations.forEach((observation, index) => {\n            let timestamp = observation.getTimeStamp();\n            let value = observation.getValue();\n            data.push([timestamp, value]);\n        });\n\n        data.sort((row1, row2) => {\n            if (row1[0].valueOf() < row2[0].valueOf()) {\n                return -1;\n            } else {\n                return 1;\n            }\n        });\n\n        //add react google chart specific header\n        let table: any = data;\n        table.splice(0, 0, [\"Date\", \"Value\"]);\n\n        return table;\n    }\n\n    //get configuration option by name\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\n        var options = FeatureHistoryLineChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`\n        );\n    }\n}\n","import IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport Language from \"../Storage/Language\";\nimport { Observation } from \"../../Model/Observation\";\nimport RequestReducer from \"./RequestReducer\";\n\nlet languageProvider = Language.getInstance();\n\nclass CTLMPCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n    additionalGraphicOptions: {};\n\n    constructor(\n        name: string,\n        timespan: Timespan,\n        frequency: number,\n        additionalGraphicOptions: {}\n    ) {\n        this.name = name;\n        this.timespan = timespan;\n        this.frequency = frequency;\n        this.additionalGraphicOptions = additionalGraphicOptions;\n    }\n}\n\nexport class ComparisonToLastMonthPieChartController\n    implements IDiagramController {\n    private static readonly title = languageProvider.getText(\n        \"ComparisonToLastMonthPieChart_Title\"\n    );\n    private static readonly ID = \"ComparisonToLastMonthPieChart\";\n    //support line charts\n    private static readonly chartType = ChartType.PIE_CHART;\n    //enable configuration\n    private static readonly isConfigurable = false;\n    // options for the graphical appearence\n    private static readonly graphicsOptions = {\n        legend: \"none\",\n        pieSliceText: \"label\",\n        title: ComparisonToLastMonthPieChartController.title,\n        pieStartAngle: 100,\n        slices: {\n            0: { color: \"#4caf50\" },\n            1: { color: \"#f44336\" },\n        },\n    };\n    //configuration options\n    private static readonly configurationOptions = [\n        new CTLMPCConfigurationOption(\n            \"default_configuration\",\n            new Timespan(31 * 24 * 60 * 60 * 1000),\n            24,\n            {}\n        ),\n    ];\n\n    observationStation: ObservationStation;\n    feature: Feature;\n    currentConfigurationOption: CTLMPCConfigurationOption;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.currentConfigurationOption =\n            ComparisonToLastMonthPieChartController.configurationOptions[0];\n    }\n    getID() {\n        return ComparisonToLastMonthPieChartController.ID;\n    }\n\n    setConfigurationOption(optionName: string) {\n        this.currentConfigurationOption = this.getCTLMPCConfigurationOption(\n            optionName\n        );\n    }\n\n    getChartType(): ChartType {\n        return ComparisonToLastMonthPieChartController.chartType;\n    }\n\n    getGraphicsOptions() {\n        return {\n            ...ComparisonToLastMonthPieChartController.graphicsOptions,\n            ...this.currentConfigurationOption.additionalGraphicOptions,\n        };\n    }\n\n    isConfigurable() {\n        return ComparisonToLastMonthPieChartController.isConfigurable;\n    }\n\n    getConfigurationOptions() {\n        return ComparisonToLastMonthPieChartController.configurationOptions.map(\n            (option) => option.name\n        );\n    }\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption() {\n        return this.currentConfigurationOption.name;\n    }\n\n    async getData(\n        configurationOptionName: string\n    ): Promise<Array<Array<Date | number | string | null>>> {\n        //configuration option by name\n        var configuration = this.getCTLMPCConfigurationOption(\n            configurationOptionName\n        );\n\n        ///get timespan\n        var start: Date = configuration.timespan.getStart(new Date(Date.now()));\n        var observations: Observation[] = [];\n\n        while (start.valueOf() < Date.now()) {\n            let end = new Date(\n                start.getFullYear(),\n                start.getMonth(),\n                start.getDate() + 1,\n                start.getHours()\n            );\n\n            //get observations\n            let newObs = await RequestReducer.GetDataForDay(\n                end,\n                this.observationStation,\n                this.feature\n            );\n\n            observations = observations.concat(newObs);\n\n            start = end;\n        }\n\n        var lastObservationValue = observations.pop()?.getValue() as number;\n\n        var higher = 0;\n        var lower = 0;\n\n        let higherTag = languageProvider.getText(\"higher\");\n        let lowerTag = languageProvider.getText(\"lower\");\n\n        observations.forEach((observation) => {\n            observation.getValue() > lastObservationValue ? higher++ : lower++;\n        });\n\n        var data = [\n            [\"tag\", \"#days\"],\n            [higherTag, higher],\n            [lowerTag, lower],\n        ];\n        return data;\n    }\n\n    //get configuration option by name\n    private getCTLMPCConfigurationOption(\n        name: string\n    ): CTLMPCConfigurationOption {\n        var options =\n            ComparisonToLastMonthPieChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`\n        );\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport { FeatureHistoryLineChartController } from \"./FeatureHistoryLineChartController\";\nimport { ComparisonToLastMonthPieChartController } from \"./ComparisonToLastMonthPieChartController\";\nimport IDiagramController from \"./DiagramController\";\n\nexport default class DiagramFactory {\n    private static readonly diagramMap = new Map<string, Function>([\n        [\n            \"FeatureHistoryLineChart\",\n            (observationStation: ObservationStation, feature: Feature) => {\n                return new FeatureHistoryLineChartController(\n                    observationStation,\n                    feature\n                );\n            },\n        ],\n        [\n            \"ComparisonToLastMonthPieChart\",\n            (observationStation: ObservationStation, feature: Feature) => {\n                return new ComparisonToLastMonthPieChartController(\n                    observationStation,\n                    feature\n                );\n            },\n        ],\n    ]);\n\n    public static getDiagramController(\n        id: string,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): IDiagramController {\n        if (DiagramFactory.diagramMap.has(id)) {\n            var constructController = DiagramFactory.diagramMap.get(\n                id\n            ) as Function;\n            return constructController.call(\n                DiagramFactory,\n                observationStation,\n                feature\n            );\n        } else {\n            throw new Error(`Diagram id: ${id}, is not supported`);\n        }\n    }\n}\n","import { Scale } from \"./Scale\";\nimport { Observation } from \"./Observation\";\nimport { ObservationStation } from \"./ObservationStation\";\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\nimport Language from \"../Controller/Storage/Language\";\n\nlet language = Language.getInstance();\n\nexport class Feature {\n    private id: string;\n    private nameId: string;\n    private descriptionId: string;\n    private scale: Scale;\n    private relatedWeblinkId: string;\n    private limit: number;\n    private unitOfMeasurement: string;\n    private controllerIds: string[];\n    private iconName: string;\n\n    constructor(\n        id: string,\n        nameId: string,\n        descriptionId: string,\n        scale: Scale,\n        relatedWeblinkId: string,\n        limit: number,\n        unitOfMeasurement: string,\n        controllerIds: string[],\n        iconName: string\n    ) {\n        this.id = id;\n        this.nameId = nameId;\n        this.descriptionId = descriptionId;\n        this.scale = scale;\n        this.relatedWeblinkId = relatedWeblinkId;\n        this.limit = limit;\n        this.unitOfMeasurement = unitOfMeasurement;\n        this.controllerIds = controllerIds;\n        this.iconName = iconName;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return language.getText(this.nameId);\n        //return this.nameId;\n    }\n\n    public getDescription(): string {\n        return language.getText(this.descriptionId);\n        //return this.descriptionId;\n    }\n\n    public getRelatedWeblink(): string {\n        return language.getText(this.relatedWeblinkId);\n        //return this.relatedWeblinkId;\n    }\n\n    public getRelatedScale(): Scale {\n        return this.scale;\n    }\n\n    public getDiagramController(\n        observationStation: ObservationStation\n    ): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        this.controllerIds.forEach((id) => {\n            let controller = DiagramFactory.getDiagramController(\n                id,\n                observationStation,\n                this\n            );\n            diagramController.push(controller);\n        });\n\n        return diagramController;\n    }\n\n    public getLimit(): number {\n        return this.limit;\n    }\n\n    public getUnitOfMeasurement(): string {\n        return this.unitOfMeasurement;\n    }\n\n    public isLimitExceeded(observation: Observation): boolean {\n        return observation.getValue() > this.limit;\n    }\n\n    public getIconName(): string {\n        return this.iconName;\n    }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport * as featureDefinition from \"../Jsons/features.json\";\n\nexport default class FeatureProvider {\n    //private context: any;\n    private features: { [id: string]: Feature };\n    private static instance: FeatureProvider | null = null;\n\n    constructor() {\n        this.features = {};\n        //@ts-ignore\n        (featureDefinition.features as FeatureDefinition[]).forEach((f) => {\n            this.addFeature(f);\n        });\n    }\n\n    static getInstance(): FeatureProvider {\n        if (!this.instance) {\n            this.instance = new FeatureProvider();\n        }\n        return this.instance;\n    }\n\n    private addFeature(definition: FeatureDefinition) {\n        if (definition) {\n            var f = new Feature(\n                definition.id,\n                definition.nameId,\n                definition.descriptionId,\n                new Scale(true, definition.defaultScale),\n                definition.webLinkId,\n                definition.limit,\n                definition.unitOfMeasurement,\n                definition.diagrams,\n                definition.icon\n            );\n            this.features[f.getId()] = f;\n        }\n    }\n\n    //Returns all loaded features\n    listAllFeatures(): Feature[] {\n        return Object.keys(this.features).map((key) => {\n            return this.features[key];\n        });\n    }\n\n    getFeature(featureId: string): Feature | undefined {\n        if (Object.keys(this.features).includes(featureId)) {\n            return this.features[featureId];\n        } else {\n            return undefined;\n        }\n    }\n}\n\ninterface FeatureDefinition {\n    id: string;\n    nameId: string;\n    unitOfMeasurement: string;\n    descriptionId: string;\n    defaultScale: { [key: number]: string };\n    webLinkId: string;\n    limit: number;\n    diagrams: string[];\n    icon: string;\n}\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nimport ObservationStationProfile from \"./ObservationStationProfile\";\nimport LocationMap from \"./LocationMap\";\nimport Diagram from \"./Diagram\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nexport default class DetailPage extends React.Component<\n    IDetailPageProps,\n    IDetailPageState\n> {\n    constructor(props: IDetailPageProps) {\n        super(props);\n        this.state = { obs: null };\n        DataProvider.getStation(this.props.match.params.id).then((o) => {\n            this.setState({ obs: o });\n        });\n    }\n\n    //styles of this component\n    styles = {\n        main_container: {\n            paddingTop: \"20px\",\n        },\n    };\n\n    //return diagrams of this observation station\n    renderDiagrams() {\n        if (this.state.obs === null) return <CircularProgress />;\n\n        var diagramController = this.state.obs.getDiagramController();\n        return diagramController.map((controller) => (\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <Diagram controller={controller} />\n            </Grid>\n        ));\n    }\n\n    //render component\n    render() {\n        return (\n            <Grid container justify=\"center\">\n                <Grid\n                    container\n                    justify=\"center\"\n                    spacing={4}\n                    xl={8}\n                    lg={8}\n                    md={8}\n                    sm={12}\n                    xs={12}\n                    style={this.styles.main_container}\n                >\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12}>\n                        {this.state.obs ? (\n                            <ObservationStationProfile\n                                observationStation={this.state.obs}\n                            />\n                        ) : (\n                            <CircularProgress />\n                        )}\n                    </Grid>\n                    <Hidden only={[\"sm\", \"xs\"]}>\n                        <Grid item xl={4} lg={4} md={4}>\n                            {this.state.obs ? (\n                                <LocationMap\n                                    position={this.state.obs.getPosition()}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Grid>\n                    </Hidden>\n                    {this.renderDiagrams()}\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\ninterface IDetailPageProps {\n    match: { params: { id: string } };\n}\n\ninterface IDetailPageState {\n    obs: ObservationStation | null;\n}\n","import React from \"react\";\nimport {\n    Card,\n    Typography,\n    Divider,\n    CardContent,\n    Grid,\n} from \"@material-ui/core\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport ObservationItem from \"./ObservationItem\";\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\nimport Language from \"../../Controller/Storage/Language\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nexport default class ObservationStationProfile extends React.Component<\n    IObservationStationProfileProps,\n    IObservationStationProfileState\n> {\n    languageProvider: Language;\n\n    constructor(props: IObservationStationProfileProps) {\n        super(props);\n        this.state = {\n            latestObservations: [],\n            positionText: \"\",\n        };\n        this.languageProvider = Language.getInstance();\n        this.getLatestObservations().then((o) =>\n            this.setState({ latestObservations: o })\n        );\n        DataProvider.getAddress(\n            this.props.observationStation.getPosition()\n        ).then((address) => {\n            this.setState({ positionText: address });\n        });\n    }\n\n    //styles for this component\n    styles = {\n        pos: {\n            marginBottom: 12,\n        },\n        section_1: {\n            padding: \"20px\",\n        },\n        section_2: {\n            padding: \"20px\",\n        },\n        feature_container: {\n            marginTop: \"20px\",\n        },\n    };\n\n    //colors that are assignable to the observation items icons\n    colors = [\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\",\n        \"#673ab7\",\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#8bc34a\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#795548\",\n        \"#9e9e9e\",\n        \"#607d8b\",\n    ];\n\n    //returns the latest observation for each feature of this observation station\n    private async getLatestObservations(): Promise<Array<Observation>> {\n        var features = this.props.observationStation.getFeatures();\n        var observations = new Array<Observation>();\n\n        for (let feature of features) {\n            var observation = await DataProvider.getLatestObservation(\n                this.props.observationStation,\n                feature\n            );\n            observations.push(observation);\n        }\n\n        return observations;\n    }\n\n    //returns a random color from the above ones\n    private getRandomColor() {\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\n        var color = this.colors[randomNumber];\n        this.colors.splice(randomNumber, 1);\n        return Color.getColorFromHex(color);\n    }\n\n    //returns JSX Elements for each latest observation\n    private renderLatestObservations() {\n        return this.state.latestObservations.map((observation) => (\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <ObservationItem\n                    color={this.getRandomColor()}\n                    observation={observation}\n                />\n            </Grid>\n        ));\n    }\n\n    //returns the timestamp of the latest observation as a readable string\n    private renderObservationDate() {\n        if (this.state.latestObservations.length !== 0) {\n            return this.languageProvider.getDateString(\n                this.state.latestObservations[0].getTimeStamp()\n            );\n        } else {\n            return \"\";\n        }\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardContent>\n                    <div style={this.styles.section_1}>\n                        <Typography align=\"left\" variant=\"h4\" component=\"h2\">\n                            {this.props.observationStation.getName()}\n                        </Typography>\n                        <Typography\n                            align=\"left\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                            style={this.styles.pos}\n                        >\n                            {this.props.observationStation\n                                .getPosition()\n                                .getString()}\n                        </Typography>\n                        <Typography\n                            align=\"left\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                            style={this.styles.pos}\n                        >\n                            {this.state.positionText}\n                        </Typography>\n                        <Typography align=\"left\" variant=\"body2\" component=\"p\">\n                            {this.props.observationStation.getDescription()}\n                        </Typography>\n                    </div>\n                    <Divider variant=\"middle\" />\n                    <div style={this.styles.section_2}>\n                        <Grid container alignItems=\"stretch\">\n                            <Grid item xs>\n                                <Typography align=\"left\" variant=\"subtitle1\">\n                                    {this.languageProvider.getText(\n                                        \"last_measurement\"\n                                    )}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography\n                                    color=\"textSecondary\"\n                                    variant=\"subtitle1\"\n                                >\n                                    {this.renderObservationDate()}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid\n                            container\n                            style={this.styles.feature_container}\n                            spacing={2}\n                        >\n                            {this.renderLatestObservations()}\n                        </Grid>\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationStationProfileProps {\n    observationStation: ObservationStation;\n}\n\ninterface IObservationStationProfileState {\n    latestObservations: Observation[];\n    positionText: string;\n}\n","import React from \"react\";\n\nimport { Card, Grid, Avatar, Typography, Box } from \"@material-ui/core\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library, IconName } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faThermometerHalf,\n    faSmog,\n    faTachometerAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\n\nimport \"./ObservationItem.css\";\n\nlibrary.add(faThermometerHalf, faSmog, faTachometerAlt);\n\nexport default class ObservationItem extends React.Component<\n    IObservationItemProps,\n    IObservationItemState\n    > {\n    render() {\n        return (\n            <Card className=\"feature-card\">\n                <Box className=\"card-content\">\n                    <Grid container direction=\"row\">\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"center\"\n                            xl={2}\n                            lg={2}\n                            md={2}\n                            sm={2}\n                            xs={2}\n                        >\n                            <Avatar\n                                style={{\n                                    backgroundColor: this.props.color.getHex(),\n                                }}\n                            >\n                                <FontAwesomeIcon\n                                    icon={\n                                        this.props.observation\n                                            .getFeature()\n                                            .getIconName() as IconName\n                                    }\n                                />\n                            </Avatar>\n                        </Grid>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            xl={10}\n                            lg={10}\n                            md={10}\n                            sm={10}\n                            xs={10}\n                        >\n                            <Typography\n                                className=\"centered-text\"\n                                color=\"textSecondary\"\n                            >\n                                {this.props.observation.getFeature().getName()}\n                            </Typography>\n                            <Typography\n                                className=\"centered-text\"\n                                variant=\"subtitle1\"\n                            >\n                                {this.props.observation.getValue() +\n                                    \" \" +\n                                    this.props.observation\n                                        .getFeature()\n                                        .getUnitOfMeasurement()}\n                            </Typography>\n                            <Typography\n                                align=\"right\"\n                                color=\"primary\">\n                                <a\n                                    href={this.props.observation\n                                        .getFeature()\n                                        .getRelatedWeblink()}\n                                    data-testid=\"featureWebLink\"\n                                >\n                                    ?\n                            </a>\n                            </Typography>\n                        </Grid>\n                    </Grid>\n\n                </Box>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationItemProps {\n    color: Color;\n    observation: Observation;\n}\n\ninterface IObservationItemState { }\n","import React from \"react\";\n\nimport { Card } from \"@material-ui/core\";\n\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Leaflet from \"leaflet\";\n\nimport { Position } from \"../../Model/Position\";\n\nexport default class LocationMap extends React.Component<\n    ILocationMapProps,\n    ILocationMapState\n> {\n    //zoom level of the map\n    private static readonly ZOOM_LEVEL = 20;\n\n    // server that provides tiles to render the map\n    private static readonly TILE_SERVER =\n        \"https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png\";\n    private static readonly TILE_SERVER_ATTRIBUTION =\n        '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\n\n    // custom icon to show position\n    private static readonly MARKER_ICON_PATH = \"./marker_icon.svg\"; //path to the icon image\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\n\n    static MARKER_ICON = new Leaflet.Icon({\n        iconUrl: require(\"\" + LocationMap.MARKER_ICON_PATH),\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\n        iconAnchor: [\n            LocationMap.MARKER_ICON_SIZE / 2,\n            LocationMap.MARKER_ICON_SIZE,\n        ], // point of the icon which will correspond to marker's location\n    });\n\n    // custom css styles\n    styles = {\n        map: {\n            height: \"300px\",\n        },\n    };\n\n    //render component as JSX.Element\n    render() {\n        var position = new Leaflet.LatLng(\n            this.props.position.getLatitude(),\n            this.props.position.getLongitude()\n        );\n        return (\n            <Card>\n                <Map\n                    center={position} //center map to the required position\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\n                    style={this.styles.map} //provide custom styles\n                    // diable zooming via mouse and keyboard and disable dragging\n                    scrollWheelZoom={false}\n                    dragging={false}\n                    keyboard={false}\n                    doubleClickZoom={false}\n                >\n                    <TileLayer\n                        url={LocationMap.TILE_SERVER}\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\n                    />\n                    <Marker\n                        position={position}\n                        icon={LocationMap.MARKER_ICON}\n                    />\n                </Map>\n            </Card>\n        );\n    }\n}\n\ninterface ILocationMapProps {\n    position: Position;\n}\n\ninterface ILocationMapState {}\n","import React from \"react\";\nimport {\n    Card,\n    Divider,\n    Typography,\n    Grid,\n    CircularProgress,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport Chart from \"react-google-charts\";\n\nimport Language from \"../../Controller/Storage/Language\";\n\nimport IDiagramController from \"../../Controller/DiagramController/DiagramController\";\n\nexport default class Diagram extends React.Component<\n    IDiagramProps,\n    IDiagramState\n> {\n    //controller for this diagram\n    controller: IDiagramController;\n\n    constructor(props: IDiagramProps) {\n        super(props);\n        this.controller = this.props.controller;\n\n        //setup default configuration in state\n        this.state = {\n            data: null,\n        };\n\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(\n            this\n        );\n    }\n\n    //styles of this component\n    styles = {\n        header: {\n            padding: \"10px\",\n            paddingLeft: \"40px\",\n        },\n        diagram: {\n            width: \"100%\",\n            height: \"350px\",\n        },\n    };\n\n    //changes the diagrams configuration\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\n        let configurationOption = event.target.value as string;\n        this.controller.setConfigurationOption(configurationOption);\n        this.setState({\n            data: null,\n        });\n        this.controller.getData(configurationOption).then((data) =>\n            this.setState({\n                data: data,\n            })\n        );\n    }\n\n    //return configuration options as menu items\n    renderConfigurationOptions() {\n        var configurationOptions = this.controller.getConfigurationOptions();\n        return configurationOptions.map((option) => (\n            <MenuItem value={option}>{option}</MenuItem>\n        ));\n    }\n\n    //renders the configuration form of this diagram\n    renderDiagramConfiguration() {\n        //if configuration is enabled return select form with configuration options\n        if (this.controller.isConfigurable()) {\n            return (\n                <Grid item>\n                    <Select\n                        value={this.controller.getCurrentConfigurationOption()}\n                        onChange={this.handleConfigurationChange}\n                    >\n                        {this.renderConfigurationOptions()}\n                    </Select>\n                </Grid>\n            );\n            //not configurable return empty string\n        } else return \"\";\n    }\n\n    componentDidMount() {\n        this.controller\n            .getData(this.controller.getCurrentConfigurationOption())\n            .then((data) => this.setState({ data: data }));\n    }\n\n    renderChart() {\n        if (this.state.data === null) {\n            return (\n                <Grid\n                    container\n                    justify=\"center\"\n                    alignContent=\"center\"\n                    style={this.styles.diagram}\n                >\n                    <CircularProgress />\n                </Grid>\n            );\n        } else {\n            return (\n                <Chart\n                    width={this.styles.diagram.width}\n                    height={this.styles.diagram.height}\n                    chartType={this.controller.getChartType()}\n                    options={this.controller.getGraphicsOptions()}\n                    loader={\n                        <Grid\n                            container\n                            justify=\"center\"\n                            alignContent=\"center\"\n                            style={this.styles.diagram}\n                        >\n                            <CircularProgress />\n                        </Grid>\n                    }\n                    data={this.state.data}\n                />\n            );\n        }\n    }\n\n    //render component\n    render() {\n        return (\n            <Card>\n                <div style={this.styles.header}>\n                    <Grid container justify=\"space-between\" alignItems=\"center\">\n                        <Grid item>\n                            <Typography variant=\"subtitle1\">\n                                {Language.getInstance().getText(\n                                    this.controller.getID() + \"_Name\"\n                                ) +\n                                    \" - \" +\n                                    this.controller.feature.getName() +\n                                    \" [\" +\n                                    this.controller.feature.getUnitOfMeasurement() +\n                                    \"]\"}\n                            </Typography>\n                        </Grid>\n                        {this.renderDiagramConfiguration()}\n                    </Grid>\n                </div>\n                <Divider />\n                {this.renderChart()}\n            </Card>\n        );\n    }\n}\n\nexport interface IDiagramProps {\n    controller: IDiagramController;\n}\n\ninterface IDiagramState {\n    data: Array<Array<Date | number | string | null>> | null;\n}\n","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n"],"sourceRoot":""}