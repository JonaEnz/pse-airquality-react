{"version":3,"sources":["Jsons sync /^/.*$","serviceWorker.ts","Model/Viewport.ts","Model/Position.ts","Controller/Storage/Language.ts","View/MapPage/FeatureInfo.tsx","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapConfiguration.ts","Model/Polygon.ts","Model/Color.ts","Model/ObservationStation.ts","Model/Observation.ts","Controller/TestConfiguration.ts","Model/Scale.ts","Model/Feature.ts","Controller/FROST/MockDataProvider.ts","Controller/NearConfiguration.ts","Controller/FeatureProvider.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/DetailPage.tsx","View/AboutPage.tsx","View/PrivacyPolicyPage.tsx","View/LayoutComponents/LanguageMenu.tsx","View/LayoutComponents/PageMenu.tsx","View/Layout.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","Position","latitude","longitude","Math","abs","lat","lng","round","toString","Language","selectedLangId","languages","selectedLang","languageData","text","strings","alert","name","languageID","find","undefined","localStorage","setItem","langs","Map","forEach","element","set","languageInstance","local","getItem","changeLanguage","useStyles","makeStyles","theme","createStyles","typography","padding","spacing","icon","background","palette","primary","main","marginBottom","FeatureInfo","props","classes","React","useState","anchorEl","setAnchorEl","open","Avatar","className","aria-describedby","onClick","event","currentTarget","style","visibility","feature","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","getDescription","language","getInstance","StationInfo","href","lastObservation","getObservationStation","getId","station","Grid","alignContent","direction","variant","color","getName","getPosition","getString","container","item","xs","getFeature","display","getValue","getUnitOfMeasurement","Button","openDetails","minWidth","getText","Component","require","nextViewport","lock","state","viewport","pin","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","setTimeout","updateViewport","modelView","viewportLeafletToModel","onViewportChange","setState","polygon","getStations","obsSt","getCoordinates","getCenter","getZoom","v","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","Popup","onOpen","handlePopup","polygons","positions","getPositionsFromPolygon","MapPin","value","MapConfiguration","obsStation","getScale","Polygon","stations","Color","r","g","b","floor","TypeError","toHex","n","hex","toUpperCase","length","exec","parseInt","ObservationStation","description","availableFeatures","found","counter","Observation","observationStation","timestamp","TestConfiguration","view","random","Date","now","values","index","getLatestObservationMock","push","avgValue","reduce","acc","c","getFeatures","getRelatedScale","features","Scale","linearTransition","colors","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","i","sort","tempDict","lowerIndex","a","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","Feature","nameId","descriptionId","scale","relatedWeblinkId","limit","unitOfMeasurement","drawableDiagramIds","observation","MockDataProvider","randomColor","getLatitude","getLongitude","count","obs","mockStation","mockFeature","radius","mockObservations","start","end","frequency","middle","NearConfiguration","selectedFeature","observations","min","apply","p","max","sc","key","val","getLimit","getObservationStations","getLatestObservations","buildNearScale","buildMapPin","FeatureProvider","path","context","definition","f","defaultScale","webLinkId","diagrams","featureId","includes","getFeatureById","json","instance","PATH","PolygonConfiguration","obsStations","getRadius","vertices","getLatestObservation","pos","Delaunay","Point","tris","triangulate","polys","triangle","s1","p1","x","y","s2","p2","s3","p3","StationConfiguration","DEFAULT_CONF","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","JSON","stringify","type","constructor","ls","parse","obj","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","save","getPins","getPolygons","searchTerm","fetch","encodeURIComponent","response","updateCurrentPosition","lon","setCenter","console","log","root","formControl","margin","FeatureSelect","setOpen","setFeature","setConfig","changeConfig","testConf","onConfigurationChange","nearConf","polyConf","stationConf","Card","CardContent","FormControl","InputLabel","Select","onChange","target","MenuItem","Search","locationEnabled","navigator","permissions","query","then","status","geolocation","getCurrentPosition","res","coords","updatePosition","err","Paper","TextField","input","label","onKeyPress","onSearch","IconButton","locationClick","iconButton","Divider","orientation","divider","disabled","withStyles","alignItems","width","maxWidth","marginLeft","flex","height","box","backgroundColor","getStyleFromScale","grad","slice","Legend","Box","border","MapPage","mapController","selectedStation","getViewport","handleViewportChange","selectObservation","term","search","isFinite","getMin","getMax","onStationSelected","update","zIndex","bottom","right","ErrorPage","message","DetailPage","observationStationId","params","observationStationExists","errorMessage","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","getSelectedLanguage","handleClick","bind","handleClose","getAvailabeleLanguages","lang","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","langList","PageMenu","toogleDrawer","toogle","AppBar","Toolbar","component","Link","to","textDecoration","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","exact","createMuiTheme","green","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1eb129d7.chunk.js","sourcesContent":["var map = {\n\t\"./MockFeature\": 88,\n\t\"./MockFeature.json\": 88\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 134;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n}\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n  id: string;\n  name: string;\n  strings: Strings;\n}\n\ninterface Strings {\n  [id: string]: string;\n}\n\nexport default class Language {\n  private static languageInstance: Language;\n\n  private selectedLangId: string;\n  private languages: Lang[];\n  private selectedLang: Lang;\n\n  constructor() {\n    this.selectedLangId = \"de-de\";\n    this.languages = languageData.languages;\n    this.selectedLang = this.languages[0];\n  }\n\n  public static getInstance(): Language {\n    if (!this.languageInstance) {\n      this.languageInstance = new Language();\n      var local = localStorage.getItem(\"language\");\n      if (local) {\n        //Change language if selected\n        this.languageInstance.changeLanguage(local);\n      }\n    }\n    return this.languageInstance;\n  }\n\n  public getText(id: string): string {\n    let text: string = this.selectedLang.strings[id];\n    if (text === \"\" || text == null) {\n      alert(\n        \"There is no string with id: \" +\n          id +\n          \" in \" +\n          this.selectedLang.name +\n          \".\"\n      );\n      return \"STRING MISSING\";\n    }\n    return text;\n  }\n\n  public getSelectedLanguage(): string {\n    return this.selectedLang.name;\n  }\n\n  public getSelectedLanguageId(): string {\n    return this.selectedLang.id;\n  }\n\n  public changeLanguage(languageID: string): void {\n    let find: Lang | undefined = this.languages.find(\n      (e) => e.id === languageID\n    );\n    if (find !== undefined) {\n      this.selectedLang = find;\n      this.selectedLangId = languageID;\n      localStorage.setItem(\"language\", this.selectedLangId);\n    }\n  }\n\n  public getAvailabeleLanguages(): Map<string, string> {\n    let langs: Map<string, string> = new Map<string, string>();\n    this.languages.forEach((element) => {\n      langs.set(element.id, element.name);\n    });\n    return langs;\n  }\n}\n","import React from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { Avatar } from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/InfoRounded\";\nimport { Feature } from \"../../Model/Feature\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        typography: {\n            padding: theme.spacing(2),\n        },\n        icon: {\n            background: theme.palette.primary.main,\n            marginBottom: \"10px\",\n        },\n    })\n);\n\ninterface IProps {\n    feature: Feature | null | undefined;\n}\n\nexport default function FeatureInfo(props: IProps) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<HTMLImageElement | null>(\n        null\n    );\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? \"simple-popover\" : undefined;\n\n    return (\n        <div>\n            <Avatar\n                className={classes.icon}\n                aria-describedby={id}\n                onClick={handleClick}\n                style={{ visibility: props.feature ? \"visible\" : \"hidden\" }}\n            >\n                <InfoIcon />\n            </Avatar>\n            <Popover\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"center\",\n                }}\n                transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"center\",\n                }}\n            >\n                <Typography className={classes.typography}>\n                    {props.feature?.getDescription() ?? \"\"}\n                </Typography>\n            </Popover>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport Language from \"../../Controller/Storage/Language\";\nimport FeatureInfo from \"./FeatureInfo\";\n\nlet language: Language = Language.getInstance();\n\ninterface State {}\ninterface Props {\n    lastObservation: Observation;\n}\n\nconst DETAIL_PATH = \"detail/\";\n\nexport class StationInfo extends React.Component<Props, State> {\n    openDetails() {\n        window.location.href =\n            DETAIL_PATH +\n            this.props.lastObservation.getObservationStation().getId();\n    }\n\n    render() {\n        var station = this.props.lastObservation.getObservationStation();\n        return (\n            <Grid alignContent=\"center\" direction=\"column\" spacing={5}>\n                <Typography variant=\"h4\" color=\"secondary\">\n                    {station.getName()}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    {station.getPosition().getString()}\n                </Typography>\n                <Typography variant=\"h6\">\n                    <Grid container direction=\"row\" spacing={2}>\n                        <Grid item xs>\n                            <FeatureInfo\n                                feature={this.props.lastObservation.getFeature()}\n                            />\n                        </Grid>\n                        <Grid item xs>\n                            {this.props.lastObservation.getFeature().getName() +\n                                \":\"}\n                        </Grid>\n                        <Grid item xs>\n                            <Typography\n                                variant=\"h6\"\n                                display=\"inline\"\n                                color=\"primary\"\n                            >\n                                {this.props.lastObservation.getValue()}{\" \"}\n                                {this.props.lastObservation\n                                    .getFeature()\n                                    .getUnitOfMeasurement()}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Typography>\n                <Button\n                    onClick={() => this.openDetails()}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{ minWidth: \"250px\" }}\n                >\n                    {language.getText(\"stationInfoButton\")}\n                </Button>\n            </Grid>\n        );\n    }\n}\n","import \"./Map.css\";\nimport React from \"react\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\n\nimport {\n    Map as LeafletMap,\n    TileLayer,\n    Marker,\n    Polygon as LeafletPolygon,\n    Viewport as LeafletViewport,\n    Popup,\n} from \"react-leaflet\";\nimport { Position } from \"../../Model/Position\";\nimport { StationInfo } from \"./StationInfo\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nrequire(\"leaflet-iconmaterial\");\ninterface State {\n    viewport: Viewport;\n}\n\ninterface Props {\n    onViewportChange: (viewport: Viewport) => void;\n    handlePopup: (pin: MapPin) => void;\n    viewport: Viewport;\n    pins: MapPin[];\n    polygons: Polygon[];\n    lastObservation: Observation | null;\n}\n\nexport class Map extends React.Component<Props, State> {\n    nextViewport: LeafletViewport | null;\n    lock: boolean;\n    constructor(props: Props) {\n        super(props);\n        this.lock = false;\n        this.nextViewport = null;\n        this.state = {\n            viewport: this.props.viewport,\n        };\n    }\n\n    private getIconFromMapPin(pin: MapPin): L.Icon {\n        // Custom icons with colors\n        //TODO: Add warning if limit is reached? (requires design change)\n        // @ts-ignore\n        var icon = L.IconMaterial.icon({\n            icon: \"\", // Name of Material icon\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\n            markerColor: pin.getColor().getHex(), // Marker fill color\n            outlineColor: \"black\", // Marker outline color\n            outlineWidth: 1, // Marker outline width\n        });\n        return icon;\n    }\n\n    private onViewportChange(viewport: LeafletViewport) {\n        this.nextViewport = viewport;\n        if (!this.lock) {\n            this.lock = true;\n            setTimeout(\n                () => this.updateViewport(this.nextViewport as LeafletViewport),\n                250\n            );\n        }\n    }\n\n    private updateViewport(viewport: LeafletViewport) {\n        var modelView = this.viewportLeafletToModel(viewport);\n        this.props.onViewportChange(modelView);\n\n        this.setState({ viewport: modelView });\n        this.lock = false;\n    }\n\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\n        return new Viewport(\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\n            viewport.zoom ?? 0\n        );\n    }\n\n    private getPositionsFromPolygon(\n        polygon: Polygon\n    ): { lat: number; lng: number }[] {\n        return polygon\n            .getStations()\n            .map((obsSt: ObservationStation) =>\n                obsSt.getPosition().getCoordinates()\n            );\n    }\n\n    render() {\n        return (\n            <div>\n                <LeafletMap\n                    center={this.state.viewport.getCenter().getCoordinates()}\n                    zoom={this.state.viewport.getZoom()}\n                    onViewportChange={(v) => this.onViewportChange(v)}\n                >\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {this.props.pins.map((pin) => (\n                        <Marker\n                            position={pin.getPosition().getCoordinates()}\n                            icon={this.getIconFromMapPin(pin)}\n                        >\n                            <Popup onOpen={() => this.props.handlePopup(pin)}>\n                                {this.props.lastObservation ? (\n                                    <StationInfo\n                                        lastObservation={\n                                            this.props.lastObservation\n                                        }\n                                    />\n                                ) : (\n                                    <p>No station selected</p>\n                                )}\n                            </Popup>\n                        </Marker>\n                    ))}\n                    {this.props.polygons.map((polygon) => (\n                        <LeafletPolygon\n                            positions={this.getPositionsFromPolygon(polygon)}\n                            color={polygon.getColor().getHex()}\n                        />\n                    ))}\n                </LeafletMap>\n            </div>\n        );\n    }\n}\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../Model/Viewport\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\n\nexport default abstract class MapConfiguration {\n    protected buildMapPin(\n        obsStation: ObservationStation,\n        value: number\n    ): MapPin {\n        return new MapPin(\n            obsStation.getId(),\n            obsStation.getPosition(),\n            value,\n            this.getScale().getColor(value)\n        );\n    }\n    abstract getPins(view: Viewport): MapPin[];\n    abstract getPolygons(view: Viewport): Polygon[];\n    abstract getScale(): Scale;\n    abstract getFeatures(): Feature[];\n}\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        if (n < 0 || n > 255) {\n            return this.toHex(0); //This should never happen, only for reusing this method later.\n        }\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import { Position } from './Position';\nimport { Feature } from './Feature';\n\nexport class ObservationStation {\n    private id: string;\n    private name: string;\n    private description: string;\n    private position: Position;\n    private availableFeatures: Feature[];\n\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.position = position;\n        this.availableFeatures = availableFeatures;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public getPosition(): Position {\n        return this.position;\n    }\n\n    public getFeatures(): Feature[] {\n        return this.availableFeatures;\n    }\n\n    public getDiagramms(): void {\n\n    }\n\n    public hasFeature(feature: Feature): boolean {\n        //Not sure if this works \n        var found: boolean = false;\n        var length: number = this.availableFeatures.length;\n        for (var counter: number = 0; counter < length; counter++) {\n            if (feature === this.availableFeatures[counter]) {\n                found = true;\n            }\n        }\n        return found;\n    }\n}","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { Feature } from \"../Model/Feature\";\nimport { Color } from \"../Model/Color\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\nimport { Position } from \"../Model/Position\";\nimport { Observation } from \"../Model/Observation\";\n\nexport default class TestConfiguration extends MapConfiguration {\n    private feature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.feature = feature;\n    }\n\n    getPins(view: Viewport): MapPin[] {\n        return [\n            new MapPin(\n                view.getCenter().getString(),\n                view.getCenter(),\n                10,\n                new Color(\n                    Math.random() * 255,\n                    Math.random() * 255,\n                    Math.random() * 255\n                )\n            ),\n        ];\n    }\n\n    private async getLatestObservationMock(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        return new Observation(\n            station,\n            feature,\n            Math.random() * 50,\n            new Date(Date.now())\n        );\n    }\n\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\n        var stations = polygon.getStations();\n        var values = [];\n        for (let index = 0; index < stations.length; index++) {\n            var v = await this.getLatestObservationMock(\n                stations[index],\n                this.feature\n            );\n            values.push(v.getValue());\n        }\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\n        return this.getScale().getColor(avgValue);\n    }\n\n    getPolygons(view: Viewport): Polygon[] {\n        return [\n            new Polygon(\n                [\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.4),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(49, 8.5),\n                        []\n                    ),\n                    new ObservationStation(\n                        \"1\",\n                        \"1\",\n                        \"\",\n                        new Position(50, 8.45),\n                        []\n                    ),\n                ],\n                new Color(0, 0, 0)\n            ),\n        ];\n    }\n\n    getScale(): Scale {\n        return this.getFeatures()[0].getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.feature];\n    }\n\n    setFeatures(features: Feature[]) {\n        if (features.length === 0) {\n            return; //no elements in array\n        }\n        this.feature = features[0];\n    }\n}\n","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import { Scale } from \"./Scale\";\nimport { Observation } from \"./Observation\";\nimport { ObservationStation } from \"./ObservationStation\";\nimport Language from \"../Controller/Storage/Language\";\nimport Diagram from \"../View/Diagram\";\n\nlet language = Language.getInstance();\n\nexport class Feature {\n    private id: string;\n    private nameId: string;\n    private descriptionId: string;\n    private scale: Scale;\n    private relatedWeblinkId: string;\n    private limit: number;\n    private unitOfMeasurement: string;\n    private drawableDiagramIds: string[];\n\n    constructor(\n        id: string,\n        nameId: string,\n        descriptionId: string,\n        scale: Scale,\n        relatedWeblinkId: string,\n        limit: number,\n        unitOfMeasurement: string,\n        drawableDiagramIds: string[]\n    ) {\n        this.id = id;\n        this.nameId = nameId;\n        this.descriptionId = descriptionId;\n        this.scale = scale;\n        this.relatedWeblinkId = relatedWeblinkId;\n        this.limit = limit;\n        this.unitOfMeasurement = unitOfMeasurement;\n        this.drawableDiagramIds = drawableDiagramIds;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        //return Language.getText(this.nameId);\n        return this.nameId;\n    }\n\n    public getDescription(): string {\n        //return Language.getText(this.descriptionId);\n        return this.descriptionId;\n    }\n\n    public getRelatedScale(): Scale {\n        return this.scale;\n    }\n\n    public getRelatedWeblink(): string {\n        //return Language.getText(this.relatedWeblinkId);\n        return this.relatedWeblinkId;\n    }\n\n    //Todo: implement Method\n    public getDrawableDiagrams(\n        observationStation: ObservationStation\n    ): Diagram[] {\n        var diagrams: Diagram[] = [];\n        return diagrams;\n    }\n\n    public getLimit(): number {\n        return this.limit;\n    }\n\n    public getUnitOfMeasurement(): string {\n        return this.unitOfMeasurement;\n    }\n\n    public isLimitExceeded(observation: Observation): boolean {\n        return observation.getValue() > this.limit;\n    }\n}\n","import { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Color } from \"../../Model/Color\";\n\nexport default class MockDataProvider {\n    private static stations: { [key: string]: ObservationStation } = {};\n\n    private static randomColor(): Color {\n        return new Color(\n            Math.random() * 255,\n            Math.random() * 255,\n            Math.random() * 255\n        );\n    }\n    static mockFeature(): Feature {\n        var colors: { [key: number]: string } = {};\n        for (let index = 0; index < 5; index++) {\n            var c = this.randomColor().getHex();\n            colors[Math.floor(Math.random() * 100)] = c;\n        }\n        var scale = new Scale(true, colors);\n        return new Feature(\n            \"MockFeature\",\n            \"nameId\",\n            \"descId\",\n            scale,\n            \"weblink\",\n            100,\n            \"uoM\",\n            []\n        );\n    }\n    private static mockStation(center: Position): ObservationStation {\n        var id = Math.floor(Math.random() * 10000).toString();\n        var station = new ObservationStation(\n            id,\n            \"mockName\",\n            \"mockDesc\",\n            new Position(\n                center.getLatitude() + 6 * Math.random() - 3,\n                center.getLongitude() + 6 * Math.random() - 3\n            ),\n            []\n        );\n        MockDataProvider.stations[station.getId()] = station;\n        return station;\n    }\n    private static mockObservations(center: Position): Observation[] {\n        var count = Math.floor(Math.random() * 9) + 2;\n        var obs = [];\n        for (let i = 0; i < count; i++) {\n            obs.push(\n                new Observation(\n                    this.mockStation(center),\n                    this.mockFeature(),\n                    Math.random() * 100,\n                    new Date(Date.now())\n                )\n            );\n        }\n        return obs;\n    }\n\n    static getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Observation[] {\n        return this.mockObservations(center);\n    }\n\n    static getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Observation {\n        return new Observation(\n            station,\n            feature,\n            Math.random() * 100,\n            new Date(Date.now())\n        );\n    }\n\n    static getObservations(\n        station: ObservationStation,\n        start: Date,\n        end: Date,\n        feature: Feature,\n        frequency?: Date\n    ): Observation[] {\n        throw new Error(\"Not implemented.\");\n    }\n\n    static getObservationStations(\n        middle: Position,\n        radius: number\n    ): ObservationStation[] {\n        var obs = [];\n        for (let index = 0; index < 7; index++) {\n            obs.push(this.mockStation(middle));\n        }\n        return obs;\n    }\n\n    static getStation(id: string): ObservationStation {\n        return MockDataProvider.stations[id];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { MapPin } from \"../Model/MapPin\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { Feature } from \"../Model/Feature\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport { Observation } from \"../Model/Observation\";\nimport { ObservationStation } from \"../Model/ObservationStation\";\nimport { strict } from \"assert\";\n\nexport default class NearConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n    private scale: Scale;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n        this.scale = this.selectedFeature.getRelatedScale();\n    }\n\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\n        return new MapPin(\n            obs.getId(),\n            obs.getPosition(),\n            value,\n            this.scale.getColor(value)\n        );\n    }\n\n    private buildNearScale(observations: Observation[]): Scale {\n        var min = Math.min.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n        var max = Math.max.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n\n        var sc: { [key: number]: string } = {};\n        // Sample 10 times between 0 => min and limit of feature => max\n        for (let index = 0; index < 10; index++) {\n            var key = Math.floor(min + (max - min) * (index / 10));\n            var val = this.selectedFeature.getLimit() * (index / 10);\n            sc[key] = this.selectedFeature\n                .getRelatedScale()\n                .getColor(val)\n                .getHex();\n        }\n        return new Scale(true, sc);\n    }\n\n    getPins(view: Viewport): MapPin[] {\n        var obs = MockDataProvider.getObservationStations(\n            view.getCenter(),\n            view.getZoom()\n        );\n        var observations = MockDataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n\n        this.scale = this.buildNearScale(observations);\n\n        var pins: MapPin[] = [];\n        obs.forEach((o) => {\n            pins.push(this.buildMapPin(o, Math.floor(Math.random() * 100)));\n        });\n        return pins;\n    }\n    getPolygons(view: Viewport): Polygon[] {\n        return [];\n    }\n    getScale(): Scale {\n        return this.scale;\n    }\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport fs from \"fs\";\n\nexport default class FeatureProvider {\n    private static PATH = \"../Jsons/\";\n    private path: string;\n    private context: any;\n    private features: { [id: string]: Feature };\n    private static instance: FeatureProvider | null = null;\n\n    constructor(path: string) {\n        this.path = path;\n        this.features = {};\n        this.context = require.context(\"../Jsons/\", true);\n        //this.addFeature(b(test));\n    }\n\n    static getInstance(): FeatureProvider {\n        if (!this.instance) {\n            this.instance = new FeatureProvider(this.PATH);\n        }\n        return this.instance;\n    }\n\n    private addFeature(definition: FeatureDefinition) {\n        if (definition) {\n            var f = new Feature(\n                definition.id,\n                definition.nameId,\n                definition.descriptionId,\n                new Scale(true, definition.defaultScale),\n                definition.webLinkId,\n                definition.limit,\n                definition.unitOfMeasurement,\n                definition.diagrams\n            );\n            this.features[f.getId()] = f;\n        }\n    }\n\n    getFeature(featureId: string): Feature {\n        if (Object.keys(this.features).includes(featureId)) {\n            return this.features[featureId];\n        } else {\n            var f = this.getFeatureById(featureId);\n            if (f) {\n                //Successfully read feature json\n                this.features[featureId] = f;\n                return f;\n            } else {\n                throw new Error(\n                    \"Failed at reading definition for \" + featureId\n                );\n            }\n        }\n    }\n\n    private getFeatureById(featureId: string): Feature | null {\n        var json = this.context(\"./\" + featureId + \".json\");\n\n        if (!json) {\n            return null; //Failed to read file\n        }\n        var definition = json as FeatureDefinition;\n        return new Feature(\n            definition.id,\n            definition.nameId,\n            definition.descriptionId,\n            new Scale(true, definition.defaultScale),\n            definition.webLinkId,\n            definition.limit,\n            definition.unitOfMeasurement,\n            definition.diagrams\n        );\n    }\n}\n\ninterface FeatureDefinition {\n    id: string;\n    nameId: string;\n    unitOfMeasurement: string;\n    descriptionId: string;\n    defaultScale: { [key: number]: string };\n    webLinkId: string;\n    limit: number;\n    diagrams: string[];\n}\n","import MapConfiguration from \"../MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Feature } from \"../../Model/Feature\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport MockDataProvider from \"../FROST/MockDataProvider\";\n//@ts-ignore\nimport Delaunay from \"delaunay-triangulation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\n\nexport default class PolygonConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    getPins(view: Viewport): MapPin[] {\n        return [];\n    }\n\n    getPolygons(view: Viewport): Polygon[] {\n        var obsStations = MockDataProvider.getObservationStations(\n            view.getCenter(),\n            view.getRadius()\n        );\n        var stations: {\n            [key: string]: Observation;\n        } = {};\n        var vertices: Delaunay.Point[] = [];\n        obsStations.forEach((station) => {\n            var observation = MockDataProvider.getLatestObservation(\n                station,\n                this.selectedFeature\n            );\n            var pos = station.getPosition().getCoordinates();\n            vertices.push(new Delaunay.Point(pos.lat, pos.lng));\n            stations[station.getPosition().getString()] = observation;\n        });\n\n        var tris = Delaunay.triangulate(vertices);\n        var polys: Polygon[] = [];\n        tris.forEach((triangle: any) => {\n            var s1 =\n                stations[\n                    new Position(triangle.p1.x, triangle.p1.y).getString()\n                ];\n            var s2 =\n                stations[\n                    new Position(triangle.p2.x, triangle.p2.y).getString()\n                ];\n            var s3 =\n                stations[\n                    new Position(triangle.p3.x, triangle.p3.y).getString()\n                ];\n            var avgValue = (s1.getValue() + s2.getValue() + s3.getValue()) / 3;\n            polys.push(\n                new Polygon(\n                    [\n                        s1.getObservationStation(),\n                        s2.getObservationStation(),\n                        s3.getObservationStation(),\n                    ],\n                    this.getScale().getColor(avgValue)\n                )\n            );\n        });\n\n        return polys;\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Scale } from \"../Model/Scale\";\nimport { Polygon } from \"../Model/Polygon\";\nimport { MapPin } from \"../Model/MapPin\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport { Feature } from \"../Model/Feature\";\n\nexport default class StationConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    getPins(view: Viewport): MapPin[] {\n        var obs = MockDataProvider.getObservationStations(view.getCenter(), 0);\n        //var latestObs = MockDataProvider.getLatestObservations(view.getCenter(), view.getZoom(), this.selectedFeature);\n        return obs.map((o) => this.buildMapPin(o, Math.random() * 100));\n    }\n\n    getPolygons(view: Viewport): Polygon[] {\n        return [];\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport TestConfiguration from \"../TestConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport NearConfiguration from \"../NearConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\nimport StationConfiguration from \"../StationConfiguration\";\n\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\nconst DEFAULT_CONF = new StationConfiguration(\n    FeatureProvider.getInstance().getFeature(\"MockFeature\")\n);\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\n\nexport default class MapConfigurationMemory {\n    static save(conf: MapConfiguration, view: Viewport) {\n        localStorage.setItem(\n            LOCALSTORAGE_MAPCONF,\n            JSON.stringify({\n                type: conf.constructor.name,\n                feature: conf.getFeatures()[0].getId(),\n                view: view,\n            })\n        );\n    }\n\n    static load(): [MapConfiguration, Viewport] {\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\n        if (\n            ls &&\n            (JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: Viewport;\n            })\n        ) {\n            //return configuration if it exists\n            var obj = JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: any;\n            };\n            var view = new Viewport(\n                new Position(\n                    obj.view.center.latitude,\n                    obj.view.center.longitude\n                ),\n                obj.view.zoom\n            );\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\n            if (obj.type === \"NearConfiguration\") {\n                return [new NearConfiguration(feature), view];\n            } else if (obj.type === \"PolygonConfiguration\") {\n                return [new PolygonConfiguration(feature), view];\n            } else if (obj.type === \"StationConfiguration\") {\n                return [new StationConfiguration(feature), view];\n            } else {\n                return [new TestConfiguration(feature), view];\n            }\n        }\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\n    }\n}\n","import { MapPin } from \"../Model/MapPin\";\nimport { Viewport } from \"../Model/Viewport\";\nimport { Position } from \"../Model/Position\";\nimport { Observation } from \"../Model/Observation\";\nimport { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport { Polygon } from \"../Model/Polygon\";\nimport MapConfiguration from \"./MapConfiguration\";\nimport MapConfigurationMemory from \"./Storage/MapConfigurationMemory\";\nimport MockDataProvider from \"./FROST/MockDataProvider\";\nimport PolygonConfiguration from \"./MapPage/PolygonConfiguration\";\n\nexport class MapController {\n    private config: MapConfiguration;\n    private viewport: Viewport;\n\n    private DEFAULT_POSITION: Position = new Position(49, 8.4);\n    private DEFAULT_ZOOM: number = 5;\n\n    constructor(useMemory: boolean = true) {\n        if (useMemory) {\n            var mcm = MapConfigurationMemory.load();\n            this.config = mcm[0];\n            this.viewport = mcm[1];\n        } else {\n            this.viewport = new Viewport(\n                this.DEFAULT_POSITION,\n                this.DEFAULT_ZOOM\n            );\n            this.config = new PolygonConfiguration(\n                MockDataProvider.mockFeature()\n            );\n        }\n        if (this.config.getFeatures().length === 0) {\n            throw Error(\"Invalid MapConfiguration\");\n        }\n    }\n\n    handlePopup(pin: MapPin): Observation {\n        var station = MockDataProvider.getStation(pin.getId());\n        return MockDataProvider.getLatestObservation(\n            station,\n            this.config.getFeatures()[0]\n        );\n    }\n\n    private save() {\n        MapConfigurationMemory.save(this.config, this.viewport);\n    }\n\n    getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    handleViewportChange(viewport: Viewport) {\n        this.viewport = viewport;\n        this.save();\n    }\n\n    getPins(): MapPin[] {\n        return this.config.getPins(this.viewport);\n    }\n\n    getPolygons(): Polygon[] {\n        return this.config.getPolygons(this.viewport);\n    }\n\n    getScale(): Scale {\n        return this.config.getScale();\n    }\n\n    changeFeature(feature: Feature) {\n        //TODO\n    }\n\n    onConfigurationChange(conf: MapConfiguration) {\n        this.config = conf;\n        this.save();\n    }\n\n    async search(searchTerm: string) {\n        if (searchTerm.length === 0) {\n            return; //No search possible\n        }\n\n        var response = await fetch(\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\n                encodeURIComponent(searchTerm)\n        );\n        var json = await response.json();\n        if (json.length === 0) {\n            return; //No location found\n        }\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\n    }\n\n    updateCurrentPosition(position: Position) {\n        this.viewport.setCenter(position);\n        console.log(position);\n    }\n}\n","import React, { useState } from \"react\";\nimport {\n    Avatar,\n    Card,\n    CardContent,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport MapConfiguration from \"../../Controller/MapConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\nimport NearConfiguration from \"../../Controller/NearConfiguration\";\nimport StationConfiguration from \"../../Controller/StationConfiguration\";\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\ninterface Props {\n    onConfigurationChange(mapConfig: MapConfiguration): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: theme.palette.primary.main,\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n    })\n);\n\nexport default function FeatureSelect(props: Props) {\n    const TEST_CONFIG = \"TestConfiguration\";\n    const NEAR_CONFIG = \"NearConfiguration\";\n    const POLY_CONFIG = \"PolygonConfiguration\";\n    const STATION_CONFIG = \"StationConfiguration\";\n    const classes = useStyles();\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\n    const [feature, setFeature] = useState<Feature | null>(\n        FeatureProvider.getInstance().getFeature(\"MockFeature\")\n    );\n    const [config, setConfig] = useState<string | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setOpen(open ? null : event.currentTarget);\n    };\n\n    const changeConfig = (conf: string, feature: Feature) => {\n        console.log(conf);\n        setConfig(conf);\n        switch (conf) {\n            case TEST_CONFIG:\n                var testConf = new TestConfiguration(feature); //Create new config\n                props.onConfigurationChange(testConf);\n                break;\n            case NEAR_CONFIG:\n                var nearConf = new NearConfiguration(feature); //Create new config\n                props.onConfigurationChange(nearConf);\n                break;\n            case POLY_CONFIG:\n                var polyConf = new PolygonConfiguration(feature); //Create new config\n                props.onConfigurationChange(polyConf);\n                break;\n            case STATION_CONFIG:\n                var stationConf = new StationConfiguration(feature); //Create new config\n                props.onConfigurationChange(stationConf);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleFeatureChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        setFeature(\n            FeatureProvider.getInstance().getFeature(\n                event.target.value as string\n            ) //Feature Id\n        );\n\n        if (feature) {\n            if (config) {\n                changeConfig(config, feature);\n            } else {\n                throw new Error(\"No config selected\");\n            }\n        }\n    };\n\n    const handleConfigChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        if (!feature) {\n            return; //A feature has to be selected, should never happen.\n        }\n        changeConfig(event.target.value as string, feature);\n        //window.location.reload(); //Reload with new config\n    };\n\n    return (\n        <div>\n            <Avatar className={classes.root} onClick={handleClick}>\n                <LayersIcon />\n            </Avatar>\n            {open ? (\n                <Card variant=\"outlined\">\n                    <CardContent>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>{\"Feature\"}</InputLabel>\n                            <Select\n                                onChange={handleFeatureChange}\n                                value={feature?.getName() ?? \"\"}\n                            >\n                                <MenuItem>Features here when</MenuItem>\n                                <MenuItem>\n                                    FeatureProvider getFeatures()\n                                </MenuItem>\n                            </Select>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel>{\"Style\"}</InputLabel>\n                            <Select\n                                onChange={handleConfigChange}\n                                value={config ?? \"ERROR\"}\n                            >\n                                <MenuItem value={POLY_CONFIG}>\n                                    {POLY_CONFIG}\n                                </MenuItem>\n                                <MenuItem value={STATION_CONFIG}>\n                                    {STATION_CONFIG}\n                                </MenuItem>\n                                <MenuItem value={NEAR_CONFIG}>\n                                    {NEAR_CONFIG}\n                                </MenuItem>\n                            </Select>\n                        </FormControl>\n                    </CardContent>\n                </Card>\n            ) : (\n                \"\"\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    TextField,\n    Paper,\n    IconButton,\n    Divider,\n    Theme,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LocationIcon from \"@material-ui/icons/LocationOn\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({\n    root: {\n        margin: \"5px 5px\",\n        padding: \"2px 4px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        width: \"100%\",\n        maxWidth: \"500px\",\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n});\n\nlet language = Language.getInstance();\n\ninterface Props {\n    classes: any;\n    onSearch(term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nclass Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Paper className={this.props.classes.root}>\n                <TextField\n                    type=\"search\"\n                    variant=\"outlined\"\n                    className={this.props.classes.input}\n                    label={language.getText(\"search\")}\n                    onKeyPress={(e) => {\n                        if (e.key === \"Enter\") {\n                            this.props.onSearch(this.state.searchTerm); //Enter key was pressed, search for this.state.searchTerm\n                        }\n                    }}\n                    onChange={(e) => {\n                        this.setState({ searchTerm: e.target.value });\n                    }}\n                    value={this.state.searchTerm}\n                />\n                <IconButton\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                >\n                    <SearchIcon />\n                </IconButton>\n                <Divider\n                    orientation=\"vertical\"\n                    className={this.props.classes.divider}\n                />\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                    disabled={!this.state.locationEnabled}\n                >\n                    <LocationIcon />\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles)(Search);\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        box: {\n            padding: theme.spacing(1),\n            width: \"50px\",\n            backgroundColor: \"white\"\n        },\n    })\n);\n\ninterface Props {\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"80px\",\n        width: \"40px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Box className={classes.box} border={1}>\n            <Grid container direction=\"column\">\n                <Typography variant=\"body2\">{props.max}</Typography>\n                <Box\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">{props.min}</Typography>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Legend;\n","import React from \"react\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Map } from \"./Map\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapController } from \"../../Controller/MapController\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport FeatureSelect from \"./FeatureSelect\";\nimport Search from \"./Search\";\nimport Legend from \"./Legend\";\nimport { Box, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst styles = (theme: Theme) => ({});\n\ninterface State {\n    selectedStation: ObservationStation | null;\n    lastObservation: Observation | null;\n    pins: MapPin[];\n    polygons: Polygon[];\n    viewport: Viewport;\n}\n\ninterface Props {\n    classes: any;\n}\n\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\n\nclass MapPage extends React.Component<Props, State> {\n    mapController: MapController;\n\n    constructor(props: Props) {\n        super(props);\n        this.mapController = new MapController();\n\n        this.state = {\n            selectedStation: null,\n            lastObservation: null,\n            pins: this.mapController.getPins(),\n            polygons: this.mapController.getPolygons(),\n            viewport: this.mapController.getViewport(),\n        };\n    }\n\n    selectObservation(observation: Observation) {\n        this.setState({\n            selectedStation: observation.getObservationStation(),\n            lastObservation: observation,\n        });\n    }\n\n    update() {\n        this.setState({\n            pins: this.mapController.getPins(),\n            polygons: this.mapController.getPolygons(),\n        });\n    }\n\n    getValueAt(position: Position, feature: Feature): number {\n        throw Error(\"Not implemented.\");\n    }\n\n    onViewportChange(viewport: Viewport) {\n        this.mapController.handleViewportChange(viewport);\n        //Update Page\n        this.setState({\n            viewport: viewport,\n            pins: this.mapController.getPins(),\n            polygons: this.mapController.getPolygons(),\n        });\n    }\n\n    onStationSelected(pin: MapPin) {\n        var observation = this.mapController.handlePopup(pin);\n        this.selectObservation(observation); // set Observation (and station) for Popup\n    }\n\n    onSearch(term: string) {\n        this.mapController.search(term);\n        this.setState({ selectedStation: this.state.selectedStation });\n    }\n\n    getMin(): number {\n        var min = Math.min.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(min)) {\n            min = DEFAULT_MIN;\n        }\n        return min;\n    }\n\n    getMax(): number {\n        var max = Math.max.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(max)) {\n            max = DEFAULT_MAX;\n        }\n        return max;\n    }\n\n    render() {\n        var min = this.getMin();\n        var max = this.getMax();\n        return (\n            <Box>\n                <Search\n                    onSearch={(term) => this.onSearch(term)}\n                    updatePosition={(pos) => {\n                        var view = this.state.viewport;\n                        view.setCenter(pos);\n                        this.onViewportChange(view);\n                    }}\n                />\n                <Map\n                    viewport={this.state.viewport}\n                    onViewportChange={(viewport) => {\n                        this.onViewportChange(viewport);\n                    }}\n                    handlePopup={(pin) => this.onStationSelected(pin)}\n                    pins={this.state.pins}\n                    polygons={this.state.polygons}\n                    lastObservation={this.state.lastObservation}\n                />\n                <FeatureSelect\n                    onConfigurationChange={(conf) => {\n                        this.mapController.onConfigurationChange(conf);\n                        this.update();\n                    }}\n                />\n                <Box\n                    zIndex={1000}\n                    style={{ position: \"absolute\", bottom: \"5%\", right: \"5%\" }}\n                >\n                    <Legend\n                        min={min}\n                        max={max}\n                        scale={this.mapController.getScale()}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(MapPage);\n","import React from 'react';\nimport { Fragment } from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </Fragment>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from 'react';\nimport { Fragment } from 'react';\nimport { RouteComponentProps, Redirect } from 'react-router-dom';\nimport ErrorPage from './ErrorPage';\n\nexport default class DetailPage extends React.Component<IDetailPageProps, IDetailPageState> {\n\n    observationStationId: string;\n\n    constructor(props: IDetailPageProps) {\n        super(props);\n        this.observationStationId = this.props.match.params.id;\n    }\n\n    //Todo: Diese Methode überprüft über den DataProvider, ob eine ObservationStation mit der übergebenen id existiert\n    observationStationExists(observationStationId: string): boolean {\n        return true;\n    }\n\n    render() {\n        if (this.observationStationExists(this.observationStationId)) {\n            return (\n                <Fragment>\n                    <h1>Detail Page</h1>\n                    <p> von Messstation mit der id: {this.props.match.params.id}</p>\n                </Fragment>\n            );\n        } else {\n            var errorCode = 404;\n            //Todo: error Message sollte über eine string id in verschiedenen Sprachen abgerufen werden können\n            var errorMessage = 'There is no observation station with the id: ' + this.observationStationId;\n            return (\n                <Fragment>\n                    <ErrorPage code={errorCode} message={errorMessage} />\n                </Fragment>\n            );\n        }\n    }\n}\n\ninterface IDetailPageProps extends RouteComponentProps<{ id: string }> { }\n\ninterface IDetailPageState { }","import React from 'react';\nimport { Fragment } from 'react'\n\nexport default class AboutPage extends React.Component<IAboutPageProps, IAboutPageState> {\n    constructor(props: IAboutPageProps) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h1>AboutPage</h1>\n            </Fragment>\n        );\n    }\n}\n\ninterface IAboutPageProps { }\n\ninterface IAboutPageState { }","import React from 'react';\n\nexport default class PrivacyPolicyPage extends React.Component<IPrivacyPolicyPageProps, IPrivacyPolicyPageState> {\n    constructor(props: IPrivacyPolicyPageProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <h1>Privacy Policy Page</h1>\n        );\n    }\n}\n\ninterface IPrivacyPolicyPageProps { }\n\ninterface IPrivacyPolicyPageState { }","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n  selectedLang: string;\n  anchorEl: Element | null;\n}\n\ninterface IProps {\n  language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n  private availableLanguages: Map<string, string>;\n  private ref: any;\n  private language: Language;\n\n  constructor(props: IProps) {\n    super(props);\n    this.language = props.language;\n    this.state = {\n      selectedLang: this.language.getSelectedLanguage(),\n      anchorEl: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n    this.availableLanguages = this.language.getAvailabeleLanguages();\n  }\n\n  isSelectedLang(lang: string): boolean {\n    //return lang === this.state.selectedLang;\n    return false;\n  }\n\n  handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n    this.setState({ anchorEl: event.currentTarget });\n  }\n\n  handleClose(): void {\n    this.setState({ anchorEl: null });\n  }\n\n  handleMenuItemClick(event: React.MouseEvent<HTMLElement>, id: string): void {\n    this.language.changeLanguage(id);\n    window.location.reload();\n    this.setState({\n      anchorEl: null,\n      selectedLang: this.language.getSelectedLanguage(),\n    });\n  }\n\n  langList(): JSX.Element[] {\n    let list: JSX.Element[] = [];\n    this.availableLanguages.forEach((lang: string, id: string) => {\n      list.push(\n        <MenuItem\n          onClick={(e) => this.handleMenuItemClick(e, id)}\n          selected={id === this.language.getSelectedLanguageId()}\n        >\n          {lang}\n        </MenuItem>\n      );\n    });\n    return list;\n  }\n\n  render(): JSX.Element {\n    return (\n      <div>\n        <Button\n          onClick={this.handleClick}\n          color=\"inherit\"\n          startIcon={<Translate />}\n          endIcon={<ExpandMore />}\n          aria-controls=\"simple-menu\"\n          aria-haspopup=\"true\"\n        >\n          {this.state.selectedLang}\n        </Button>\n        <Menu\n          open={Boolean(this.state.anchorEl)}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n        >\n          {this.langList()}\n        </Menu>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQnet\n                        </Typography>\n                        <div style={{ marginLeft: 'auto' }}>\n\n                            <LanguageMenu language={this.language} />\n\n                        </div>\n                        <div>\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\n                                <MenuIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}","import React from \"react\";\nimport MapPage from \"./MapPage/MapPage\";\nimport DetailPage from \"./DetailPage\";\nimport ErrorPage from \"./ErrorPage\";\nimport AboutPage from \"./AboutPage\";\nimport PrivacyPolicyPage from \"./PrivacyPolicyPage\";\nimport PageMenu from \"./LayoutComponents/PageMenu\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Language from \"../Controller/Storage/Language\";\n\nfunction Layout() {\n  let language: Language = Language.getInstance();\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <PageMenu language={language} />\n        <Switch>\n          <Route exact path=\"/pse-airquality-react/\" component={MapPage} />\n          <Route\n            exact\n            path=\"/pse-airquality-react/detail/:id\"\n            component={DetailPage}\n          />\n          <Route\n            exact\n            path=\"/pse-airquality-react/about\"\n            component={AboutPage}\n          />\n          <Route\n            exact\n            path=\"/pse-airquality-react/privacy-policy\"\n            component={PrivacyPolicyPage}\n          />\n          {/* If no url pattern matches an error page is shown */}\n          <Route>\n            {/* Todo: Error message sollte in mehreren Sprachen abrufbar sein */}\n            <ErrorPage code={404} message=\"page not found\" />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MapPage from \"./View/MapPage/MapPage\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport green from \"@material-ui/core/colors/green\";\nimport Layout from \"./View/Layout\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: green[500],\n    },\n    secondary: {\n      main: purple[500],\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Layout />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}