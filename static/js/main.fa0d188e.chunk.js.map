{"version":3,"sources":["View/DetailPage sync /^.*$","View/DetailPage/marker_icon.svg","serviceWorker.ts","Model/Viewport.ts","View/MapPage/FeatureInfo.tsx","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapPage/MapConfiguration.ts","Model/Polygon.ts","Controller/TestConfiguration.ts","Controller/FeatureProvider.ts","Controller/FROST/MockDataProvider.ts","Controller/MapPage/NearConfiguration.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/MapPage/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapPage/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/About.tsx","View/PrivacyPolicy.tsx","View/Layout/LanguageMenu.tsx","View/Layout/PageMenu.tsx","View/Layout/Layout.tsx","Controller/Storage/Configuration.ts","index.tsx","Controller/Storage/Language.ts","Model/Position.ts","Model/Color.ts","Model/Observation.ts","Model/ObservationStation.ts","Controller/MockDataProvider.ts","Model/Scale.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastYearPieChartController.ts","Controller/DiagramController/YearComparisonLineChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","View/DetailPage/DetailPage.tsx","View/DetailPage/ObservationStationProfile.tsx","View/DetailPage/ObservationItem.tsx","View/DetailPage/LocationMap.tsx","View/DetailPage/Diagram.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","useStyles","makeStyles","theme","createStyles","typography","padding","spacing","icon","background","palette","primary","main","marginBottom","box","alignItems","display","language","Language","getInstance","FeatureInfo","props","classes","React","useState","anchorEl","setAnchorEl","open","undefined","Avatar","className","aria-describedby","onClick","event","currentTarget","style","visibility","feature","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Box","Typography","getDescription","getText","Button","color","variant","href","getRelatedWeblink","StationInfo","lastObservation","getObservationStation","getId","station","Grid","alignContent","direction","getName","getPosition","getString","container","item","xs","getFeature","Math","floor","getValue","getUnitOfMeasurement","openDetails","minWidth","Component","require","Map","nextViewport","lock","oldViewport","state","viewport","pin","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","regEx","test","iconName","exec","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","abs","getZoom","updateViewport","onViewportChange","setState","Position","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","Popup","onOpen","polygons","positions","getPositionsFromPolygon","MapPin","value","MapConfiguration","obsStation","getScale","Polygon","stations","TestConfiguration","view","Color","random","Observation","Date","now","values","index","length","getLatestObservationMock","push","avgValue","reduce","acc","c","ObservationStation","getFeatures","getRelatedScale","features","FeatureProvider","featureDefinition","forEach","f","addFeature","definition","Feature","nameId","descriptionId","Scale","defaultScale","webLinkId","limit","unitOfMeasurement","diagrams","key","featureId","includes","instance","MockDataProvider","colors","randomColor","scale","toString","getLatitude","getLongitude","count","obs","i","mockStation","mockFeature","results","r","a","n","parseFloat","sqrt","radius","q","replace","fetch","json","result","observations","element","Observations","Thing","Datastreams","flatMap","d","ObservedProperty","calculatePollutionIndex","name","Locations","coordinates","phenomenonTime","mockObservations","res","start","end","frequency","middle","query","console","log","gOSsPromise","response","isNullOrUndefined","description","NearConfiguration","selectedFeature","min","apply","p","max","sc","val","getLimit","getLatestObservations","buildNearScale","buildMapPin","PolygonConfiguration","getRadius","polys","triangulate","points","output","tri","Delaunator","from","triangles","triStations","StationConfiguration","latestObs","DEFAULT_CONF","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","localStorage","setItem","JSON","stringify","type","constructor","ls","getItem","parse","obj","latitude","longitude","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","getPins","getPolygons","searchTerm","encodeURIComponent","updateCurrentPosition","lat","lon","setCenter","root","formControl","margin","FeatureSelect","setOpen","listAllFeatures","setFeature","setConfig","useEffect","startConf","changeConfig","testConf","onConfigurationChange","nearConf","polyConf","stationConf","Card","CardContent","FormControl","InputLabel","Select","onChange","target","MenuItem","Search","locationEnabled","navigator","permissions","then","status","geolocation","getCurrentPosition","coords","updatePosition","err","Paper","TextField","input","label","onKeyPress","onSearch","IconButton","locationClick","iconButton","Divider","orientation","divider","disabled","withStyles","width","maxWidth","marginLeft","flex","height","backgroundColor","getStyleFromScale","grad","slice","Legend","border","MapPage","mapController","selectedStation","getViewport","additionalPins","update","pinPromise","polyPromsie","Promise","all","pinPoly","concat","sortedPins","sort","b","dis","disSum","temp","handleViewportChange","some","promise","changePopupStation","term","search","mp","isFinite","getMin","getMax","pos","onStationSelected","getFeatureSelectConf","zIndex","bottom","right","ErrorPage","message","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","selectedLang","getSelectedLanguage","handleClick","bind","handleClose","getAvailableLanguages","lang","changeLanguage","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","langList","PageMenu","toogleDrawer","toogle","AppBar","Toolbar","component","Link","to","textDecoration","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","basename","process","exact","path","DetailPage","Configuration","frostUrl","iConf","newConf","supportedFeatures","createMuiTheme","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","selectedLangId","languages","languageData","text","strings","languageID","find","langs","set","date","languageId","toLocaleString","languageInstance","local","pow","lng","round","g","TypeError","toHex","hex","toUpperCase","parseInt","observationStation","timestamp","availableFeatures","diagramController","getDiagramController","contr","found","counter","Array","valueOf","getFullYear","getMonth","getDate","getHours","linearTransition","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","ChartType","Timespan","languageProvider","FHLCConfigurationOption","timespan","xAxis","FeatureHistoryLineChartController","yAxisLabel","chartType","graphicsOptions","isConfigutable","defaultConfigurationOption","configurationOptions","option","configurationOptionName","configurationOption","getFHLCConfigurationOption","getStart","getObservations","data","getTimeStamp","options","LINE_CHART","ComparisonToLastYearPieChartController","isConfigurable","configuration","getCTLYPCConfigurationOption","lastObservationValue","pop","higher","lower","higherTag","lowerTag","PIE_CHART","YCLCCConfigurationOption","numberOfYears","YearComparisonLineChartController","getYCLCCConfigurationOption","cleanedObservations","filter","years","header","year","splice","dt","DataTable","addValue","dtAsArray","toArray","hAxis","format","gridlines","DTRow","numberOfValues","arrayRepresentation","dtrowA","dtrowB","rows","columnKey","rowIndex","getRowIndex","getBaseDate","columnIndex","getColumnIndex","datesAreEqual","BASE_YEAR","getMinutes","getSeconds","getMilliseconds","dateA","dateB","row","DiagramFactory","diagramMap","has","get","call","relatedWeblinkId","controllerIds","controller","styles","main_container","paddingTop","xl","lg","md","sm","justify","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","marginTop","latestObservations","randomNumber","getRandomColor","getDateString","align","renderObservationDate","renderLatestObservations","ObservationItem","feature_card","card_content","faThermometerHalf","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","paddingLeft","diagram","getDefaultConfigurationOption","handleConfigurationChange","getConfigurationOptions","renderConfigurationOptions","renderDiagramConfiguration","getChartType","getGraphicsOptions","loader","getData"],"mappings":"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","file":"static/js/main.fa0d188e.chunk.js","sourcesContent":["var map = {\n\t\"./DetailPage\": 72,\n\t\"./DetailPage.tsx\": 72,\n\t\"./Diagram\": 76,\n\t\"./Diagram.tsx\": 76,\n\t\"./LocationMap\": 75,\n\t\"./LocationMap.tsx\": 75,\n\t\"./ObservationItem\": 74,\n\t\"./ObservationItem.tsx\": 74,\n\t\"./ObservationStationProfile\": 73,\n\t\"./ObservationStationProfile.tsx\": 73,\n\t\"./marker_icon.svg\": 166\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 165;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.5891ef15.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n}\n","import React from \"react\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Avatar, Button, Box } from \"@material-ui/core\";\r\nimport InfoIcon from \"@material-ui/icons/InfoRounded\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        typography: {\r\n            padding: theme.spacing(2),\r\n        },\r\n        icon: {\r\n            background: theme.palette.primary.main,\r\n            marginBottom: \"10px\",\r\n        },\r\n        box: {\r\n            alignItems: \"center\",\r\n            display: \"flex\",\r\n            padding: \"1px\",\r\n        },\r\n    })\r\n);\r\n\r\nlet language = Language.getInstance();\r\nconst LINK_BUTTON = \"RelatedLink\";\r\n\r\ninterface IProps {\r\n    feature: Feature | null | undefined;\r\n}\r\n\r\nexport default function FeatureInfo(props: IProps) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<HTMLImageElement | null>(\r\n        null\r\n    );\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <Avatar\r\n                className={classes.icon}\r\n                aria-describedby={id}\r\n                onClick={handleClick}\r\n                style={{ visibility: props.feature ? \"visible\" : \"hidden\" }}\r\n            >\r\n                <InfoIcon />\r\n            </Avatar>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"center\",\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\",\r\n                }}\r\n            >\r\n                <Box className={classes.box}>\r\n                    <Typography className={classes.typography}>\r\n                        {props.feature?.getDescription() ??\r\n                            language.getText(\"error\")}\r\n                    </Typography>\r\n                    <Button\r\n                        color=\"secondary\"\r\n                        variant=\"outlined\"\r\n                        href={\r\n                            props.feature?.getRelatedWeblink() ??\r\n                            language.getText(\"error\")\r\n                        }\r\n                    >\r\n                        {language.getText(LINK_BUTTON)}\r\n                    </Button>\r\n                </Box>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { Button, Typography, Grid } from \"@material-ui/core\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nimport FeatureInfo from \"./FeatureInfo\";\r\n\r\nlet language: Language = Language.getInstance();\r\n\r\ninterface State {}\r\ninterface Props {\r\n    lastObservation: Observation;\r\n}\r\n\r\nconst DETAIL_PATH = \"/pse-airquality-react/detail/\";\r\n\r\nexport class StationInfo extends React.Component<Props, State> {\r\n    openDetails() {\r\n        window.location.href =\r\n            DETAIL_PATH +\r\n            this.props.lastObservation.getObservationStation().getId();\r\n    }\r\n\r\n    render() {\r\n        var station = this.props.lastObservation.getObservationStation();\r\n        return (\r\n            <Grid alignContent=\"center\" direction=\"column\" spacing={5}>\r\n                <Typography variant=\"h4\" color=\"secondary\">\r\n                    {station.getName()}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    {station.getPosition().getString()}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n                        <Grid item xs>\r\n                            {this.props.lastObservation.getFeature().getName() +\r\n                                \":\"}\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            <Typography\r\n                                variant=\"h6\"\r\n                                display=\"inline\"\r\n                                color=\"primary\"\r\n                            >\r\n                                {Math.floor(\r\n                                    this.props.lastObservation.getValue() * 100\r\n                                ) / 100}{\" \"}\r\n                                {this.props.lastObservation\r\n                                    .getFeature()\r\n                                    .getUnitOfMeasurement()}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Typography>\r\n                <FeatureInfo\r\n                    feature={this.props.lastObservation.getFeature()}\r\n                />\r\n                <Button\r\n                    onClick={() => this.openDetails()}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ minWidth: \"300px\" }}\r\n                >\r\n                    {language.getText(\"stationInfoButton\")}\r\n                </Button>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n","import \"./Map.css\";\r\nimport React from \"react\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\n\r\nimport {\r\n    Map as LeafletMap,\r\n    TileLayer,\r\n    Marker,\r\n    Polygon as LeafletPolygon,\r\n    Viewport as LeafletViewport,\r\n    Popup,\r\n} from \"react-leaflet\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { StationInfo } from \"./StationInfo\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nrequire(\"leaflet-iconmaterial\");\r\n\r\nconst VIEW_UPDATE_DELAY = 500; // in ms\r\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\r\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\r\nconst DEFAULT_ZOOM = 5;\r\ninterface State {\r\n    viewport: Viewport;\r\n    lastObservation: Observation | null;\r\n}\r\n\r\ninterface Props {\r\n    onViewportChange: (viewport: Viewport) => void;\r\n    handlePopup: (pin: MapPin) => Promise<Observation>;\r\n    viewport: Viewport;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n}\r\n\r\nexport class Map extends React.Component<Props, State> {\r\n    nextViewport: LeafletViewport | null;\r\n    lock: boolean;\r\n    oldViewport: Viewport | null;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.lock = false;\r\n        this.nextViewport = null;\r\n        this.oldViewport = null;\r\n        this.state = {\r\n            viewport: this.props.viewport,\r\n            lastObservation: null,\r\n        };\r\n    }\r\n\r\n    private getIconFromMapPin(pin: MapPin): L.Icon {\r\n        // Custom icons with colors\r\n        //TODO: Add warning if limit is reached? (requires design change)\r\n        // @ts-ignore\r\n        var icon = L.IconMaterial.icon({\r\n            icon: \"\", // Name of Material icon\r\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\r\n            markerColor: pin.getColor().getHex(), // Marker fill color\r\n            outlineColor: \"black\", // Marker outline color\r\n            outlineWidth: 1, // Marker outline width\r\n        });\r\n        //Filter icons\r\n        var regEx = /icon-(.+)-.*/;\r\n        if (regEx.test(pin.getId())) {\r\n            var iconName = regEx.exec(pin.getId()) as RegExpExecArray;\r\n            //@ts-ignore\r\n            icon = L.IconMaterial.icon({\r\n                icon: iconName[1], // Name of Material icon\r\n                iconColor: \"#33DD11\", // Material icon color (could be rgba, hex, html name...)\r\n                markerColor: pin.getColor().getHex(), // Marker fill color\r\n                outlineColor: \"black\", // Marker outline color\r\n                outlineWidth: 1, // Marker outline width\r\n            });\r\n        }\r\n        return icon;\r\n    }\r\n\r\n    private onViewportChange(viewport: LeafletViewport) {\r\n        this.nextViewport = viewport; //Update new viewport\r\n        if (!this.lock) {\r\n            if (!this.oldViewport) {\r\n                this.oldViewport = this.state.viewport; //Set viewport of last update\r\n            }\r\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\r\n            setTimeout(() => {\r\n                var newView = this.viewportLeafletToModel(\r\n                    this.nextViewport as LeafletViewport\r\n                );\r\n                this.lock = false;\r\n                if (\r\n                    this.oldViewport &&\r\n                    (newView\r\n                        .getCenter()\r\n                        .getDistance(this.oldViewport?.getCenter()) >\r\n                        DISTANCE_THRESHOLD ||\r\n                        Math.abs(\r\n                            newView.getZoom() - this.oldViewport?.getZoom()\r\n                        ) >= ZOOM_THRESHOLD)\r\n                ) {\r\n                    this.updateViewport(newView); //Only update if change has been significant\r\n                }\r\n            }, VIEW_UPDATE_DELAY);\r\n        }\r\n    }\r\n\r\n    private updateViewport(viewport: Viewport) {\r\n        this.props.onViewportChange(viewport);\r\n\r\n        this.setState({ viewport: viewport });\r\n        this.oldViewport = null;\r\n    }\r\n\r\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\r\n        return new Viewport(\r\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\r\n            viewport.zoom ?? DEFAULT_ZOOM\r\n        );\r\n    }\r\n\r\n    private async handlePopup(pin: MapPin) {\r\n        var observation = await this.props.handlePopup(pin);\r\n        this.setState({ lastObservation: observation });\r\n    }\r\n\r\n    private getPositionsFromPolygon(\r\n        polygon: Polygon\r\n    ): { lat: number; lng: number }[] {\r\n        return polygon\r\n            .getStations()\r\n            .map((obsSt: ObservationStation) =>\r\n                obsSt.getPosition().getCoordinates()\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <LeafletMap\r\n                    center={this.state.viewport.getCenter().getCoordinates()}\r\n                    zoom={this.state.viewport.getZoom()}\r\n                    onViewportChange={(v) => this.onViewportChange(v)}\r\n                >\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {this.props.pins.map((pin) => (\r\n                        <Marker\r\n                            position={pin.getPosition().getCoordinates()}\r\n                            icon={this.getIconFromMapPin(pin)}\r\n                        >\r\n                            <Popup onOpen={() => this.handlePopup(pin)}>\r\n                                {this.state.lastObservation ? (\r\n                                    <StationInfo\r\n                                        lastObservation={\r\n                                            this.state.lastObservation\r\n                                        }\r\n                                    />\r\n                                ) : (\r\n                                    <p>\r\n                                        {Language.getInstance().getText(\r\n                                            \"noData\"\r\n                                        )}\r\n                                    </p>\r\n                                )}\r\n                            </Popup>\r\n                        </Marker>\r\n                    ))}\r\n                    {this.props.polygons.map((polygon) => (\r\n                        <LeafletPolygon\r\n                            positions={this.getPositionsFromPolygon(polygon)}\r\n                            color={polygon.getColor().getHex()}\r\n                        />\r\n                    ))}\r\n                </LeafletMap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../../Model/Viewport\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\n\r\nexport default abstract class MapConfiguration {\r\n    protected buildMapPin(\r\n        obsStation: ObservationStation,\r\n        value: number\r\n    ): MapPin {\r\n        return new MapPin(\r\n            obsStation.getId(),\r\n            obsStation.getPosition(),\r\n            value,\r\n            this.getScale().getColor(value)\r\n        );\r\n    }\r\n    abstract getId(): string;\r\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\r\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\r\n    abstract getScale(): Scale;\r\n    abstract getFeatures(): Feature[];\r\n}\r\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","import MapConfiguration from \"./MapPage/MapConfiguration\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport { Color } from \"../Model/Color\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Observation } from \"../Model/Observation\";\r\n\r\nexport default class TestConfiguration extends MapConfiguration {\r\n    private feature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.feature = feature;\r\n    }\r\n\r\n    getId(): string {\r\n        return \"TestConfiguration\";\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [\r\n            new MapPin(\r\n                view.getCenter().getString(),\r\n                view.getCenter(),\r\n                10,\r\n                new Color(\r\n                    Math.random() * 255,\r\n                    Math.random() * 255,\r\n                    Math.random() * 255\r\n                )\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private async getLatestObservationMock(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 50,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\r\n        var stations = polygon.getStations();\r\n        var values = [];\r\n        for (let index = 0; index < stations.length; index++) {\r\n            var v = await this.getLatestObservationMock(\r\n                stations[index],\r\n                this.feature\r\n            );\r\n            values.push(v.getValue());\r\n        }\r\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\r\n        return this.getScale().getColor(avgValue);\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [\r\n            new Polygon(\r\n                [\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.4),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.5),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(50, 8.45),\r\n                        []\r\n                    ),\r\n                ],\r\n                new Color(0, 0, 0)\r\n            ),\r\n        ];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.getFeatures()[0].getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.feature];\r\n    }\r\n\r\n    setFeatures(features: Feature[]) {\r\n        if (features.length === 0) {\r\n            return; //no elements in array\r\n        }\r\n        this.feature = features[0];\r\n    }\r\n}\r\n","import { Feature } from \"../Model/Feature\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport * as featureDefinition from \"../Jsons/features.json\";\r\n\r\nexport default class FeatureProvider {\r\n    //private context: any;\r\n    private features: { [id: string]: Feature };\r\n    private static instance: FeatureProvider | null = null;\r\n\r\n    constructor() {\r\n        this.features = {};\r\n        //@ts-ignore\r\n        (featureDefinition.features as FeatureDefinition[]).forEach((f) => {\r\n            this.addFeature(f);\r\n        });\r\n    }\r\n\r\n    static getInstance(): FeatureProvider {\r\n        if (!this.instance) {\r\n            this.instance = new FeatureProvider();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private addFeature(definition: FeatureDefinition) {\r\n        if (definition) {\r\n            var f = new Feature(\r\n                definition.id,\r\n                definition.nameId,\r\n                definition.descriptionId,\r\n                new Scale(true, definition.defaultScale),\r\n                definition.webLinkId,\r\n                definition.limit,\r\n                definition.unitOfMeasurement,\r\n                definition.diagrams,\r\n                definition.icon\r\n            );\r\n            this.features[f.getId()] = f;\r\n        }\r\n    }\r\n\r\n    //Returns all loaded features\r\n    listAllFeatures(): Feature[] {\r\n        return Object.keys(this.features).map((key) => {\r\n            return this.features[key];\r\n        });\r\n    }\r\n\r\n    getFeature(featureId: string): Feature | undefined {\r\n        if (Object.keys(this.features).includes(featureId)) {\r\n            return this.features[featureId];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\ninterface FeatureDefinition {\r\n    id: string;\r\n    nameId: string;\r\n    unitOfMeasurement: string;\r\n    descriptionId: string;\r\n    defaultScale: { [key: number]: string };\r\n    webLinkId: string;\r\n    limit: number;\r\n    diagrams: string[];\r\n    icon: string;\r\n}\r\n","import { Feature } from \"../../Model/Feature\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Color } from \"../../Model/Color\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\nconst PNC10_ID = \"saqn:op:ncpm10\";\r\n\r\nexport default class MockDataProvider {\r\n    private static stations: { [key: string]: ObservationStation } = {};\r\n    private static gOSsPromise: Promise<any>;\r\n\r\n    private static randomColor(): Color {\r\n        return new Color(\r\n            Math.random() * 255,\r\n            Math.random() * 255,\r\n            Math.random() * 255\r\n        );\r\n    }\r\n    static mockFeature(): Feature {\r\n        var colors: { [key: number]: string } = {};\r\n        for (let index = 0; index < 5; index++) {\r\n            var c = this.randomColor().getHex();\r\n            colors[Math.floor(Math.random() * 100)] = c;\r\n        }\r\n        var scale = new Scale(true, colors);\r\n        return new Feature(\r\n            \"MockFeature\",\r\n            \"nameId\",\r\n            \"descId\",\r\n            scale,\r\n            \"weblink\",\r\n            100,\r\n            \"uoM\",\r\n            [],\r\n            \"icon\"\r\n        );\r\n    }\r\n    private static mockStation(center: Position): ObservationStation {\r\n        var id = Math.floor(Math.random() * 10000).toString();\r\n        var station = new ObservationStation(\r\n            id,\r\n            \"mockName\",\r\n            \"mockDesc\",\r\n            new Position(\r\n                center.getLatitude() + 6 * Math.random() - 3,\r\n                center.getLongitude() + 6 * Math.random() - 3\r\n            ),\r\n            []\r\n        );\r\n        MockDataProvider.stations[station.getId()] = station;\r\n        return station;\r\n    }\r\n    private static mockObservations(center: Position): Observation[] {\r\n        var count = Math.floor(Math.random() * 9) + 2;\r\n        var obs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            obs.push(\r\n                new Observation(\r\n                    this.mockStation(center),\r\n                    this.mockFeature(),\r\n                    Math.random() * 100,\r\n                    new Date(Date.now())\r\n                )\r\n            );\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    private static calculatePollutionIndex(results: {\r\n        [key: string]: string;\r\n    }): number {\r\n        if (Object.keys(results).length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        var r = Object.values(results);\r\n\r\n        var a = 0;\r\n        r.forEach((n) => (a += parseFloat(n)));\r\n        return Math.sqrt(a) / r.length;\r\n    }\r\n\r\n    static async getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Promise<Observation[]> {\r\n        var q =\r\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\r\n            \"$select=@iot.id,name\" +\r\n            \"&$filter=geo.distance(Thing/Locations/location,geography'POINT({lon} {lat})') lt {radius} and \" +\r\n            \"overlaps(phenomenonTime,(now() sub duration'P1d')) and \" +\r\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\r\n            \"&$expand=Thing($select=name,@iot.id;$expand=Locations($select=location),\" +\r\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)),\" +\r\n            \"Observations($select=result,phenomenonTime;$filter=\" +\r\n            \"phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1\" +\r\n            \")\";\r\n        q = q\r\n            .replace(/{lon}/g, center.getLongitude().toString())\r\n            .replace(/{lat}/g, center.getLatitude().toString())\r\n            .replace(/{radius}/g, radius.toString())\r\n            .replace(/{featureId}/g, feature.getId());\r\n        var json = await (await fetch(q)).json();\r\n        var result: IGetLatestObs[] = json.value;\r\n        var observations: Observation[] = [];\r\n        result.forEach((element) => {\r\n            if (element.Observations.length !== 0) {\r\n                var features: Feature[] = element.Thing.Datastreams.flatMap(\r\n                    (d) => {\r\n                        var f = FeatureProvider.getInstance().getFeature(\r\n                            d.ObservedProperty[\"@iot.id\"]\r\n                        );\r\n                        return f ?? [];\r\n                    }\r\n                );\r\n                if (feature.getId() === PNC10_ID) {\r\n                    element.Observations[0].result = this.calculatePollutionIndex(\r\n                        element.Observations[0].result as {\r\n                            [key: string]: string;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                var o = new Observation(\r\n                    new ObservationStation(\r\n                        element.Thing[\"@iot.id\"],\r\n                        element.Thing.name,\r\n                        element.Thing[\"@iot.id\"] + \"_desc\",\r\n                        new Position(\r\n                            element.Thing.Locations[0].location.coordinates[1],\r\n                            element.Thing.Locations[0].location.coordinates[0]\r\n                        ),\r\n                        features\r\n                    ),\r\n                    feature,\r\n                    (element.Observations[0].result as number) ?? -1,\r\n                    new Date(element.Observations[0].phenomenonTime)\r\n                );\r\n                observations.push(o);\r\n                MockDataProvider.stations[\r\n                    o.getObservationStation().getId()\r\n                ] = o.getObservationStation();\r\n            }\r\n        });\r\n\r\n        return observations;\r\n    }\r\n\r\n    static async getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        if (feature.getId() === \"MockFeature\") {\r\n            return this.mockObservations(station.getPosition())[0];\r\n        }\r\n        var q =\r\n            \"https://api.smartaq.net/v1.0/Datastreams?\" +\r\n            \"$select=@iot.id\" +\r\n            \"&$filter=Thing/@iot.id eq '{stationId}' and \" +\r\n            \"ObservedProperty/@iot.id eq '{featureId}'\" +\r\n            \"&$expand=Observations(\" +\r\n            \"$top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\";\r\n        q = q\r\n            .replace(/{featureId}/g, feature.getId())\r\n            .replace(/{stationId}/g, station.getId());\r\n        var res: IGetLatestObservation[] = (await (await fetch(q)).json())\r\n            .value;\r\n        //console.log(res);\r\n        if (!res || res.length === 0) {\r\n            return new Observation(station, feature, -1, new Date(Date.now()));\r\n        }\r\n        if (feature.getId() === PNC10_ID) {\r\n            res[0].Observations[0].result = this.calculatePollutionIndex(\r\n                res[0].Observations[0].result as {\r\n                    [key: string]: string;\r\n                }\r\n            );\r\n        }\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            res[0].Observations[0].result as number,\r\n            new Date(res[0].Observations[0].phenomenonTime)\r\n        );\r\n    }\r\n\r\n    static getObservations(\r\n        station: ObservationStation,\r\n        start: Date,\r\n        end: Date,\r\n        feature: Feature,\r\n        frequency?: Date\r\n    ): Observation[] {\r\n        throw new Error(\"Not implemented\");\r\n    }\r\n\r\n    static async getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): Promise<ObservationStation[]> {\r\n        var query =\r\n            \"https://api.smartaq.net/v1.0/Things?\" +\r\n            \"$filter=geo.distance(Locations/location,geography'POINT({lon} {lat})') \" +\r\n            \"lt {radius} \" +\r\n            \"and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))\" +\r\n            \"&$expand=Locations($select=location),\" +\r\n            \"Datastreams($select=name)/ObservedProperty($select=@iot.id)\";\r\n        console.log(\r\n            query\r\n                .replace(/{lon}/g, middle.getLongitude().toString())\r\n                .replace(/{lat}/g, middle.getLatitude().toString())\r\n                .replace(/{radius}/g, radius.toString())\r\n        );\r\n        MockDataProvider.gOSsPromise = fetch(\r\n            query\r\n                .replace(/{lon}/g, middle.getLongitude().toString())\r\n                .replace(/{lat}/g, middle.getLatitude().toString())\r\n                .replace(/{radius}/g, radius.toString())\r\n        );\r\n        var response = await (await MockDataProvider.gOSsPromise).json();\r\n        var obs: ObservationStation[] = [];\r\n        response.value.forEach((element: IGetObservationStations) => {\r\n            var features: Feature[] = element.Datastreams.flatMap((d) => {\r\n                var f = FeatureProvider.getInstance().getFeature(\r\n                    d.ObservedProperty[\"@iot.id\"]\r\n                );\r\n                if (!isNullOrUndefined(f)) {\r\n                    return f as Feature;\r\n                } else {\r\n                    return [];\r\n                }\r\n            });\r\n            var o = new ObservationStation(\r\n                element[\"@iot.id\"],\r\n                element.name,\r\n                element.description,\r\n                new Position(\r\n                    element.Locations[0].location.coordinates[1],\r\n                    element.Locations[0].location.coordinates[0]\r\n                ),\r\n                features\r\n            );\r\n            obs.push(o);\r\n            MockDataProvider.stations[o.getId()] = o;\r\n        });\r\n        return obs;\r\n    }\r\n\r\n    static getStation(id: string): ObservationStation {\r\n        return MockDataProvider.stations[id];\r\n    }\r\n}\r\n\r\ninterface IGetObservationStations {\r\n    \"@iot.id\": string;\r\n    name: string;\r\n    description: string;\r\n    Locations: [\r\n        {\r\n            location: {\r\n                coordinates: [number, number, number];\r\n            };\r\n        }\r\n    ];\r\n    Datastreams: {\r\n        ObservedProperty: {\r\n            \"@iot.id\": string;\r\n        };\r\n    }[];\r\n}\r\n\r\ninterface IGetLatestObservation {\r\n    Observations: [\r\n        {\r\n            phenomenonTime: string;\r\n            result: number | { [key: string]: string };\r\n        }\r\n    ];\r\n}\r\n\r\ninterface IGetLatestObs {\r\n    \"@iot.id\": string;\r\n    Thing: {\r\n        \"@iot.id\": string;\r\n        Locations: [\r\n            {\r\n                location: {\r\n                    coordinates: [number, number];\r\n                };\r\n            }\r\n        ];\r\n        name: string;\r\n        Datastreams: {\r\n            ObservedProperty: {\r\n                \"@iot.id\": string;\r\n            };\r\n        }[];\r\n    };\r\n    Observations: {\r\n        result: number | { [key: string]: string };\r\n        phenomenonTime: string;\r\n    }[];\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport MockDataProvider from \"../FROST/MockDataProvider\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\n\r\nconst SAMPLE_SCALE = 20;\r\nconst ID = \"NearConfiguration\";\r\n\r\nexport default class NearConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n    private scale: Scale;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n        this.scale = this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n\r\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\r\n        return new MapPin(\r\n            obs.getId(),\r\n            obs.getPosition(),\r\n            value,\r\n            this.scale.getColor(value)\r\n        );\r\n    }\r\n\r\n    private buildNearScale(observations: Observation[]): Scale {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        var max = Math.max.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n\r\n        var sc: { [key: number]: string } = {};\r\n        // Sample 10 times between 0 => min and limit of feature => max\r\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\r\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\r\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\r\n            sc[key] = this.selectedFeature\r\n                .getRelatedScale()\r\n                .getColor(val)\r\n                .getHex();\r\n        }\r\n        return new Scale(true, sc);\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var observations = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n\r\n        this.scale = this.buildNearScale(observations);\r\n\r\n        var pins: MapPin[] = [];\r\n        observations.forEach((o) => {\r\n            pins.push(\r\n                this.buildMapPin(o.getObservationStation(), o.getValue())\r\n            );\r\n        });\r\n        return pins;\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n    getScale(): Scale {\r\n        return this.scale;\r\n    }\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport MockDataProvider from \"../FROST/MockDataProvider\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport Delaunator from \"delaunator\";\r\n\r\nconst ID = \"PolygonConfiguration\";\r\nexport default class PolygonConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [];\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        var observations = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getRadius(),\r\n            this.selectedFeature\r\n        );\r\n        var polys = this.triangulate(observations);\r\n        return polys;\r\n    }\r\n\r\n    // Convert Observations in array of triangular Polygons\r\n    private triangulate(observations: Observation[]): Polygon[] {\r\n        var points: [number, number][] = [];\r\n        observations.forEach((o) =>\r\n            points.push([\r\n                //Get number tupels from Position\r\n                o.getObservationStation().getPosition().getLatitude(),\r\n                o.getObservationStation().getPosition().getLongitude(),\r\n            ])\r\n        );\r\n        var delaunay = Delaunator.from(points);\r\n        var output = [];\r\n        var tri = delaunay.triangles; // Convert Points to indices for triangles\r\n        for (let i = 0; i < tri.length; i += 3) {\r\n            var triStations = [\r\n                // 3 sequential indices describe a triangle\r\n                observations[tri[i]].getObservationStation(),\r\n                observations[tri[i + 1]].getObservationStation(),\r\n                observations[tri[i + 2]].getObservationStation(),\r\n            ];\r\n            var val =\r\n                // Calculate average value for all of the stations\r\n                (observations[tri[i]].getValue() +\r\n                    observations[tri[i + 1]].getValue() +\r\n                    observations[tri[i + 2]].getValue()) /\r\n                3;\r\n            output.push(\r\n                new Polygon(\r\n                    triStations,\r\n                    this.selectedFeature.getRelatedScale().getColor(val)\r\n                )\r\n            );\r\n        }\r\n        return output;\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport MockDataProvider from \"../FROST/MockDataProvider\";\r\nimport { Feature } from \"../../Model/Feature\";\r\n\r\nconst ID = \"StationConfiguration\";\r\n\r\nexport default class StationConfiguration extends MapConfiguration {\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var latestObs = await MockDataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n        return latestObs.map((o) =>\r\n            this.buildMapPin(o.getObservationStation(), o.getValue())\r\n        );\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"../MapPage/MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport TestConfiguration from \"../TestConfiguration\";\r\nimport NearConfiguration from \"../MapPage/NearConfiguration\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\r\nimport StationConfiguration from \"../MapPage/StationConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\r\nconst DEFAULT_CONF = new StationConfiguration(\r\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\r\n);\r\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\r\n\r\nexport default class MapConfigurationMemory {\r\n    static save(conf: MapConfiguration, view: Viewport) {\r\n        localStorage.setItem(\r\n            LOCALSTORAGE_MAPCONF,\r\n            JSON.stringify({\r\n                type: conf.constructor.name,\r\n                feature: conf.getFeatures()[0].getId(),\r\n                view: view,\r\n            })\r\n        );\r\n    }\r\n\r\n    static load(): [MapConfiguration, Viewport] {\r\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\r\n        if (\r\n            ls &&\r\n            (JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: Viewport;\r\n            })\r\n        ) {\r\n            //return configuration if it exists\r\n            var obj = JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: any;\r\n            };\r\n            var view = new Viewport(\r\n                new Position(\r\n                    obj.view.center.latitude,\r\n                    obj.view.center.longitude\r\n                ),\r\n                obj.view.zoom\r\n            );\r\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\r\n            if (isNullOrUndefined(feature)) {\r\n                throw new Error(\r\n                    \"Feature \" + obj.feature + \" is not supported.\"\r\n                );\r\n            }\r\n            if (obj.type === \"NearConfiguration\") {\r\n                return [new NearConfiguration(feature), view];\r\n            } else if (obj.type === \"PolygonConfiguration\") {\r\n                return [new PolygonConfiguration(feature), view];\r\n            } else if (obj.type === \"StationConfiguration\") {\r\n                return [new StationConfiguration(feature), view];\r\n            } else {\r\n                return [new TestConfiguration(feature), view];\r\n            }\r\n        }\r\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\r\n    }\r\n}\r\n","import { Viewport } from \"../../Model/Viewport\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport MapConfiguration from \"./MapConfiguration\";\r\nimport MapConfigurationMemory from \"../Storage/MapConfigurationMemory\";\r\nimport MockDataProvider from \"../FROST/MockDataProvider\";\r\nimport StationConfiguration from \"./StationConfiguration\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport NearConfiguration from \"./NearConfiguration\";\r\nimport PolygonConfiguration from \"./PolygonConfiguration\";\r\n\r\nexport class MapController {\r\n    private config: MapConfiguration;\r\n    private viewport: Viewport;\r\n\r\n    private DEFAULT_POSITION: Position = new Position(49, 8.4); //Karlsruhe\r\n    private DEFAULT_ZOOM: number = 5;\r\n\r\n    constructor(useMemory: boolean = true) {\r\n        if (useMemory) {\r\n            var mcm = MapConfigurationMemory.load();\r\n            this.config = mcm[0];\r\n            this.viewport = mcm[1];\r\n        } else {\r\n            // Default viewport\r\n            this.viewport = new Viewport(\r\n                this.DEFAULT_POSITION,\r\n                this.DEFAULT_ZOOM\r\n            );\r\n            this.config = new StationConfiguration(\r\n                // Default configuration\r\n                FeatureProvider.getInstance().getFeature(\r\n                    \"saqn:op:mcpm2p5\"\r\n                ) as Feature\r\n            );\r\n        }\r\n        if (this.config.getFeatures().length === 0) {\r\n            throw Error(\"Invalid MapConfiguration\");\r\n        }\r\n    }\r\n\r\n    // Called when a pin on the map is clicked, gets information from server\r\n    async handlePopup(pin: MapPin): Promise<Observation> {\r\n        var station = await MockDataProvider.getStation(pin.getId());\r\n        return MockDataProvider.getLatestObservation(\r\n            station,\r\n            this.config.getFeatures()[0]\r\n        );\r\n    }\r\n\r\n    // Store configuration and viewport in local storage\r\n    private save() {\r\n        MapConfigurationMemory.save(this.config, this.viewport);\r\n    }\r\n\r\n    // Current configuration id and feature id\r\n    getFeatureSelectConf(): { conf: string; feature: string } {\r\n        var f = this.config.getFeatures()[0].getId();\r\n        var c = this.config.getId();\r\n        return { conf: c, feature: f };\r\n    }\r\n\r\n    // Current viewport\r\n    getViewport(): Viewport {\r\n        return this.viewport;\r\n    }\r\n\r\n    // Called if the viewport has changed significantly\r\n    handleViewportChange(viewport: Viewport) {\r\n        this.viewport = viewport;\r\n        this.save();\r\n    }\r\n\r\n    // Pins for leaflet map\r\n    async getPins(): Promise<MapPin[]> {\r\n        return this.config.getPins(this.viewport);\r\n    }\r\n\r\n    // Polygons to be drawn\r\n    async getPolygons(): Promise<Polygon[]> {\r\n        return this.config.getPolygons(this.viewport);\r\n    }\r\n\r\n    // The leaflet scale of the map\r\n    getScale(): Scale {\r\n        return this.config.getScale();\r\n    }\r\n\r\n    // Switch to configuration with different feature\r\n    changeFeature(feature: Feature) {\r\n        switch (this.config.getId()) {\r\n            case \"StationConfiguration\":\r\n                this.config = new StationConfiguration(feature);\r\n                break;\r\n            case \"NearConfiguration\":\r\n                this.config = new NearConfiguration(feature);\r\n                break;\r\n            case \"PolygonConfiguration\":\r\n                this.config = new PolygonConfiguration(feature);\r\n                break;\r\n\r\n            default:\r\n                throw new Error(\r\n                    \"Current configuration has invalid id: \" +\r\n                        this.config.getId()\r\n                );\r\n        }\r\n    }\r\n\r\n    // Called when user changes configuration\r\n    onConfigurationChange(conf: MapConfiguration) {\r\n        this.config = conf;\r\n        this.save();\r\n    }\r\n\r\n    // Get Position from search term using the nominatim API\r\n    async search(searchTerm: string) {\r\n        if (searchTerm.length === 0) {\r\n            return; //No search possible\r\n        }\r\n\r\n        var response = await fetch(\r\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\r\n                encodeURIComponent(searchTerm)\r\n        );\r\n        var json = await response.json();\r\n        if (json.length === 0) {\r\n            return; //No location found\r\n        }\r\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\r\n    }\r\n\r\n    // Set new position\r\n    updateCurrentPosition(position: Position) {\r\n        this.viewport.setCenter(position);\r\n        this.save();\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Card,\r\n    CardContent,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\nimport LayersIcon from \"@material-ui/icons/Layers\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport MapConfiguration from \"../../Controller/MapPage/MapConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\r\nimport NearConfiguration from \"../../Controller/MapPage/NearConfiguration\";\r\nimport StationConfiguration from \"../../Controller/MapPage/StationConfiguration\";\r\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\r\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\r\ninterface Props {\r\n    onConfigurationChange(mapConfig: MapConfiguration): void;\r\n    startConf?: { conf: string; feature: string };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            background: theme.palette.primary.main,\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function FeatureSelect(props: Props) {\r\n    const TEST_CONFIG = \"TestConfiguration\";\r\n    const NEAR_CONFIG = \"NearConfiguration\";\r\n    const POLY_CONFIG = \"PolygonConfiguration\";\r\n    const STATION_CONFIG = \"StationConfiguration\";\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\r\n    const [feature, setFeature] = useState<Feature | undefined>(\r\n        FeatureProvider.getInstance().listAllFeatures()[0]\r\n    );\r\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\r\n        setOpen(open ? null : event.currentTarget);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.startConf) {\r\n            //Get start values from props\r\n            setFeature(\r\n                FeatureProvider.getInstance().getFeature(\r\n                    props.startConf.feature\r\n                )\r\n            );\r\n            setConfig(props.startConf.conf);\r\n        }\r\n    }, [props.startConf]);\r\n    const changeConfig = (conf: string, feature: Feature) => {\r\n        console.log(conf);\r\n        setConfig(conf);\r\n        switch (conf) {\r\n            case TEST_CONFIG:\r\n                var testConf = new TestConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(testConf);\r\n                break;\r\n            case NEAR_CONFIG:\r\n                var nearConf = new NearConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(nearConf);\r\n                break;\r\n            case POLY_CONFIG:\r\n                var polyConf = new PolygonConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(polyConf);\r\n                break;\r\n            case STATION_CONFIG:\r\n                var stationConf = new StationConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(stationConf);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleFeatureChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        var f = FeatureProvider.getInstance().getFeature(\r\n            event.target.value as string\r\n        ); //Feature Id\r\n        setFeature(f);\r\n\r\n        if (f) {\r\n            if (config) {\r\n                changeConfig(config, f);\r\n            } else {\r\n                throw new Error(\"No config selected\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleConfigChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        if (!feature) {\r\n            return; //A feature has to be selected, should never happen.\r\n        }\r\n        changeConfig(event.target.value as string, feature);\r\n        //window.location.reload(); //Reload with new config\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Avatar className={classes.root} onClick={handleClick}>\r\n                <LayersIcon />\r\n            </Avatar>\r\n            {open ? (\r\n                <Card variant=\"outlined\">\r\n                    <CardContent>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel>{\"Feature\"}</InputLabel>\r\n                            <Select\r\n                                onChange={handleFeatureChange}\r\n                                value={feature?.getId() ?? \"\"}\r\n                            >\r\n                                {FeatureProvider.getInstance()\r\n                                    .listAllFeatures()\r\n                                    .map((f) => (\r\n                                        <MenuItem value={f.getId()}>\r\n                                            {f.getName()}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel>{\"Style\"}</InputLabel>\r\n                            <Select\r\n                                onChange={handleConfigChange}\r\n                                value={config ?? \"\"}\r\n                            >\r\n                                <MenuItem value={POLY_CONFIG}>\r\n                                    {POLY_CONFIG}\r\n                                </MenuItem>\r\n                                <MenuItem value={STATION_CONFIG}>\r\n                                    {STATION_CONFIG}\r\n                                </MenuItem>\r\n                                <MenuItem value={NEAR_CONFIG}>\r\n                                    {NEAR_CONFIG}\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </CardContent>\r\n                </Card>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport {\n    TextField,\n    Paper,\n    IconButton,\n    Divider,\n    Theme,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LocationIcon from \"@material-ui/icons/LocationOn\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({\n    root: {\n        margin: \"5px 5px\",\n        padding: \"2px 4px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        width: \"100%\",\n        maxWidth: \"500px\",\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n});\n\nlet language = Language.getInstance();\n\ninterface Props {\n    classes: any;\n    onSearch(term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nclass Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Paper className={this.props.classes.root}>\n                <TextField\n                    type=\"search\"\n                    variant=\"outlined\"\n                    className={this.props.classes.input}\n                    label={language.getText(\"search\")}\n                    onKeyPress={(e) => {\n                        if (e.key === \"Enter\") {\n                            this.props.onSearch(this.state.searchTerm); //Enter key was pressed, search for this.state.searchTerm\n                        }\n                    }}\n                    onChange={(e) => {\n                        this.setState({ searchTerm: e.target.value });\n                    }}\n                    value={this.state.searchTerm}\n                />\n                <IconButton\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                >\n                    <SearchIcon />\n                </IconButton>\n                <Divider\n                    orientation=\"vertical\"\n                    className={this.props.classes.divider}\n                />\n                <IconButton\n                    color=\"primary\"\n                    onClick={() => this.locationClick()}\n                    className={this.props.classes.iconButton}\n                    disabled={!this.state.locationEnabled}\n                >\n                    <LocationIcon />\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nexport default withStyles(styles)(Search);\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        box: {\n            padding: theme.spacing(1),\n            width: \"50px\",\n            backgroundColor: \"white\",\n        },\n    })\n);\n\ninterface Props {\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"80px\",\n        width: \"40px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Box className={classes.box} border={1}>\n            <Grid container direction=\"column\">\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Legend;\n","import React from \"react\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Map } from \"./Map\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapController } from \"../../Controller/MapPage/MapController\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport FeatureSelect from \"./FeatureSelect\";\r\nimport Search from \"./Search\";\r\nimport Legend from \"./Legend\";\r\nimport { Box, Theme } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { Color } from \"../../Model/Color\";\r\n\r\nconst styles = (theme: Theme) => ({});\r\n\r\ninterface State {\r\n    selectedStation: ObservationStation | null;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n    viewport: Viewport;\r\n    additionalPins: MapPin[];\r\n}\r\n\r\ninterface Props {\r\n    classes: any;\r\n}\r\n\r\nconst DEFAULT_MIN = 0;\r\nconst DEFAULT_MAX = 100;\r\n\r\nclass MapPage extends React.Component<Props, State> {\r\n    mapController: MapController;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.mapController = new MapController();\r\n\r\n        this.state = {\r\n            selectedStation: null,\r\n            viewport: this.mapController.getViewport(),\r\n            pins: [],\r\n            polygons: [],\r\n            additionalPins: [],\r\n        };\r\n        this.update();\r\n    }\r\n\r\n    // Set station as source for the StationInfo Popup\r\n    changePopupStation(station: ObservationStation) {\r\n        this.setState({\r\n            selectedStation: station,\r\n        });\r\n    }\r\n\r\n    // Reload Pins and Polygons\r\n    update() {\r\n        var pinPromise = this.mapController.getPins();\r\n        var polyPromsie = this.mapController.getPolygons();\r\n        Promise.all([pinPromise, polyPromsie]).then((pinPoly) => {\r\n            this.setState({\r\n                pins: pinPoly[0].concat(this.state.additionalPins),\r\n                polygons: pinPoly[1],\r\n            });\r\n        });\r\n    }\r\n\r\n    getValueAt(position: Position, feature: Feature): number {\r\n        // Get pins sorted by distance\r\n        var sortedPins = this.state.pins.sort((a, b) => {\r\n            return (\r\n                a.getPosition().getDistance(position) -\r\n                b.getPosition().getDistance(position)\r\n            );\r\n        });\r\n        var dis = 0; //Distance of nearest station to position\r\n        var disSum = 0;\r\n        if (sortedPins.length !== 0) {\r\n            dis = sortedPins[0].getPosition().getDistance(position);\r\n        }\r\n        var value = 0;\r\n        for (let i = 0; i <= 2; i++) {\r\n            //nearest 3 stations (if they exist)\r\n            if (sortedPins.length > i) {\r\n                var temp =\r\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\r\n                disSum += temp;\r\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\r\n            }\r\n        }\r\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\r\n    }\r\n\r\n    onViewportChange(viewport: Viewport) {\r\n        this.mapController.handleViewportChange(viewport);\r\n        //Update Page\r\n        this.setState({\r\n            viewport: viewport,\r\n        });\r\n        this.update();\r\n    }\r\n\r\n    async onStationSelected(pin: MapPin): Promise<Observation> {\r\n        if (this.state.additionalPins.some((p) => pin.getId() === p.getId())) {\r\n            // Not a station, do nothing\r\n            return new Promise(() => {\r\n                return null;\r\n            });\r\n        }\r\n        this.setState({ selectedStation: null });\r\n        var promise = this.mapController.handlePopup(pin);\r\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\r\n        return promise;\r\n    }\r\n\r\n    onSearch(term: string) {\r\n        this.mapController.search(term).then(() => {\r\n            var mp = new MapPin(\r\n                \"icon-home-1\",\r\n                this.state.viewport.getCenter(),\r\n                -1,\r\n                new Color(0, 0, 0)\r\n            );\r\n            this.setState({\r\n                additionalPins: [mp],\r\n                pins: this.state.pins.concat(mp),\r\n            });\r\n            this.update();\r\n        });\r\n    }\r\n\r\n    getMin(): number {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(min)) {\r\n            min = DEFAULT_MIN;\r\n        }\r\n        return min;\r\n    }\r\n\r\n    getMax(): number {\r\n        var max = Math.max.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(max)) {\r\n            max = DEFAULT_MAX;\r\n        }\r\n        return max;\r\n    }\r\n\r\n    render() {\r\n        var min = this.getMin();\r\n        var max = this.getMax();\r\n        return (\r\n            <Box>\r\n                <Search\r\n                    onSearch={(term) => this.onSearch(term)}\r\n                    updatePosition={(pos) => {\r\n                        var view = this.state.viewport;\r\n                        view.setCenter(pos);\r\n                        this.onViewportChange(view);\r\n                    }}\r\n                />\r\n                <Map\r\n                    viewport={this.state.viewport}\r\n                    onViewportChange={(viewport) => {\r\n                        this.onViewportChange(viewport);\r\n                    }}\r\n                    handlePopup={(pin) => this.onStationSelected(pin)}\r\n                    pins={this.state.pins}\r\n                    polygons={this.state.polygons}\r\n                />\r\n                <FeatureSelect\r\n                    onConfigurationChange={(conf) => {\r\n                        this.mapController.onConfigurationChange(conf);\r\n                        this.update();\r\n                    }}\r\n                    startConf={this.mapController.getFeatureSelectConf()}\r\n                />\r\n                <Box\r\n                    zIndex={1000}\r\n                    style={{ position: \"absolute\", bottom: \"7%\", right: \"5%\" }}\r\n                >\r\n                    <Legend\r\n                        min={min}\r\n                        max={max}\r\n                        scale={this.mapController.getScale()}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MapPage);\r\n","import React from 'react';\nimport { Fragment } from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </Fragment>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Language from \"../Controller/Storage/Language\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport default class AboutPage extends React.Component<\r\n    IAboutPageProps,\r\n    IAboutPageState\r\n    > {\r\n    render() {\r\n        return <Fragment>\r\n            <p>\r\n                <h1>{language.getText(\"about\")}</h1>\r\n                <h4>{language.getText(\"aboutText\")}</h4>\r\n            </p>\r\n\r\n        </Fragment>\r\n    }\r\n}\r\n\r\ninterface IAboutPageProps { }\r\n\r\ninterface IAboutPageState { }","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Language from \"../Controller/Storage/Language\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport default class PrivacyPolicyPage extends React.Component<\r\n    IPrivacyPolicyPageProps,\r\n    IPrivacyPolicyPageState\r\n    > {\r\n    render() {\r\n        return <Fragment>\r\n            <h1>{language.getText(\"privacyPolicy\")}</h1>\r\n            <h4>{language.getText(\"privacyPolicyText\")}</h4>\r\n        </Fragment>\r\n    }\r\n}\r\n\r\ninterface IPrivacyPolicyPageProps { }\r\n\r\ninterface IPrivacyPolicyPageState { }\r\n","import React from \"react\";\r\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\r\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\ninterface IState {\r\n    selectedLang: string;\r\n    anchorEl: Element | null;\r\n}\r\n\r\ninterface IProps {\r\n    language: Language;\r\n}\r\n\r\nexport default class LanguageMenu extends React.Component<IProps, IState> {\r\n    private availableLanguages: Map<string, string>;\r\n    private ref: any;\r\n    private language: Language;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.language = props.language;\r\n        this.state = {\r\n            selectedLang: this.language.getSelectedLanguage(),\r\n            anchorEl: null,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n\r\n        this.availableLanguages = this.language.getAvailableLanguages();\r\n    }\r\n\r\n    isSelectedLang(lang: string): boolean {\r\n        //return lang === this.state.selectedLang;\r\n        return false;\r\n    }\r\n\r\n    handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    }\r\n\r\n    handleClose(): void {\r\n        this.setState({ anchorEl: null });\r\n    }\r\n\r\n    handleMenuItemClick(\r\n        event: React.MouseEvent<HTMLElement>,\r\n        id: string\r\n    ): void {\r\n        this.language.changeLanguage(id);\r\n        window.location.reload();\r\n        this.setState({\r\n            anchorEl: null,\r\n            selectedLang: this.language.getSelectedLanguage(),\r\n        });\r\n    }\r\n\r\n    langList(): JSX.Element[] {\r\n        let list: JSX.Element[] = [];\r\n        this.availableLanguages.forEach((lang: string, id: string) => {\r\n            list.push(\r\n                <MenuItem\r\n                    onClick={(e) => this.handleMenuItemClick(e, id)}\r\n                    selected={id === this.language.getSelectedLanguageId()}\r\n                >\r\n                    {lang}\r\n                </MenuItem>\r\n            );\r\n        });\r\n        return list;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    onClick={this.handleClick}\r\n                    color=\"inherit\"\r\n                    startIcon={<Translate />}\r\n                    endIcon={<ExpandMore />}\r\n                    aria-controls=\"simple-menu\"\r\n                    aria-haspopup=\"true\"\r\n                >\r\n                    {this.state.selectedLang}\r\n                </Button>\r\n                <Menu\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    anchorEl={this.state.anchorEl}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {this.langList()}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport SecurityIcon from '@material-ui/icons/Security';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport LanguageMenu from './LanguageMenu';\r\nimport Language from '../../Controller/Storage/Language';\r\nimport { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IPageMenuProps {\r\n    language: Language;\r\n}\r\n\r\ninterface IPageMenuState {\r\n    open: boolean;\r\n}\r\n\r\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\r\n\r\n    private language: Language;\r\n\r\n    constructor(props: IPageMenuProps) {\r\n        super(props);\r\n        this.language = props.language;\r\n        this.state = { open: false };\r\n        this.toogleDrawer = this.toogleDrawer.bind(this);\r\n    }\r\n\r\n    private toogleDrawer() {\r\n        const toogle = !this.state.open;\r\n        this.setState({ open: toogle });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\r\n                            SmartAQnet\r\n                        </Typography>\r\n                        <div style={{ marginLeft: 'auto' }}>\r\n\r\n                            <LanguageMenu language={this.language} />\r\n\r\n                        </div>\r\n                        <div>\r\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\r\n                    <div style={{ width: 250 }}>\r\n                        <List>\r\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\r\n                                <ListItemIcon>\r\n                                    <SecurityIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\r\n                            </ListItem>\r\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\r\n                                <ListItemIcon>\r\n                                    <InfoIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={this.language.getText(\"about\")} />\r\n                            </ListItem>\r\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\r\n                                <ListItemIcon>\r\n                                    <ExitToAppIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"SmartAQnet\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </div>\r\n                </SwipeableDrawer>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport MapPage from \"../MapPage/MapPage\";\r\nimport DetailPage from \"./../DetailPage/DetailPage\";\r\nimport ErrorPage from \"../ErrorPage\";\r\nimport AboutPage from \"./../About\";\r\nimport PrivacyPolicyPage from \"./../PrivacyPolicy\";\r\nimport PageMenu from \"./PageMenu\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\nfunction Layout() {\r\n    let language: Language = Language.getInstance();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Router basename={process.env.PUBLIC_URL}>\r\n                <PageMenu language={language} />\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/\"\r\n                        component={MapPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/detail/:id\"\r\n                        component={DetailPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/about\"\r\n                        component={AboutPage}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/pse-airquality-react/privacy-policy\"\r\n                        component={PrivacyPolicyPage}\r\n                    />\r\n                    {/* If no url pattern matches an error page is shown */}\r\n                    <Route>\r\n                        <ErrorPage\r\n                            code={404}\r\n                            message={Language.getInstance().getText(\"Error404\")}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import FeatureProvider from \"../FeatureProvider\";\r\n\r\nexport default class Configuration {\r\n    private static instance: Configuration | null;\r\n    private language: string = \"de-de\";\r\n    private frostUrl: string = \"\";\r\n\r\n    // Return singleton instance\r\n    static getInstance(): Configuration {\r\n        if (!Configuration.instance) {\r\n            Configuration.load();\r\n        }\r\n        return Configuration.instance as Configuration;\r\n    }\r\n\r\n    // Load instance from config.json\r\n    private static load() {\r\n        var json = require(\"../../Jsons/config.json\"); //Load config\r\n        var iConf = json as IConfig;\r\n        if (!iConf) {\r\n            throw new Error(\"Config.json has wrong format.\");\r\n        }\r\n        var newConf = new Configuration();\r\n        newConf.language = iConf.language;\r\n        newConf.frostUrl = iConf.frostUrl;\r\n        iConf.supportedFeatures.forEach(\r\n            (f) => FeatureProvider.getInstance().getFeature(f) //Load all supported features\r\n        );\r\n\r\n        Configuration.instance = newConf;\r\n    }\r\n\r\n    // The default value for the language id\r\n    getLanguage(): string {\r\n        return this.language;\r\n    }\r\n\r\n    // The Url of the top level FROST REST API\r\n    getFrostUrl(): string {\r\n        return this.frostUrl;\r\n    }\r\n}\r\n\r\ninterface IConfig {\r\n    frostUrl: string;\r\n    language: string;\r\n    supportedFeatures: string[];\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"typeface-roboto\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport lightGreen from \"@material-ui/core/colors/green\";\r\nimport Layout from \"./View/Layout/Layout\";\r\nimport Configuration from \"./Controller/Storage/Configuration\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: lightGreen[500],\r\n        },\r\n        secondary: {\r\n            main: purple[500],\r\n        },\r\n    },\r\n});\r\n\r\nConfiguration.getInstance(); //Initialize App Config\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <Layout />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as languageData from \"./languages.json\";\r\n\r\ninterface Lang {\r\n    id: string;\r\n    name: string;\r\n    strings: Strings;\r\n}\r\n\r\ninterface Strings {\r\n    [id: string]: string;\r\n}\r\n\r\nexport default class Language {\r\n    private static languageInstance: Language | null = null;\r\n\r\n    private selectedLangId: string;\r\n    private languages: Lang[];\r\n    private selectedLang: Lang;\r\n\r\n    //class Language is designed as a singleton. You can get access to the only instance via the getInstance method\r\n    constructor() {\r\n        this.selectedLangId = \"\";\r\n        this.languages = languageData.languages;\r\n        this.selectedLang = this.languages[0];\r\n    }\r\n\r\n    //returns the language instance\r\n    public static getInstance(): Language {\r\n        if (!Language.languageInstance) {\r\n            Language.languageInstance = new Language();\r\n            var local = localStorage.getItem(\"language\");\r\n            if (local) {\r\n                //Change language if selected\r\n                Language.languageInstance.changeLanguage(local);\r\n            }\r\n        }\r\n        return Language.languageInstance as Language;\r\n    }\r\n\r\n    //returns the string that corresponds to the string id in the currently selected language\r\n    public getText(id: string): string {\r\n        let text: string = this.selectedLang.strings[id];\r\n        if (text === \"\" || text == null) {\r\n            throw new Error(\r\n                `There is no string with id: ${id} in ${this.selectedLang.name}.`\r\n            );\r\n        }\r\n        return text;\r\n    }\r\n\r\n    public getSelectedLanguage(): string {\r\n        return this.selectedLang.name;\r\n    }\r\n\r\n    public getSelectedLanguageId(): string {\r\n        return this.selectedLang.id;\r\n    }\r\n\r\n    public changeLanguage(languageID: string): void {\r\n        let find: Lang | undefined = this.languages.find(\r\n            (e) => e.id === languageID\r\n        );\r\n        if (find !== undefined) {\r\n            this.selectedLang = find;\r\n            this.selectedLangId = languageID;\r\n            localStorage.setItem(\"language\", this.selectedLangId);\r\n        }\r\n    }\r\n\r\n    public getAvailableLanguages(): Map<string, string> {\r\n        let langs: Map<string, string> = new Map<string, string>();\r\n        this.languages.forEach((element) => {\r\n            langs.set(element.id, element.name);\r\n        });\r\n        return langs;\r\n    }\r\n\r\n    public getDateString(date: Date): string {\r\n        let languageId = this.getSelectedLanguageId();\r\n        return date.toLocaleString(languageId);\r\n    }\r\n}\r\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        if (n < 0 || n > 255) {\n            return this.toHex(0); //This should never happen, only for reusing this method later.\n        }\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import { Position } from './Position';\r\nimport { Feature } from './Feature';\r\nimport IDiagramController from '../Controller/DiagramController/DiagramController';\r\n\r\nexport class ObservationStation {\r\n    private id: string;\r\n    private name: string;\r\n    private description: string;\r\n    private position: Position;\r\n    private availableFeatures: Feature[];\r\n\r\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.position = position;\r\n        this.availableFeatures = availableFeatures;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.description;\r\n    }\r\n\r\n    public getPosition(): Position {\r\n        return this.position;\r\n    }\r\n\r\n    public getFeatures(): Feature[] {\r\n        return this.availableFeatures;\r\n    }\r\n\r\n    public getDiagramController(): IDiagramController[] {\r\n        var diagramController: IDiagramController[] = [];\r\n\r\n        this.availableFeatures.forEach(feature => {\r\n            let featureDiagramControllerArray = feature.getDiagramController(this);\r\n            featureDiagramControllerArray.forEach(contr => {\r\n                diagramController.push(contr);\r\n            });\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public hasFeature(feature: Feature): boolean {\r\n        //Not sure if this works \r\n        var found: boolean = false;\r\n        var length: number = this.availableFeatures.length;\r\n        for (var counter: number = 0; counter < length; counter++) {\r\n            if (feature === this.availableFeatures[counter]) {\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n}","import { Feature } from \"../Model/Feature\";\r\nimport { Observation } from \"../Model/Observation\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { Color } from \"../Model/Color\";\r\n\r\nexport default class MockDataProvider {\r\n    private static stations: { [key: string]: ObservationStation } = {};\r\n\r\n    private static randomColor(): Color {\r\n        return new Color(\r\n            Math.random() * 255,\r\n            Math.random() * 255,\r\n            Math.random() * 255\r\n        );\r\n    }\r\n    static mockFeature(): Feature {\r\n        var colors: { [key: number]: string } = {};\r\n        for (let index = 0; index < 5; index++) {\r\n            var c = this.randomColor().getHex();\r\n            colors[Math.floor(Math.random() * 100)] = c;\r\n        }\r\n        var scale = new Scale(true, colors);\r\n        return new Feature(\r\n            \"mockFeature\",\r\n            \"mockFeatureNameId\",\r\n            \"mockFeatureDescriptionId\",\r\n            scale,\r\n            \"mockWeblinkId\",\r\n            100,\r\n            \"uoM\",\r\n            ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\r\n            ''\r\n        );\r\n    }\r\n    private static mockStation(center: Position): ObservationStation {\r\n        var id = Math.floor(Math.random() * 10000).toString();\r\n        var station = new ObservationStation(\r\n            id,\r\n            \"mockName\",\r\n            \"mockDescription\",\r\n            new Position(\r\n                center.getLatitude() + 6 * Math.random() - 3,\r\n                center.getLongitude() + 6 * Math.random() - 3\r\n            ),\r\n            []\r\n        );\r\n        MockDataProvider.stations[station.getId()] = station;\r\n        return station;\r\n    }\r\n\r\n    private static mockObservations(center: Position): Observation[] {\r\n        var count = Math.floor(Math.random() * 9) + 2;\r\n        var obs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            obs.push(\r\n                new Observation(\r\n                    this.mockStation(center),\r\n                    this.mockFeature(),\r\n                    Math.random() * 100,\r\n                    new Date(Date.now())\r\n                )\r\n            );\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Observation[] {\r\n        return this.mockObservations(center);\r\n    }\r\n\r\n    static getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Observation {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 100,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    static getObservations(\r\n        station: ObservationStation,\r\n        start: Date,\r\n        end: Date,\r\n        feature: Feature,\r\n        //how many observations per day are expected\r\n        frequency: number\r\n    ): Observation[] {\r\n        let date = start;\r\n        let observations = new Array<Observation>();\r\n\r\n        if (frequency <= 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        } else if (frequency > 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 24 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        }\r\n\r\n        return observations;\r\n    }\r\n\r\n    static getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): ObservationStation[] {\r\n        var obs = [];\r\n        for (let index = 0; index < 7; index++) {\r\n            obs.push(this.mockStation(middle));\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getStation(id: string): ObservationStation {\r\n        return new ObservationStation(\r\n            id,\r\n            'mockName',\r\n            'mockDesc',\r\n            new Position(48.369665, 10.903877),\r\n            [\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n            ]\r\n        );\r\n    }\r\n}","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\n\r\nexport default interface IDiagramController {\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    //returns type of chart\r\n    getChartType: () => ChartType,\r\n\r\n    //returns options that specify how the diagram is displayed\r\n    getGraphicsOptions: () => {},\r\n\r\n    //returns whether a diagram can be configured via a select form. In this case getSelectOprions must return an Array of select options\r\n    isConfigurable: () => boolean,\r\n\r\n    //returns all options that can be selected to configure the diagram\r\n    getConfigurationOptions: () => string[],\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption: () => string,\r\n\r\n    //returns the data that can be displayed in the diagram\r\n    getData: (configurationOptionName: string) => any[][],\r\n}\r\n\r\nexport enum ChartType {\r\n    LINE_CHART = 'LineChart',\r\n    PIE_CHART = 'PieChart',\r\n}","export default class Timespan {\r\n\r\n  //length in milliseconds\r\n  length: number;\r\n\r\n  constructor(length: number) {\r\n    this.length = length;\r\n  }\r\n\r\n  //returns the end of a timespan given the start date\r\n  public getEnd(start: Date): Date {\r\n    return (new Date(start.valueOf() + this.length));\r\n  }\r\n\r\n  //returns the start of a timespan given the end date\r\n  public getStart(end: Date): Date {\r\n    return (new Date(end.valueOf() - this.length));\r\n  }\r\n}\r\n","import Language from \"../Storage/Language\";\r\nimport IDiagramController, { ChartType } from \"./DiagramController\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport Timespan from \"../../Model/Timespan\";\r\nimport MockDataProvider from \"../MockDataProvider\";\r\n\r\nlet languageProvider = Language.getInstance();\r\n\r\nclass FHLCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n    //type and label for the xAxis\r\n    xAxis: { type: string; label: string };\r\n\r\n    constructor(\r\n        nameId: string,\r\n        timespan: Timespan,\r\n        frequency: number,\r\n        xAxis: { type: string; label: string }\r\n    ) {\r\n        this.name = languageProvider.getText(nameId);\r\n        this.name = \"\";\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n        this.xAxis = xAxis;\r\n    }\r\n}\r\n\r\nexport class FeatureHistoryLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = true;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        //last 24 hours\r\n        new FHLCConfigurationOption(\r\n            \"last_24_hours\",\r\n            new Timespan(24 * 60 * 60 * 1000),\r\n            24,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last 7 days\r\n        new FHLCConfigurationOption(\r\n            \"last_7_days\",\r\n            new Timespan(7 * 24 * 60 * 60 * 1000),\r\n            12,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last 31 days\r\n        new FHLCConfigurationOption(\r\n            \"last_31_days\",\r\n            new Timespan(31 * 24 * 60 * 60 * 1000),\r\n            6,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last year\r\n        new FHLCConfigurationOption(\r\n            \"last_year\",\r\n            new Timespan(365 * 24 * 60 * 60 * 1000),\r\n            1,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption =\r\n        FeatureHistoryLineChartController.configurationOptions[0];\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel =\r\n            this.feature.getName() +\r\n            \"[\" +\r\n            this.feature.getUnitOfMeasurement() +\r\n            \"]\";\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return FeatureHistoryLineChartController.chartType;\r\n    }\r\n\r\n    getGraphicsOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return names of graphics options\r\n    getViewOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return FeatureHistoryLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return FeatureHistoryLineChartController.defaultConfigurationOption\r\n            .name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        //translate options to current language\r\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(\r\n            (option) => option.name\r\n        );\r\n        return optionNames;\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): any[][] {\r\n        //get option object\r\n        var configurationOption: FHLCConfigurationOption = this.getFHLCConfigurationOption(\r\n            configurationOptionName\r\n        );\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configurationOption.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configurationOption.frequency\r\n        );\r\n\r\n        //add react google chart specific header\r\n        var data: any[] = [[configurationOption.xAxis, this.yAxisLabel]];\r\n\r\n        //extract values and timestamps from observations\r\n        observations.forEach((observation) => {\r\n            let timestamp = observation.getTimeStamp();\r\n            let value = observation.getValue();\r\n            data.push([timestamp, value]);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\r\n        var options = FeatureHistoryLineChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(\r\n            `${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`\r\n        );\r\n    }\r\n}\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport Timespan from '../../Model/Timespan';\r\nimport MockDataProvider from '../MockDataProvider';\r\nimport Language from '../Storage/Language';\r\n\r\n\r\nclass CTLYPCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n\r\n    constructor(name: string, timespan: Timespan, frequency: number) {\r\n        this.name = name;\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class ComparisonToLastYearPieChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.PIE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigurable = false;\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new CTLYPCConfigurationOption('default_configuration', new Timespan(365 * 24 * 60 * 60 * 1000), 24),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = ComparisonToLastYearPieChartController.configurationOptions[0];\r\n\r\n    languageProvider: Language;\r\n\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n\r\n        this.languageProvider = Language.getInstance();\r\n    }\r\n\r\n    getChartType(): ChartType {\r\n        return ComparisonToLastYearPieChartController.chartType;\r\n    }\r\n\r\n    getGraphicsOptions() {\r\n        return ComparisonToLastYearPieChartController.graphicsOptions;\r\n    }\r\n\r\n    isConfigurable() {\r\n        return ComparisonToLastYearPieChartController.isConfigurable;\r\n    }\r\n\r\n    getConfigurationOptions() {\r\n        return ComparisonToLastYearPieChartController.configurationOptions.map(option => option.name);\r\n    };\r\n\r\n    getDefaultConfigurationOption() {\r\n        return ComparisonToLastYearPieChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    getData(configurationOptionName: string): any[][] {\r\n        //configuration option by name\r\n        var configuration = this.getCTLYPCConfigurationOption(configurationOptionName);\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configuration.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configuration.frequency,\r\n        );\r\n\r\n        var lastObservationValue = observations.pop()?.getValue() as number;\r\n\r\n        var higher = 0;\r\n        var lower = 0;\r\n\r\n        let higherTag = this.languageProvider.getText('higher');\r\n        let lowerTag = this.languageProvider.getText('lower');\r\n\r\n\r\n        observations.forEach(observation => {\r\n            (observation.getValue() > lastObservationValue) ? (higher++) : (lower++);\r\n        });\r\n\r\n        var data = [\r\n            ['Vergleich zum letzten Messwert', 'Anzahl Tage'],\r\n            [higherTag, higher],\r\n            [lowerTag, lower],\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getCTLYPCConfigurationOption(name: string): CTLYPCConfigurationOption {\r\n        var options = ComparisonToLastYearPieChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(`${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`);\r\n    }\r\n}\r\n\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport MockDataProvider from '../MockDataProvider';\r\n\r\nclass YCLCCConfigurationOption {\r\n    name: string;\r\n    numberOfYears: number;\r\n    frequency: number;\r\n\r\n    constructor(name: string, numberOfYears: number, frequency: number) {\r\n        this.name = name;\r\n        this.numberOfYears = numberOfYears;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class YearComparisonLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = false;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new YCLCCConfigurationOption('default_configuration', 3, 1),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = new YCLCCConfigurationOption('default_configuration', 10, 1);\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {\r\n        hAxis: {\r\n            format: 'MMM',\r\n            gridlines: { count: 6 }\r\n        },\r\n    };\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel = `${this.feature.getName()} [${this.feature.getUnitOfMeasurement()}]`;\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return YearComparisonLineChartController.chartType;\r\n    };\r\n\r\n    getGraphicsOptions() {\r\n        return YearComparisonLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return YearComparisonLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return YearComparisonLineChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        return YearComparisonLineChartController.configurationOptions.map(option => option.name);\r\n    }\r\n\r\n    getYCLCCConfigurationOption(name: string) {\r\n        for (let option of YearComparisonLineChartController.configurationOptions) {\r\n            if (option.name === name) return option;\r\n        }\r\n        throw new Error('Configuration option: ' + name + ' does not exist for YearComparisonLineChart');\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): Array<Array<string | Date | number | null>> {\r\n        let configurationOption = this.getYCLCCConfigurationOption(configurationOptionName);\r\n        let numberOfYears = configurationOption.numberOfYears;\r\n        let frequency = configurationOption.frequency;\r\n\r\n        let now = new Date(Date.now());\r\n\r\n        //start of timespan\r\n        let start = new Date(now.getFullYear() - numberOfYears, 0, 1);\r\n        //end of timespan\r\n        let end = now;\r\n\r\n        //request (mock-)data\r\n        let observations = MockDataProvider.getObservations(this.observationStation, start, end, this.feature, frequency);\r\n\r\n        //filter out the null values\r\n        let cleanedObservations = observations.filter(observation => {\r\n            return (observation !== null);\r\n        });\r\n\r\n        //determine the displayed years\r\n        let years: number[] = new Array<number>();\r\n        for (let i = 0; i < numberOfYears; i++) {\r\n            years.push(now.getFullYear() - i);\r\n        }\r\n\r\n        //define header\r\n        let header: string[] = years.map(year => year.toString());\r\n        header.splice(0, 0, 'dates');\r\n\r\n\r\n        //define new data table with header\r\n        let dt = new DataTable(header)\r\n\r\n        //add every observation to the table\r\n        for (let observation of cleanedObservations) {\r\n            let date = observation.getTimeStamp();\r\n            let year = date.getFullYear().toString();\r\n            let value = observation.getValue();\r\n            dt.addValue(date, year, value);\r\n        }\r\n\r\n        //return data table as a twodimensional array\r\n        let dtAsArray = dt.toArray();\r\n        console.log(dtAsArray);\r\n        return dtAsArray;\r\n    }\r\n}\r\n\r\nclass DTRow {\r\n    date: Date;\r\n    values: Array<number>;\r\n\r\n    constructor(date: Date, numberOfValues: number) {\r\n        this.date = date;\r\n        this.values = new Array<number>(numberOfValues);\r\n    }\r\n\r\n    addValue(value: number, index: number) {\r\n        this.values[index] = value;\r\n    }\r\n\r\n    toArray(): Array<Date | number> {\r\n        let arrayRepresentation = new Array<Date | number>();\r\n        arrayRepresentation = this.values;\r\n        arrayRepresentation.splice(0, 0, this.date);\r\n        return arrayRepresentation;\r\n    }\r\n\r\n    static sort(dtrowA: DTRow, dtrowB: DTRow): number {\r\n        return ((dtrowA.date.valueOf() <= dtrowB.date.valueOf() ? -1 : 1));\r\n    }\r\n}\r\n\r\nclass DataTable {\r\n    static readonly BASE_YEAR = 2020;\r\n\r\n    header: string[];\r\n    rows: DTRow[];\r\n    numberOfValues: number;\r\n\r\n    constructor(header: string[]) {\r\n        this.header = header;\r\n        this.numberOfValues = header.length - 1;\r\n        this.rows = new Array<DTRow>();\r\n    }\r\n\r\n    addValue(date: Date, columnKey: string, value: number) {\r\n        //get row\r\n        let rowIndex = this.getRowIndex(date);\r\n        if (rowIndex === null) {\r\n            this.rows.push(new DTRow(this.getBaseDate(date), this.numberOfValues));\r\n            rowIndex = (this.rows.length - 1);\r\n        }\r\n\r\n        //get column\r\n        let columnIndex = this.getColumnIndex(columnKey);\r\n        if (columnKey === null) {\r\n            throw new Error(`No column key: ${columnKey} in this data table`);\r\n        }\r\n        columnIndex = columnIndex as number;\r\n\r\n        //add value\r\n        this.rows[rowIndex].addValue(value, columnIndex);\r\n    }\r\n\r\n    getColumnIndex(key: string): number | null {\r\n        for (let index = 0; index < this.header.length; index++) {\r\n            if (key === this.header[index]) {\r\n                return (index - 1);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getRowIndex(date: Date): number | null {\r\n        for (let index = 0; index < this.rows.length; index++) {\r\n            if (this.datesAreEqual(date, this.rows[index].date)) {\r\n                return index;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getBaseDate(date: Date) {\r\n        let baseDate = new Date(\r\n            DataTable.BASE_YEAR,\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        );\r\n        return baseDate;\r\n    }\r\n\r\n    //returns whether two dates are the same except their years\r\n    datesAreEqual(dateA: Date, dateB: Date): boolean {\r\n        let equal: boolean =\r\n            (dateA.getMonth() === dateB.getMonth()) &&\r\n            (dateA.getDate() === dateB.getDate()) &&\r\n            (dateA.getHours() === dateB.getHours()) &&\r\n            (dateA.getMinutes() === dateB.getMinutes()) &&\r\n            (dateA.getSeconds() === dateB.getSeconds()) &&\r\n            (dateA.getMilliseconds() === dateB.getMilliseconds());\r\n        return equal;\r\n    }\r\n\r\n    sort() {\r\n        this.rows.sort(DTRow.sort);\r\n    }\r\n\r\n    toArray() {\r\n        this.sort();\r\n\r\n        let arrayRepresentation = new Array<Array<string | Date | number | null>>();\r\n        arrayRepresentation = this.rows.map(row => row.toArray());\r\n        arrayRepresentation.splice(0, 0, this.header);\r\n        return arrayRepresentation;\r\n    }\r\n}\r\n\r\n","import { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport { FeatureHistoryLineChartController } from './FeatureHistoryLineChartController';\r\nimport { ComparisonToLastYearPieChartController } from './ComparisonToLastYearPieChartController';\r\nimport { YearComparisonLineChartController } from './YearComparisonLineChartController';\r\nimport IDiagramController from './DiagramController';\r\n\r\nexport default class DiagramFactory {\r\n    private static readonly diagramMap = new Map<string, Function>([\r\n        ['FeatureHistoryLineChart', (observationStation: ObservationStation, feature: Feature) => { return new FeatureHistoryLineChartController(observationStation, feature) }],\r\n        ['ComparisonToLastYearPieChart', (observationStation: ObservationStation, feature: Feature) => { return new ComparisonToLastYearPieChartController(observationStation, feature) }],\r\n        ['YearComparisonLineChart', (observationStation: ObservationStation, feature: Feature) => { return new YearComparisonLineChartController(observationStation, feature) }],\r\n    ]);\r\n\r\n    public static getDiagramController(id: string, observationStation: ObservationStation, feature: Feature): IDiagramController {\r\n        if (DiagramFactory.diagramMap.has(id)) {\r\n            var constructController = DiagramFactory.diagramMap.get(id) as Function;\r\n            return constructController.call(DiagramFactory, observationStation, feature);\r\n        } else {\r\n            throw new Error(`Diagram id: ${id}, is not supported`);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Scale } from \"./Scale\";\r\nimport { Observation } from \"./Observation\";\r\nimport { ObservationStation } from \"./ObservationStation\";\r\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\r\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\r\nimport Language from \"../Controller/Storage/Language\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport class Feature {\r\n    private id: string;\r\n    private nameId: string;\r\n    private descriptionId: string;\r\n    private scale: Scale;\r\n    private relatedWeblinkId: string;\r\n    private limit: number;\r\n    private unitOfMeasurement: string;\r\n    private controllerIds: string[];\r\n    private iconName: string;\r\n\r\n    constructor(\r\n        id: string,\r\n        nameId: string,\r\n        descriptionId: string,\r\n        scale: Scale,\r\n        relatedWeblinkId: string,\r\n        limit: number,\r\n        unitOfMeasurement: string,\r\n        controllerIds: string[],\r\n        iconName: string\r\n    ) {\r\n        this.id = id;\r\n        this.nameId = nameId;\r\n        this.descriptionId = descriptionId;\r\n        this.scale = scale;\r\n        this.relatedWeblinkId = relatedWeblinkId;\r\n        this.limit = limit;\r\n        this.unitOfMeasurement = unitOfMeasurement;\r\n        this.controllerIds = controllerIds;\r\n        this.iconName = iconName;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return language.getText(this.nameId);\r\n        //return this.nameId;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return language.getText(this.descriptionId);\r\n        //return this.descriptionId;\r\n    }\r\n\r\n    public getRelatedWeblink(): string {\r\n        return language.getText(this.relatedWeblinkId);\r\n        //return this.relatedWeblinkId;\r\n    }\r\n\r\n    public getRelatedScale(): Scale {\r\n        return this.scale;\r\n    }\r\n\r\n    public getDiagramController(\r\n        observationStation: ObservationStation\r\n    ): IDiagramController[] {\r\n        var diagramController = new Array<IDiagramController>();\r\n\r\n        this.controllerIds.forEach((id) => {\r\n            let controller = DiagramFactory.getDiagramController(\r\n                id,\r\n                observationStation,\r\n                this\r\n            );\r\n            diagramController.push(controller);\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public getLimit(): number {\r\n        return this.limit;\r\n    }\r\n\r\n    public getUnitOfMeasurement(): string {\r\n        return this.unitOfMeasurement;\r\n    }\r\n\r\n    public isLimitExceeded(observation: Observation): boolean {\r\n        return observation.getValue() > this.limit;\r\n    }\r\n\r\n    public getIconName(): string {\r\n        return this.iconName;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport MockDataProvider from '../../Controller/MockDataProvider';\r\n\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\n\r\nimport ObservationStationProfile from './ObservationStationProfile';\r\nimport LocationMap from './LocationMap';\r\nimport Diagram from './Diagram';\r\n\r\nexport default class DetailPage extends React.Component<IDetailPageProps, IDetailPageState> {\r\n\r\n    //the concerning observation station of this page\r\n    observationStation: ObservationStation;\r\n\r\n    constructor(props: IDetailPageProps) {\r\n        super(props);\r\n\r\n        //get observation station by id\r\n        this.observationStation = MockDataProvider.getStation(this.props.id);\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        main_container: {\r\n            paddingTop: '20px',\r\n        },\r\n    }\r\n\r\n    //return diagrams of this observation station\r\n    renderDiagrams() {\r\n        var diagramController = this.observationStation.getDiagramController();\r\n        return (\r\n            diagramController.map((controller) => (\r\n                <Grid item xl={6} lg={6} md={6} sm={6} xs={6} >\r\n                    <Diagram controller={controller} />\r\n                </Grid>)\r\n            ));\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Grid container justify='center'>\r\n                <Grid container justify='center' spacing={4} xl={8} lg={8} md={8} sm={12} xs={12} style={this.styles.main_container}>\r\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12} >\r\n                        <ObservationStationProfile observationStation={this.observationStation} />\r\n                    </Grid>\r\n                    <Hidden only={['sm', 'xs']}>\r\n                        <Grid item xl={4} lg={4} md={4}>\r\n                            <LocationMap position={this.observationStation.getPosition()} />\r\n                        </Grid>\r\n                    </Hidden>\r\n                    {this.renderDiagrams()}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IDetailPageProps {\r\n    id: string;\r\n}\r\n\r\ninterface IDetailPageState { }\r\n","import React from 'react';\r\nimport {\r\n    Card,\r\n    Typography,\r\n    Divider,\r\n    CardContent,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport ObservationItem from './ObservationItem';\r\nimport MockDataProvider from '../../Controller/MockDataProvider';\r\nimport { Color } from '../../Model/Color';\r\nimport { Observation } from '../../Model/Observation';\r\nimport Language from '../../Controller/Storage/Language';\r\n\r\nexport default class ObservationStationProfile extends React.Component<IObservationStationProfileProps, IObservationStationProfileState> {\r\n\r\n    //the corresponding observation station to this component\r\n    observationStation: ObservationStation;\r\n    languageProvider: Language;\r\n\r\n    constructor(props: IObservationStationProfileProps) {\r\n        super(props);\r\n        this.observationStation = this.props.observationStation;\r\n        this.state = {\r\n            latestObservations: this.getLatestObservations(),\r\n        }\r\n        this.languageProvider = Language.getInstance();\r\n    }\r\n\r\n    //styles for this component\r\n    styles = {\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n        section_1: {\r\n            padding: '20px',\r\n        },\r\n        section_2: {\r\n            padding: '20px',\r\n        },\r\n        feature_container: {\r\n            marginTop: '20px',\r\n        },\r\n    }\r\n\r\n    //colors that are asignable to the observation items icons\r\n    colors = [\r\n        '#f44336',\r\n        '#e91e63',\r\n        '#9c27b0',\r\n        '#673ab7',\r\n        '#3f51b5',\r\n        '#2196f3',\r\n        '#00bcd4',\r\n        '#009688',\r\n        '#4caf50',\r\n        '#8bc34a',\r\n        '#cddc39',\r\n        '#ffeb3b',\r\n        '#ffc107',\r\n        '#ff9800',\r\n        '#ff5722',\r\n        '#795548',\r\n        '#9e9e9e',\r\n        '#607d8b',\r\n    ];\r\n\r\n\r\n    //returns the latest observation for each feature of this observation station\r\n    private getLatestObservations() {\r\n        var features = this.observationStation.getFeatures();\r\n        var observations = new Array<Observation>();\r\n\r\n        features.forEach(feature => {\r\n            let observation = MockDataProvider.getLatestObservation(this.observationStation, feature);\r\n            observations.push(observation);\r\n        });\r\n\r\n        return observations;\r\n    }\r\n\r\n    //returns a random color from the above ones\r\n    private getRandomColor() {\r\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\r\n        var color = this.colors[randomNumber];\r\n        this.colors.splice(randomNumber, 1);\r\n        return Color.getColorFromHex(color);\r\n    }\r\n\r\n    //returns JSX Elements for each latest observation\r\n    private renderLatestObservations() {\r\n        return this.state.latestObservations.map((observation) =>\r\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\r\n                <ObservationItem color={this.getRandomColor()} observation={observation} />\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    //returns the timestamp of the latest observation as a readable string\r\n    private renderObservationDate() {\r\n        if (this.state.latestObservations.length !== 0) {\r\n            return this.languageProvider.getDateString(this.state.latestObservations[0].getTimeStamp());\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    <div style={this.styles.section_1}>\r\n                        <Typography align=\"left\" variant=\"h4\" component='h2' >\r\n                            {this.observationStation.getName()}\r\n                        </Typography>\r\n                        <Typography align=\"left\" color='textSecondary' component=\"p\" style={this.styles.pos}>\r\n                            {this.observationStation.getPosition().getString()}\r\n                        </Typography>\r\n                        <Typography align='left' variant=\"body2\" component=\"p\" >\r\n                            {this.observationStation.getDescription()}\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider variant=\"middle\" />\r\n                    <div style={this.styles.section_2}>\r\n                        <Grid container alignItems='stretch'>\r\n                            <Grid item xs>\r\n                                <Typography align='left' variant='subtitle1'>\r\n                                    {this.languageProvider.getText('last_measurement')}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography color='textSecondary' variant='subtitle1'>\r\n                                    {this.renderObservationDate()}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container style={this.styles.feature_container} spacing={2}>\r\n\r\n                            {this.renderLatestObservations()}\r\n\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n            </Card >\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationStationProfileProps {\r\n    observationStation: ObservationStation;\r\n}\r\n\r\ninterface IObservationStationProfileState {\r\n    latestObservations: Observation[],\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    Grid,\r\n    Avatar,\r\n    Typography,\r\n    CardContent,\r\n} from '@material-ui/core';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThermometerHalf } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Color } from '../../Model/Color';\r\nimport { Observation } from '../../Model/Observation';\r\nimport { Feature } from '../../Model/Feature';\r\n\r\n\r\nexport default class ObservationItem extends React.Component<IObservationItemProps, IObservationItemState> {\r\n\r\n    color: Color;\r\n    observation: Observation;\r\n    feature: Feature;\r\n\r\n    styles = {\r\n        feature_card: {\r\n        },\r\n        card_content: {\r\n            padding: '10px',\r\n        },\r\n    };\r\n\r\n    constructor(props: IObservationItemProps) {\r\n        super(props);\r\n        this.color = this.props.color;\r\n        this.observation = this.props.observation;\r\n        this.feature = this.observation.getFeature();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={this.styles.feature_card} >\r\n                <CardContent style={this.styles.card_content}>\r\n                    <Grid container alignItems='center'>\r\n                        <Grid item xl={2} lg={2} md={2} sm={2} xs={2}>\r\n                            <Avatar style={{ backgroundColor: this.color.getHex() }}>\r\n                                <FontAwesomeIcon icon={faThermometerHalf} />\r\n                            </Avatar>\r\n                        </Grid>\r\n                        <Grid item xl={10} lg={10} md={10} sm={10} xs={10}>\r\n                            <Typography color='textSecondary'>{this.feature.getName()}</Typography>\r\n                            <Typography variant='subtitle1'>{this.observation.getValue() + ' ' + this.feature.getUnitOfMeasurement()}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationItemProps {\r\n    color: Color;\r\n    observation: Observation;\r\n}\r\n\r\ninterface IObservationItemState { }","import React from 'react';\r\n\r\nimport { Card } from '@material-ui/core';\r\n\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport Leaflet from 'leaflet';\r\n\r\nimport { Position } from '../../Model/Position';\r\n\r\n\r\n\r\nexport default class LocationMap extends React.Component<ILocationMapProps, ILocationMapState> {\r\n\r\n    //geo coordinates that will be marked on the map\r\n    position: Leaflet.LatLng;\r\n\r\n    //zoom level of the map\r\n    private static readonly ZOOM_LEVEL = 20;\r\n\r\n    // server that provides tiles to render the map\r\n    private static readonly TILE_SERVER = 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\r\n    private static readonly TILE_SERVER_ATTRIBUTION = '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\r\n\r\n    // custom icon to show position\r\n    private static readonly MARKER_ICON_PATH = './marker_icon.svg'; //path to the icon image\r\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\r\n\r\n    static MARKER_ICON = new Leaflet.Icon({\r\n        iconUrl: require('' + LocationMap.MARKER_ICON_PATH),\r\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\r\n        iconAnchor: [LocationMap.MARKER_ICON_SIZE / 2, LocationMap.MARKER_ICON_SIZE], // point of the icon which will correspond to marker's location\r\n    });\r\n\r\n    constructor(props: ILocationMapProps) {\r\n        super(props);\r\n        this.position = new Leaflet.LatLng(this.props.position.getLatitude(), this.props.position.getLongitude());\r\n    }\r\n\r\n    // custom css styles\r\n    styles = {\r\n        map: {\r\n            height: '300px',\r\n        },\r\n    }\r\n\r\n    //render component as JSX.Element\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Map\r\n                    center={this.position} //center map to the required position\r\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\r\n                    style={this.styles.map} //provide custom styles\r\n\r\n                    // diable zooming via mouse and keyboard and disable dragging\r\n                    scrollWheelZoom={false}\r\n                    dragging={false}\r\n                    keyboard={false}\r\n                    doubleClickZoom={false}\r\n                >\r\n                    <TileLayer\r\n                        url={LocationMap.TILE_SERVER}\r\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\r\n                    />\r\n                    <Marker\r\n                        position={this.position}\r\n                        icon={LocationMap.MARKER_ICON}\r\n                    />\r\n                </Map>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ILocationMapProps {\r\n    position: Position;\r\n}\r\n\r\ninterface ILocationMapState {\r\n}","import React from 'react';\r\nimport { Card, Divider, Typography, Grid, CircularProgress, Select, MenuItem, } from '@material-ui/core';\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport IDiagramController from '../../Controller/DiagramController/DiagramController';\r\n\r\nexport default class Diagram extends React.Component<IDiagramProps, IDiagramState> {\r\n    //controller for this diagram\r\n    controller: IDiagramController;\r\n\r\n    constructor(props: IDiagramProps) {\r\n        super(props);\r\n        this.controller = this.props.controller;\r\n\r\n        //setup default configuration in state\r\n        this.state = {\r\n            configurationOption: this.controller.getDefaultConfigurationOption(),\r\n        }\r\n\r\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(this);\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        header: {\r\n            padding: '10px',\r\n            paddingLeft: '40px',\r\n        },\r\n        diagram: {\r\n            width: '100%',\r\n            height: '350px',\r\n        },\r\n    };\r\n\r\n    //change configuration in state\r\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n        this.setState({\r\n            configurationOption: (event.target.value as string),\r\n        });\r\n    }\r\n\r\n    //return configuration options as menu items\r\n    renderConfigurationOptions() {\r\n        var configurationOptions = this.controller.getConfigurationOptions();\r\n        return (\r\n            configurationOptions.map((option) =>\r\n                <MenuItem value={option}>{option}</MenuItem>\r\n            )\r\n        );\r\n    }\r\n\r\n    //renders the configuration form of this diagram\r\n    renderDiagramConfiguration() {\r\n        //if configuration is enabled return slect form with configuration options\r\n        if (this.controller.isConfigurable()) {\r\n            return (\r\n                <Grid item>\r\n                    <Select\r\n                        value={this.state.configurationOption}\r\n                        onChange={this.handleConfigurationChange}\r\n                    >\r\n                        {this.renderConfigurationOptions()}\r\n                    </Select>\r\n                </Grid>\r\n            );\r\n            //not configurable return empty string\r\n        } else return ('');\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <div style={this.styles.header}>\r\n                    <Grid container justify='space-between' alignItems='center'>\r\n                        <Grid item>\r\n                            <Typography variant='subtitle1'>{this.controller.feature.getName()}</Typography>\r\n                        </Grid>\r\n                        {this.renderDiagramConfiguration()}\r\n                    </Grid>\r\n                </div>\r\n                <Divider />\r\n                <Chart\r\n                    width={this.styles.diagram.width}\r\n                    height={this.styles.diagram.height}\r\n                    chartType={this.controller.getChartType()}\r\n                    options={this.controller.getGraphicsOptions()}\r\n                    loader={\r\n                        <Grid container justify='center' alignContent='center' style={this.styles.diagram}>\r\n                            <CircularProgress />\r\n                        </Grid>\r\n                    }\r\n                    data={this.controller.getData(this.state.configurationOption)}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface IDiagramProps {\r\n    controller: IDiagramController;\r\n}\r\n\r\ninterface IDiagramState {\r\n    configurationOption: string;\r\n}"],"sourceRoot":""}