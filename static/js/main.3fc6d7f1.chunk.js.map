{"version":3,"sources":["View/DetailPage sync /^.*$","View/DetailPage/marker_icon.svg","serviceWorker.ts","Model/Viewport.ts","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapPage/MapConfiguration.ts","Controller/MapPage/NearConfiguration.ts","Model/Polygon.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/MapPage/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapPage/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/About.tsx","View/PrivacyPolicy.tsx","View/Layout/LanguageMenu.tsx","View/Layout/PageMenu.tsx","View/Layout/Layout.tsx","Controller/Storage/Configuration.ts","index.tsx","Controller/Storage/Language.ts","Model/FrostResult.ts","Controller/Frost/FrostServer.ts","Controller/Frost/FrostFactory.ts","Model/ObservationStation.ts","Controller/Frost/factories/GetStation.ts","Controller/Frost/factories/GetObservationStations.ts","Controller/Frost/factories/GetLatestObservation.ts","Controller/Frost/factories/GetLatestObservations.ts","Controller/Frost/factories/GetObservations.ts","Controller/Frost/DataProvider.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/DiagramController/RequestReducer.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastMonthPieChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","Controller/FeatureProvider.ts","Model/Position.ts","Model/Color.ts","Model/Observation.ts","View/DetailPage/DetailPage.tsx","View/DetailPage/ObservationStationProfile.tsx","View/DetailPage/ObservationItem.tsx","View/DetailPage/LocationMap.tsx","View/DetailPage/Diagram.tsx","Model/Scale.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","language","Language","getInstance","StationInfo","href","props","lastObservation","getObservationStation","getId","station","Box","className","Grid","container","direction","Typography","variant","color","getName","getPosition","getString","Divider","orientation","justify","getFeature","getRelatedWeblink","data-testid","display","Math","floor","getValue","getUnitOfMeasurement","Button","onClick","openDetails","getText","React","Component","require","Map","nextViewport","lock","oldViewport","state","viewport","pin","icon","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","regEx","test","iconName","exec","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","abs","getZoom","updateViewport","onViewportChange","setState","Position","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","zoomControl","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","key","Popup","onOpen","CircularProgress","polygons","index","positions","getPositionsFromPolygon","fillOpacity","Tooltip","getAverageValue","getObservations","MapPin","value","MapConfiguration","obsStation","getScale","NearConfiguration","feature","selectedFeature","scale","getRelatedScale","obs","observations","min","apply","p","max","sc","val","getLimit","Scale","view","DataProvider","getLatestObservations","filter","buildNearScale","forEach","push","buildMapPin","Polygon","flatMap","length","reduce","a","b","PolygonConfiguration","getRadius","polys","triangulate","points","getLatitude","getLongitude","output","tri","Delaunator","from","triangles","i","triObs","StationConfiguration","latestObs","DEFAULT_CONF","FeatureProvider","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","localStorage","setItem","JSON","stringify","type","getFeatures","ls","getItem","parse","obj","latitude","longitude","isNullOrUndefined","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","f","getPins","getPolygons","searchTerm","fetch","encodeURIComponent","response","json","Promise","reject","updateCurrentPosition","lat","lon","setCenter","useStyles","makeStyles","theme","createStyles","root","background","palette","primary","main","title","textAlign","width","marginBottom","popup","padding","paddingBottom","formControl","marginTop","FeatureSelect","classes","useState","open","setOpen","listAllFeatures","setFeature","setConfig","useEffect","startConf","changeConfig","nearConf","onConfigurationChange","polyConf","stationConf","alignItems","Card","FormControl","InputLabel","Select","onChange","event","target","MenuItem","Avatar","Search","locationEnabled","navigator","permissions","query","name","then","status","console","log","geolocation","getCurrentPosition","res","coords","updatePosition","err","onSubmit","onSearch","InputBase","placeholder","IconButton","locationClick","disabled","spacing","getStyleFromScale","grad","slice","height","Legend","style","flexItem","unit","MapPage","mapController","selectedStation","getViewport","additionalPins","update","pinPromise","polyPromise","all","pinPoly","sortedPins","sort","dis","disSum","temp","handleViewportChange","some","promise","changePopupStation","term","preventDefault","search","setHomeMarker","alert","replace","mp","Color","isFinite","getMin","getMax","pos","onStationSelected","concat","getFeatureSelectConf","getSelectedFeature","withStyles","ErrorPage","message","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","selectedLang","getSelectedLanguage","anchorEl","handleClick","bind","handleClose","getAvailableLanguages","lang","currentTarget","changeLanguage","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","onClose","langList","PageMenu","toogleDrawer","toogle","AppBar","boxShadow","zIndex","Toolbar","component","Link","to","textDecoration","marginLeft","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","exact","path","DetailPage","Configuration","frostUrl","instance","iConf","newConf","supportedFeatures","createMuiTheme","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","selectedLangId","languages","languageData","text","strings","languageID","find","undefined","langs","element","set","date","languageId","toLocaleString","languageInstance","local","FrostResult","result","success","errorMessage","FrostServer","ff","options","getQueryBuilder","getQuery","ok","statusText","converter","getConverter","convert","FrostFactory","rmc","qb","ObservationStation","description","availableFeatures","diagramController","Array","featureDiagramControllerArray","getDiagramController","controller","GetStationFactory","GetStationConverter","GetStationBuilder","Locations","coordinates","features","fp","Datastreams","getfeat","ObservedProperty","feat","isin","GetObservationStationsFactory","GetObservationStationsConverter","GetObservationStationsBuilder","stations","coord","stream","middle","radius","GetLatestObservationFactory","GetLatestObservationConverter","GetLatestObservationBuilder","rl","Observations","Observation","Date","phenomenonTime","GetLatestObservationsFactory","GetLatestObservationsConverter","GetLatestObservationsBuilder","thing","Thing","dastream","sta","GetObservationsFactory","GetObservationsConverter","GetObservationsBuilder","start","toISOString","end","fr","getResult","getSuccess","getMessage","frostFactory","server","request","handleFrostResult","step","getTime","setHours","getHours","promises","r","ChartType","Timespan","valueOf","RequestReducer","results","hourBlock","avg","getTimeStamp","day","observationStation","setMinutes","zero","eight","sixteen","reduceBlocks","endDate","startDate","setMonth","getMonth","GetDataForDay","setDate","getDate","prev","next","languageProvider","FHLCConfigurationOption","nameId","timespan","frequency","additionalGraphicsOptions","FeatureHistoryLineChartController","currentConfigurationOption","configurationOptions","ID","chartType","graphicsOptions","isConfigutable","optionName","getFHLCConfigurationOption","option","configurationOptionName","getStart","now","MONTH_IN_MILLI","getDataByYear","getDataByMonth","data","timestamp","row1","row2","table","splice","LINE_CHART","hAxis","format","gridlines","count","legend","ComparisonToLastMonthPieChartController","getCTLMPCConfigurationOption","additionalGraphicOptions","isConfigurable","configuration","getFullYear","newObs","lastObservationValue","pop","higher","lower","higherTag","lowerTag","PIE_CHART","pieSliceText","pieStartAngle","slices","0","1","DiagramFactory","diagramMap","has","get","call","Feature","descriptionId","relatedWeblinkId","limit","unitOfMeasurement","controllerIds","featureDefinition","addFeature","definition","defaultScale","webLinkId","diagrams","featureId","includes","sqrt","pow","lng","round","toString","g","TypeError","toHex","n","hex","toUpperCase","parseInt","styles","main_container","paddingTop","params","item","xl","lg","md","sm","xs","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","colors","latestObservations","randomNumber","random","getColorFromHex","getRandomColor","getDateString","align","getDescription","renderObservationDate","renderLatestObservations","library","add","faThermometerHalf","faSmog","faTachometerAlt","ObservationItem","backgroundColor","getIconName","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","header","paddingLeft","diagram","handleConfigurationChange","configurationOption","setConfigurationOption","getData","getConfigurationOptions","getCurrentConfigurationOption","renderConfigurationOptions","alignContent","getChartType","getGraphicsOptions","loader","getID","renderDiagramConfiguration","renderChart","linearTransition","dict","sortOnKeys","Number","getLinearTransition","numKeys","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB"],"mappings":"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","file":"static/js/main.3fc6d7f1.chunk.js","sourcesContent":["var map = {\n\t\"./DetailPage\": 73,\n\t\"./DetailPage.tsx\": 73,\n\t\"./Diagram\": 77,\n\t\"./Diagram.tsx\": 77,\n\t\"./LocationMap\": 76,\n\t\"./LocationMap.tsx\": 76,\n\t\"./ObservationItem\": 75,\n\t\"./ObservationItem.css\": 110,\n\t\"./ObservationItem.tsx\": 75,\n\t\"./ObservationStationProfile\": 74,\n\t\"./ObservationStationProfile.tsx\": 74,\n\t\"./marker_icon.svg\": 166\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 165;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.a06775c7.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 1) {\n            this.zoom = 1;\n        }\n    }\n}\n","import React from \"react\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Button, Typography, Grid, Box, Divider } from \"@material-ui/core\";\nimport Language from \"../../Controller/Storage/Language\";\n\nimport \"./StationInfo.css\";\n\nlet language: Language = Language.getInstance();\n\ninterface State {}\ninterface Props {\n    lastObservation: Observation;\n}\n\nconst DETAIL_PATH = \"/pse-airquality-react/detail/\";\n\nexport class StationInfo extends React.Component<Props, State> {\n    openDetails() {\n        window.location.href =\n            DETAIL_PATH +\n            this.props.lastObservation.getObservationStation().getId();\n    }\n\n    render() {\n        var station = this.props.lastObservation.getObservationStation();\n        return (\n            <Box className=\"popup\">\n                <Grid container direction=\"column\">\n                    <Typography\n                        className=\"title\"\n                        variant=\"h5\"\n                        color=\"textPrimary\"\n                    >\n                        {station.getName()}\n                    </Typography>\n                    <Typography className=\"position\" color=\"textSecondary\">\n                        {station.getPosition().getString()}\n                    </Typography>\n                    <Divider orientation=\"horizontal\"></Divider>\n                    <Grid container direction=\"row\" justify=\"space-between\">\n                        <Typography\n                            className=\"feature\"\n                            variant=\"subtitle1\"\n                            color=\"textSecondary\"\n                        >\n                            {this.props.lastObservation.getFeature().getName() +\n                                \":\"}\n                        </Typography>\n                        <Typography color=\"primary\">\n                            <a\n                                href={this.props.lastObservation\n                                    .getFeature()\n                                    .getRelatedWeblink()}\n                                data-testid=\"featureWebLink\"\n                            >\n                                ?\n                            </a>\n                        </Typography>\n                    </Grid>\n                    <Typography\n                        className=\"value\"\n                        variant=\"h4\"\n                        display=\"inline\"\n                        color=\"primary\"\n                        data-testid=\"value\"\n                    >\n                        {Math.floor(\n                            this.props.lastObservation.getValue() * 100\n                        ) / 100}{\" \"}\n                        {this.props.lastObservation\n                            .getFeature()\n                            .getUnitOfMeasurement()}\n                    </Typography>\n                    <Button\n                        className=\"info-button\"\n                        data-testid=\"info-button\"\n                        color=\"primary\"\n                        onClick={() => this.openDetails()}\n                        variant=\"contained\"\n                    >\n                        {language.getText(\"stationInfoButton\")}\n                    </Button>\n                </Grid>\n            </Box>\n        );\n    }\n}\n","import \"./Map.css\";\nimport React from \"react\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport {\n    Map as LeafletMap,\n    TileLayer,\n    Marker,\n    Polygon as LeafletPolygon,\n    Viewport as LeafletViewport,\n    Popup,\n    Tooltip,\n} from \"react-leaflet\";\nimport { Position } from \"../../Model/Position\";\nimport { StationInfo } from \"./StationInfo\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nrequire(\"leaflet-iconmaterial\");\n\nconst VIEW_UPDATE_DELAY = 500; // in ms\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\nconst DEFAULT_ZOOM = 5;\ninterface State {\n    viewport: Viewport;\n    lastObservation: Observation | null;\n}\n\ninterface Props {\n    onViewportChange: (viewport: Viewport) => void;\n    handlePopup: (pin: MapPin) => Promise<Observation>;\n    viewport: Viewport;\n    pins: MapPin[];\n    polygons: Polygon[];\n}\n\nexport class Map extends React.Component<Props, State> {\n    nextViewport: LeafletViewport | null;\n    lock: boolean;\n    oldViewport: Viewport | null;\n    constructor(props: Props) {\n        super(props);\n        this.lock = false;\n        this.nextViewport = null;\n        this.oldViewport = null;\n        this.state = {\n            viewport: this.props.viewport,\n            lastObservation: null,\n        };\n    }\n\n    private getIconFromMapPin(pin: MapPin): L.Icon {\n        // Custom icons with colors\n        //TODO: Add warning if limit is reached? (requires design change)\n        // @ts-ignore\n        var icon = L.IconMaterial.icon({\n            icon: \"\", // Name of Material icon\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\n            markerColor: pin.getColor().getHex(), // Marker fill color\n            outlineColor: \"\", // Marker outline color\n            outlineWidth: 1, // Marker outline width\n        });\n        //Filter icons\n        var regEx = /icon-(.+)-.*/;\n        if (regEx.test(pin.getId())) {\n            var iconName = regEx.exec(pin.getId()) as RegExpExecArray;\n            //@ts-ignore\n            icon = L.IconMaterial.icon({\n                icon: iconName[1], // Name of Material icon\n                iconColor: \"white\", // Material icon color (could be rgba, hex, html name...)\n                markerColor: pin.getColor().getHex(), // Marker fill color\n                outlineColor: \"black\", // Marker outline color\n                outlineWidth: 1, // Marker outline width\n            });\n        }\n        return icon;\n    }\n\n    private onViewportChange(viewport: LeafletViewport) {\n        this.nextViewport = viewport; //Update new viewport\n        if (!this.lock) {\n            if (!this.oldViewport) {\n                this.oldViewport = this.state.viewport; //Set viewport of last update\n            }\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\n            setTimeout(() => {\n                var newView = this.viewportLeafletToModel(\n                    this.nextViewport as LeafletViewport\n                );\n                this.lock = false;\n                if (\n                    this.oldViewport &&\n                    (newView\n                        .getCenter()\n                        .getDistance(this.oldViewport?.getCenter()) >\n                        DISTANCE_THRESHOLD ||\n                        Math.abs(\n                            newView.getZoom() - this.oldViewport?.getZoom()\n                        ) >= ZOOM_THRESHOLD)\n                ) {\n                    this.updateViewport(newView); //Only update if change has been significant\n                }\n            }, VIEW_UPDATE_DELAY);\n        }\n    }\n\n    private updateViewport(viewport: Viewport) {\n        this.props.onViewportChange(viewport);\n\n        this.setState({ viewport: viewport });\n        this.oldViewport = null;\n    }\n\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\n        return new Viewport(\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\n            viewport.zoom ?? DEFAULT_ZOOM\n        );\n    }\n\n    private async handlePopup(pin: MapPin) {\n        this.setState({ lastObservation: null });\n        var observation = await this.props.handlePopup(pin);\n        this.setState({ lastObservation: observation });\n    }\n\n    private getPositionsFromPolygon(\n        polygon: Polygon\n    ): { lat: number; lng: number }[] {\n        return polygon\n            .getStations()\n            .map((obsSt: ObservationStation) =>\n                obsSt.getPosition().getCoordinates()\n            );\n    }\n\n    render() {\n        return (\n            <LeafletMap\n                center={this.state.viewport.getCenter().getCoordinates()}\n                zoom={this.state.viewport.getZoom()}\n                id=\"leafletMap\"\n                onViewportChange={(v) => this.onViewportChange(v)}\n                zoomControl={false}\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {this.props.pins.map((pin) => (\n                    <Marker\n                        position={pin.getPosition().getCoordinates()}\n                        icon={this.getIconFromMapPin(pin)}\n                        id={\"mapPin-\" + pin.getId()}\n                        key={pin.getId()}\n                    >\n                        <Popup\n                            onOpen={() => this.handlePopup(pin)}\n                            className=\"popup\"\n                        >\n                            {this.state.lastObservation ? (\n                                <StationInfo\n                                    lastObservation={this.state.lastObservation}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Popup>\n                    </Marker>\n                ))}\n                {this.props.polygons.map((polygon, index) => (\n                    <LeafletPolygon\n                        key={index}\n                        positions={this.getPositionsFromPolygon(polygon)}\n                        color={polygon.getColor().getHex()}\n                        fillOpacity={0.3}\n                    >\n                        <Tooltip>\n                            {Math.floor(polygon.getAverageValue() * 100) / 100 +\n                                \" \" +\n                                polygon\n                                    .getObservations()[0]\n                                    ?.getFeature()\n                                    .getUnitOfMeasurement() ?? \"\"}\n                        </Tooltip>\n                    </LeafletPolygon>\n                ))}\n            </LeafletMap>\n        );\n    }\n}\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nexport default abstract class MapConfiguration {\n    protected buildMapPin(\n        obsStation: ObservationStation,\n        value: number\n    ): MapPin {\n        return new MapPin(\n            obsStation.getId(),\n            obsStation.getPosition(),\n            value,\n            this.getScale().getColor(value)\n        );\n    }\n    abstract getId(): string;\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\n    abstract getScale(): Scale;\n    abstract getFeatures(): Feature[];\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nconst SAMPLE_SCALE = 20;\nconst ID = \"NearConfiguration\";\n\nexport default class NearConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n    private scale: Scale;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n        this.scale = this.selectedFeature.getRelatedScale();\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\n        return new MapPin(\n            obs.getId(),\n            obs.getPosition(),\n            value,\n            this.scale.getColor(value)\n        );\n    }\n\n    private buildNearScale(observations: Observation[]): Scale {\n        var min = Math.min.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n        var max = Math.max.apply(\n            Math,\n            observations.map((p) => {\n                return p.getValue();\n            })\n        );\n\n        var sc: { [key: number]: string } = {};\n        // Sample 10 times between 0 => min and limit of feature => max\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\n            sc[key] = this.selectedFeature\n                .getRelatedScale()\n                .getColor(val)\n                .getHex();\n        }\n        return new Scale(true, sc);\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var observations = (\n            await DataProvider.getLatestObservations(\n                view.getCenter(),\n                view.getZoom(),\n                this.selectedFeature\n            )\n        ).filter((o) => o.getValue() < 5 * this.selectedFeature.getLimit());\n\n        this.scale = this.buildNearScale(observations);\n\n        var pins: MapPin[] = [];\n        observations.forEach((o) => {\n            pins.push(\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n        });\n        return pins;\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n    getScale(): Scale {\n        return this.scale;\n    }\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\nimport { Observation } from \"./Observation\";\n\nexport class Polygon {\n    private obs: Observation[];\n    private color: Color;\n    constructor(obs: Observation[], color: Color) {\n        this.obs = obs;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n\n    getObservations(): Observation[] {\n        return this.obs;\n    }\n\n    getStations(): ObservationStation[] {\n        return this.obs.flatMap((o) => o.getObservationStation());\n    }\n\n    getAverageValue(): number {\n        return this.obs.length === 0\n            ? 0\n            : this.obs.reduce((a, b) => {\n                  return a + b.getValue();\n              }, 0) / this.obs.length;\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Feature } from \"../../Model/Feature\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\nimport Delaunator from \"delaunator\";\n\nconst ID = \"PolygonConfiguration\";\nexport default class PolygonConfiguration extends MapConfiguration {\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    getId(): string {\n        return ID;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        return [];\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        var observations = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getRadius(),\n            this.selectedFeature\n        );\n        var polys = this.triangulate(\n            observations.filter(\n                (o) => o.getValue() < 5 * this.selectedFeature.getLimit()\n            )\n        );\n        return polys;\n    }\n\n    // Convert Observations in array of triangular Polygons\n    private triangulate(observations: Observation[]): Polygon[] {\n        var points: [number, number][] = [];\n        observations.forEach((o) =>\n            points.push([\n                //Get number tupels from Position\n                o.getObservationStation().getPosition().getLatitude(),\n                o.getObservationStation().getPosition().getLongitude(),\n            ])\n        );\n        var delaunay = Delaunator.from(points);\n        var output = [];\n        var tri = delaunay.triangles; // Convert Points to indices for triangles\n        for (let i = 0; i < tri.length; i += 3) {\n            var triObs = [\n                // 3 sequential indices describe a triangle\n                observations[tri[i]],\n                observations[tri[i + 1]],\n                observations[tri[i + 2]],\n            ];\n            var val =\n                // Calculate average value for all of the stations\n                (observations[tri[i]].getValue() +\n                    observations[tri[i + 1]].getValue() +\n                    observations[tri[i + 2]].getValue()) /\n                3;\n            output.push(\n                new Polygon(\n                    triObs,\n                    this.selectedFeature.getRelatedScale().getColor(val)\n                )\n            );\n        }\n        return output;\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"./MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Feature } from \"../../Model/Feature\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\n\nconst ID = \"StationConfiguration\";\n\nexport default class StationConfiguration extends MapConfiguration {\n    getId(): string {\n        return ID;\n    }\n    private selectedFeature: Feature;\n\n    constructor(feature: Feature) {\n        super();\n        this.selectedFeature = feature;\n    }\n\n    async getPins(view: Viewport): Promise<MapPin[]> {\n        var latestObs: Observation[] = await DataProvider.getLatestObservations(\n            view.getCenter(),\n            view.getZoom(),\n            this.selectedFeature\n        );\n        return latestObs\n            .filter((o) => o.getValue() < 5 * this.selectedFeature.getLimit())\n            .map((o) =>\n                this.buildMapPin(o.getObservationStation(), o.getValue())\n            );\n    }\n\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\n        return [];\n    }\n\n    getScale(): Scale {\n        return this.selectedFeature.getRelatedScale();\n    }\n\n    getFeatures(): Feature[] {\n        return [this.selectedFeature];\n    }\n}\n","import MapConfiguration from \"../MapPage/MapConfiguration\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport NearConfiguration from \"../MapPage/NearConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\nimport StationConfiguration from \"../MapPage/StationConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport { isNullOrUndefined } from \"util\";\n\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\nconst DEFAULT_CONF = new StationConfiguration(\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\n);\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\n\nexport default class MapConfigurationMemory {\n    static save(conf: MapConfiguration, view: Viewport) {\n        localStorage.setItem(\n            LOCALSTORAGE_MAPCONF,\n            JSON.stringify({\n                type: conf.getId(),\n                feature: conf.getFeatures()[0].getId(),\n                view: view,\n            })\n        );\n    }\n\n    static load(): [MapConfiguration, Viewport] {\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\n        if (\n            ls &&\n            (JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: Viewport;\n            })\n        ) {\n            //return configuration if it exists\n            var obj = JSON.parse(ls) as {\n                type: string;\n                feature: string;\n                view: any;\n            };\n            var view = new Viewport(\n                new Position(\n                    obj.view.center.latitude,\n                    obj.view.center.longitude\n                ),\n                obj.view.zoom\n            );\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\n            if (isNullOrUndefined(feature)) {\n                throw new Error(\n                    \"Feature \" + obj.feature + \" is not supported.\"\n                );\n            }\n            if (obj.type === \"NearConfiguration\") {\n                return [new NearConfiguration(feature), view];\n            } else if (obj.type === \"PolygonConfiguration\") {\n                return [new PolygonConfiguration(feature), view];\n            } else if (obj.type === \"StationConfiguration\") {\n                return [new StationConfiguration(feature), view];\n            } else {\n                throw new Error(\"Invalid configuration: \" + obj.type);\n            }\n        }\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\n    }\n}\n","import { Viewport } from \"../../Model/Viewport\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport MapConfiguration from \"./MapConfiguration\";\nimport MapConfigurationMemory from \"../Storage/MapConfigurationMemory\";\nimport StationConfiguration from \"./StationConfiguration\";\nimport FeatureProvider from \"../FeatureProvider\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport NearConfiguration from \"./NearConfiguration\";\nimport PolygonConfiguration from \"./PolygonConfiguration\";\nimport DataProvider from \"../Frost/DataProvider\";\n\nexport class MapController {\n    private config: MapConfiguration;\n    private viewport: Viewport;\n\n    private DEFAULT_POSITION: Position = new Position(49, 8.4); //Karlsruhe\n    private DEFAULT_ZOOM: number = 5;\n\n    constructor(useMemory: boolean = true) {\n        if (useMemory) {\n            var mcm = MapConfigurationMemory.load();\n            this.config = mcm[0];\n            this.viewport = mcm[1];\n        } else {\n            // Default viewport\n            this.viewport = new Viewport(\n                this.DEFAULT_POSITION,\n                this.DEFAULT_ZOOM\n            );\n            this.config = new StationConfiguration(\n                // Default configuration\n                FeatureProvider.getInstance().getFeature(\n                    \"saqn:op:mcpm2p5\"\n                ) as Feature\n            );\n        }\n        if (this.config.getFeatures().length === 0) {\n            throw Error(\"Invalid MapConfiguration\");\n        }\n    }\n\n    // Called when a pin on the map is clicked, gets information from server\n    async handlePopup(pin: MapPin): Promise<Observation> {\n        var station = await DataProvider.getStation(pin.getId());\n        return DataProvider.getLatestObservation(\n            station,\n            this.config.getFeatures()[0]\n        );\n    }\n\n    // Store configuration and viewport in local storage\n    private save() {\n        MapConfigurationMemory.save(this.config, this.viewport);\n    }\n\n    // Current configuration id and feature id\n    getFeatureSelectConf(): { conf: string; feature: string } {\n        var f = this.config.getFeatures()[0].getId();\n        var c = this.config.getId();\n        return { conf: c, feature: f };\n    }\n\n    // Current viewport\n    getViewport(): Viewport {\n        return this.viewport;\n    }\n\n    // Called if the viewport has changed significantly\n    handleViewportChange(viewport: Viewport) {\n        if (viewport.getZoom() < 5) {\n            viewport = new Viewport(viewport.getCenter(), 5);\n        }\n        this.viewport = viewport;\n        this.save();\n    }\n\n    // Pins for leaflet map\n    async getPins(): Promise<MapPin[]> {\n        return this.config.getPins(this.viewport);\n    }\n\n    // Polygons to be drawn\n    async getPolygons(): Promise<Polygon[]> {\n        return this.config.getPolygons(this.viewport);\n    }\n\n    // The leaflet scale of the map\n    getScale(): Scale {\n        return this.config.getScale();\n    }\n\n    getSelectedFeature(): Feature {\n        return this.config.getFeatures()[0];\n    }\n\n    // Switch to configuration with different feature\n    changeFeature(feature: Feature) {\n        switch (this.config.getId()) {\n            case \"StationConfiguration\":\n                this.config = new StationConfiguration(feature);\n                break;\n            case \"NearConfiguration\":\n                this.config = new NearConfiguration(feature);\n                break;\n            case \"PolygonConfiguration\":\n                this.config = new PolygonConfiguration(feature);\n                break;\n\n            default:\n                throw new Error(\n                    \"Current configuration has invalid id: \" +\n                        this.config.getId()\n                );\n        }\n    }\n\n    // Called when user changes configuration\n    onConfigurationChange(conf: MapConfiguration) {\n        this.config = conf;\n        this.save();\n    }\n\n    // Get Position from search term using the nominatim API\n    async search(searchTerm: string): Promise<void> {\n        if (searchTerm.length === 0) {\n            return; //No search possible\n        }\n\n        var response = await fetch(\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\n                encodeURIComponent(searchTerm)\n        );\n        var json = await response.json();\n        if (json.length === 0) {\n            return Promise.reject(); //No location found\n        }\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\n        return Promise.resolve();\n    }\n\n    // Set new position\n    updateCurrentPosition(position: Position) {\n        this.viewport.setCenter(position);\n        this.save();\n    }\n}\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n    Avatar,\n    Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    Typography,\n    Divider,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport MapConfiguration from \"../../Controller/MapPage/MapConfiguration\";\nimport { Feature } from \"../../Model/Feature\";\nimport NearConfiguration from \"../../Controller/MapPage/NearConfiguration\";\nimport StationConfiguration from \"../../Controller/MapPage/StationConfiguration\";\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\nimport Language from \"../../Controller/Storage/Language\";\ninterface Props {\n    onConfigurationChange(mapConfig: MapConfiguration): void;\n    startConf?: { conf: string; feature: string };\n}\n\nlet language = Language.getInstance();\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            background: theme.palette.primary.main,\n            position: \"relative\",\n        },\n        title: {\n            textAlign: \"center\",\n            width: \"100%\",\n            marginBottom: \"10px\",\n        },\n        popup: {\n            padding: \"20px\",\n            paddingBottom: \"50px\",\n            marginBottom: \"-40px\",\n        },\n        formControl: {\n            width: \"100%\",\n            marginTop: \"10px\",\n            marginBottom: \"10px\",\n        },\n    })\n);\n\nexport default function FeatureSelect(props: Props) {\n    const NEAR_CONFIG = \"NearConfiguration\";\n    const POLY_CONFIG = \"PolygonConfiguration\";\n    const STATION_CONFIG = \"StationConfiguration\";\n    const classes = useStyles();\n    const [open, setOpen] = useState<boolean>(true);\n    const [feature, setFeature] = useState<Feature | undefined>(\n        FeatureProvider.getInstance().listAllFeatures()[0]\n    );\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\n\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        setOpen(!open);\n    };\n\n    useEffect(() => {\n        if (props.startConf) {\n            //Get start values from props\n            setFeature(\n                FeatureProvider.getInstance().getFeature(\n                    props.startConf.feature\n                )\n            );\n            setConfig(props.startConf.conf);\n        }\n    }, [props.startConf]);\n\n    const changeConfig = (conf: string, feature: Feature) => {\n        switch (conf) {\n            case NEAR_CONFIG:\n                var nearConf = new NearConfiguration(feature); //Create new config\n                props.onConfigurationChange(nearConf);\n                break;\n            case POLY_CONFIG:\n                var polyConf = new PolygonConfiguration(feature); //Create new config\n                props.onConfigurationChange(polyConf);\n                break;\n            case STATION_CONFIG:\n                var stationConf = new StationConfiguration(feature); //Create new config\n                props.onConfigurationChange(stationConf);\n                break;\n            default:\n                return;\n        }\n        setConfig(conf);\n    };\n\n    const handleFeatureChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        var f = FeatureProvider.getInstance().getFeature(\n            event.target.value as string\n        ); //Feature Id\n        setFeature(f);\n\n        if (f) {\n            if (config) {\n                changeConfig(config, f);\n            }\n        }\n    };\n\n    const handleConfigChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        if (feature) {\n            changeConfig(event.target.value as string, feature);\n        }\n        //window.location.reload(); //Reload with new config\n    };\n\n    return (\n        <Fragment>\n            <Grid container direction=\"column\" alignItems=\"flex-end\">\n                {open ? (\n                    <Card className={classes.popup} variant=\"outlined\">\n                        <Grid container direction=\"column\">\n                            <Typography\n                                id=\"title\"\n                                className={classes.title}\n                                variant=\"subtitle1\"\n                                color=\"textPrimary\"\n                            >\n                                {language.getText(\"map_configuration_title\")}\n                            </Typography>\n                            <Divider orientation=\"horizontal\" />\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Feature\"}</InputLabel>\n                                <Select\n                                    id=\"featureSelectForm\"\n                                    onChange={handleFeatureChange}\n                                    value={feature?.getId() ?? \"\"}\n                                >\n                                    {FeatureProvider.getInstance()\n                                        .listAllFeatures()\n                                        .map((f) => (\n                                            <MenuItem\n                                                value={f.getId()}\n                                                key={f.getId()}\n                                            >\n                                                {f.getName()}\n                                            </MenuItem>\n                                        ))}\n                                </Select>\n                            </FormControl>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel>{\"Style\"}</InputLabel>\n                                <Select\n                                    id=\"confSelectForm\"\n                                    onChange={handleConfigChange}\n                                    value={config ?? \"\"}\n                                >\n                                    <MenuItem value={POLY_CONFIG}>\n                                        {language.getText(POLY_CONFIG)}\n                                    </MenuItem>\n                                    <MenuItem value={STATION_CONFIG}>\n                                        {language.getText(STATION_CONFIG)}\n                                    </MenuItem>\n                                    <MenuItem value={NEAR_CONFIG}>\n                                        {language.getText(NEAR_CONFIG)}\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                    </Card>\n                ) : (\n                    \"\"\n                )}\n                <Avatar\n                    className={classes.root}\n                    id=\"avatarButton\"\n                    onClick={handleClick}\n                >\n                    <LayersIcon />\n                </Avatar>\n            </Grid>\n        </Fragment>\n    );\n}\n","import React, { Fragment, SyntheticEvent } from \"react\";\nimport {\n    IconButton,\n    Divider,\n    InputBase,\n    Grid,\n    Card,\n    Box,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\nimport { Position } from \"../../Model/Position\";\nimport Language from \"../../Controller/Storage/Language\";\n\nimport \"./Search.css\";\n\nlet language = Language.getInstance();\n\ninterface Props {\n    onSearch(event: SyntheticEvent, term: string): void;\n    updatePosition(pos: Position): void;\n}\n\ninterface State {\n    searchTerm: string;\n    locationEnabled: boolean;\n}\n\nexport default class Search extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { searchTerm: \"\", locationEnabled: true };\n        if (\"geolocation\" in navigator) {\n            navigator.permissions\n                .query({ name: \"geolocation\" })\n                .then((status: PermissionStatus) => {\n                    if (status.state === \"denied\") {\n                        //If permission was denied, disable button\n                        this.setState({ locationEnabled: false });\n                    }\n                });\n        }\n    }\n\n    locationClick() {\n        if (\"geolocation\" in navigator) {\n            console.log(\"Available\");\n            navigator.geolocation.getCurrentPosition(\n                (res) => {\n                    //Get position\n                    var position = new Position(\n                        res.coords.latitude,\n                        res.coords.longitude\n                    );\n                    this.props.updatePosition(position);\n                    this.setState({ locationEnabled: true });\n                },\n                (err) => {\n                    //Location denied\n                    console.log(\"Location denied.\");\n                    this.setState({ locationEnabled: false });\n                }\n            );\n        } else {\n            //Browser doesn't support geolocation\n            console.log(\"Not Available\");\n            this.setState({ locationEnabled: false });\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Card className=\"root\">\n                    <form\n                        className=\"search-form\"\n                        onSubmit={(e) =>\n                            this.props.onSearch(e, this.state.searchTerm)\n                        }\n                    >\n                        <InputBase\n                            className=\"input-field\"\n                            data-testid=\"textBox\"\n                            type=\"search\"\n                            onChange={(e) => {\n                                this.setState({\n                                    searchTerm: e.target.value,\n                                });\n                            }}\n                            placeholder={language.getText(\"search\")}\n                        />\n                        <IconButton\n                            className=\"search-button\"\n                            data-testid=\"searchButton\"\n                            type=\"submit\"\n                            onClick={(e) =>\n                                this.props.onSearch(e, this.state.searchTerm)\n                            }\n                        >\n                            <SearchIcon />\n                        </IconButton>\n                        <Box className=\"divider\"></Box>\n                        <IconButton\n                            className=\"location-button\"\n                            data-testid=\"locationButton\"\n                            onClick={() => this.locationClick()}\n                            disabled={!this.state.locationEnabled}\n                        >\n                            <GpsFixedIcon data-testid=\"locationIcon\" />\n                        </IconButton>\n                    </form>\n                </Card>\n            </Fragment>\n        );\n    }\n}\n","import React from \"react\";\nimport { Scale } from \"../../Model/Scale\";\nimport { Box, Grid, Typography, Card, Divider } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            padding: theme.spacing(1),\n        },\n    })\n);\n\ninterface Props {\n    unit: string;\n    scale: Scale;\n    min: number;\n    max: number;\n}\n\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\n    var grad = \"linear-gradient(0deg,\";\n    for (let index = 0; index < 10; index++) {\n        grad =\n            grad +\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\n            \" \" +\n            index * 10 +\n            \"%, \";\n    }\n    grad = grad.slice(0, -2) + \")\";\n    return {\n        background: grad,\n        height: \"100px\",\n        width: \"30px\",\n    };\n}\n\nfunction Legend(props: Props) {\n    const classes = useStyles();\n    return (\n        <Card className={classes.container}>\n            <Grid container direction=\"column\" alignItems=\"center\">\n                <Typography variant=\"body2\">\n                    {Math.floor(props.max * 10) / 10}\n                </Typography>\n                <Box\n                    data-testid=\"legend\"\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\n                />\n                <Typography variant=\"body2\">\n                    {Math.floor(props.min * 10) / 10}\n                </Typography>\n                <Divider orientation=\"horizontal\" flexItem={true} />\n                <Typography variant=\"body2\">\n                    {\"[\" + props.unit + \"]\"}\n                </Typography>\n            </Grid>\n        </Card>\n    );\n}\n\nexport default Legend;\n","import React, { SyntheticEvent } from \"react\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Map } from \"./Map\";\nimport { Feature } from \"../../Model/Feature\";\nimport { Viewport } from \"../../Model/Viewport\";\nimport { MapController } from \"../../Controller/MapPage/MapController\";\nimport { MapPin } from \"../../Model/MapPin\";\nimport { Polygon } from \"../../Model/Polygon\";\nimport { Position } from \"../../Model/Position\";\nimport { Observation } from \"../../Model/Observation\";\nimport FeatureSelect from \"./FeatureSelect\";\nimport Search from \"./Search\";\nimport Legend from \"./Legend\";\nimport { Box, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Color } from \"../../Model/Color\";\n\nimport \"./MapPage.css\";\nimport Language from \"../../Controller/Storage/Language\";\n\nconst styles = (theme: Theme) => ({});\n\ninterface State {\n    selectedStation: ObservationStation | null;\n    pins: MapPin[];\n    polygons: Polygon[];\n    viewport: Viewport;\n    additionalPins: MapPin[];\n}\n\ninterface Props {\n    classes: any;\n}\n\nconst DEFAULT_MIN = 0;\nconst DEFAULT_MAX = 100;\n\nclass MapPage extends React.Component<Props, State> {\n    mapController: MapController;\n\n    constructor(props: Props) {\n        super(props);\n        this.mapController = new MapController();\n\n        this.state = {\n            selectedStation: null,\n            viewport: this.mapController.getViewport(),\n            pins: [],\n            polygons: [],\n            additionalPins: [],\n        };\n        this.update();\n    }\n\n    // Set station as source for the StationInfo Popup\n    changePopupStation(station: ObservationStation) {\n        this.setState({\n            selectedStation: station,\n        });\n    }\n\n    // Reload Pins and Polygons\n    update() {\n        var pinPromise = this.mapController.getPins();\n        var polyPromise = this.mapController.getPolygons();\n        Promise.all([pinPromise, polyPromise]).then((pinPoly) => {\n            this.setState({\n                pins: pinPoly[0],\n                polygons: pinPoly[1],\n            });\n        });\n    }\n\n    getValueAt(position: Position, feature: Feature): number {\n        // Get pins sorted by distance\n        var sortedPins = this.state.pins.sort((a, b) => {\n            return (\n                a.getPosition().getDistance(position) -\n                b.getPosition().getDistance(position)\n            );\n        });\n        var dis = 0; //Distance of nearest station to position\n        var disSum = 0;\n        if (sortedPins.length !== 0) {\n            dis = sortedPins[0].getPosition().getDistance(position);\n        }\n        var value = 0;\n        for (let i = 0; i <= 2; i++) {\n            //nearest 3 stations (if they exist)\n            if (sortedPins.length > i) {\n                var temp =\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\n                disSum += temp;\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\n            }\n        }\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\n    }\n\n    onViewportChange(viewport: Viewport) {\n        this.mapController.handleViewportChange(viewport);\n        //Update Page\n        this.setState({\n            viewport: viewport,\n        });\n        this.update();\n    }\n\n    async onStationSelected(pin: MapPin): Promise<Observation> {\n        if (this.state.additionalPins.some((p) => pin.getId() === p.getId())) {\n            // Not a station, do nothing\n            return new Promise(() => {\n                return null;\n            });\n        }\n        this.setState({ selectedStation: null });\n        var promise = this.mapController.handlePopup(pin);\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\n        return promise;\n    }\n\n    onSearch(event: SyntheticEvent, term: string) {\n        event.preventDefault();\n        this.mapController.search(term).then(\n            () => {\n                this.setHomeMarker();\n                this.update();\n            },\n            () => {\n                alert(\n                    Language.getInstance()\n                        .getText(\"searchAlert\")\n                        .replace(\"{term}\", term)\n                );\n            }\n        );\n    }\n\n    setHomeMarker() {\n        var mp = new MapPin(\n            \"icon-home-1\",\n            this.state.viewport.getCenter(),\n            -1,\n            new Color(0, 0, 0)\n        );\n        this.setState({\n            additionalPins: [mp],\n            pins: this.state.pins,\n        });\n    }\n\n    getMin(): number {\n        var min = Math.min.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(min)) {\n            min = DEFAULT_MIN;\n        }\n        return min;\n    }\n\n    getMax(): number {\n        var max = Math.max.apply(\n            Math,\n            this.state.pins.map((p) => {\n                return p.getValue();\n            })\n        );\n        if (!isFinite(max)) {\n            max = DEFAULT_MAX;\n        }\n        return max;\n    }\n\n    render() {\n        var min = this.getMin();\n        var max = this.getMax();\n        return (\n            <Box className=\"map-page\">\n                <Box className=\"search\">\n                    <Search\n                        onSearch={(event, term) => this.onSearch(event, term)}\n                        updatePosition={(pos) => {\n                            var view = this.state.viewport;\n                            view.setCenter(pos);\n                            this.setHomeMarker();\n                            this.onViewportChange(view);\n                        }}\n                    />\n                </Box>\n                <Box className=\"map\">\n                    <Map\n                        viewport={this.state.viewport}\n                        onViewportChange={(viewport) => {\n                            this.onViewportChange(viewport);\n                        }}\n                        handlePopup={(pin) => this.onStationSelected(pin)}\n                        pins={this.state.pins.concat(this.state.additionalPins)}\n                        polygons={this.state.polygons}\n                    />\n                </Box>\n                <Box className=\"feature-select\">\n                    <FeatureSelect\n                        onConfigurationChange={(conf) => {\n                            this.mapController.onConfigurationChange(conf);\n                            this.update();\n                        }}\n                        startConf={this.mapController.getFeatureSelectConf()}\n                    />\n                </Box>\n                <Box className=\"legend\">\n                    <Legend\n                        min={min}\n                        max={max}\n                        unit={this.mapController\n                            .getSelectedFeature()\n                            .getUnitOfMeasurement()}\n                        scale={this.mapController.getScale()}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default withStyles(styles)(MapPage);\n","import React from 'react';\n\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\n\n    code: number;\n    message: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.code = this.props.code;\n        this.message = this.props.message;\n    }\n\n    render() {\n        return (\n            <div className=\"informationPage\">\n                <h1>Error</h1>\n                <h2>{this.code}</h2>\n                <p>{this.message}</p>\n            </div>\n        );\n    }\n}\n\ninterface IErrorPageProps {\n    code: number;\n    message: string;\n}\n\ninterface IErrorPageState {\n\n\n}","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class AboutPage extends React.Component<\n    IAboutPageProps,\n    IAboutPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"about\")}</h1>\n                <h3>{language.getText(\"aboutText\")}</h3>\n            </p>\n\n        </div>\n    }\n}\n\ninterface IAboutPageProps { }\n\ninterface IAboutPageState { }","import React from \"react\";\nimport Language from \"../Controller/Storage/Language\";\nimport \"./informationPage.css\";\n\nlet language = Language.getInstance();\n\nexport default class PrivacyPolicyPage extends React.Component<\n    IPrivacyPolicyPageProps,\n    IPrivacyPolicyPageState\n    > {\n    render() {\n        return <div>\n            <p className=\"informationPage\">\n                <h1>{language.getText(\"privacyPolicy\")}</h1>\n                <h3>{language.getText(\"privacyPolicyText\")}</h3>\n            </p>\n        </div>\n    }\n}\n\ninterface IPrivacyPolicyPageProps { }\n\ninterface IPrivacyPolicyPageState { }\n","import React from \"react\";\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\nimport Language from \"../../Controller/Storage/Language\";\n\ninterface IState {\n    selectedLang: string;\n    anchorEl: Element | null;\n}\n\ninterface IProps {\n    language: Language;\n}\n\nexport default class LanguageMenu extends React.Component<IProps, IState> {\n    private availableLanguages: Map<string, string>;\n    private ref: any;\n    private language: Language;\n\n    constructor(props: IProps) {\n        super(props);\n        this.language = props.language;\n        this.state = {\n            selectedLang: this.language.getSelectedLanguage(),\n            anchorEl: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.availableLanguages = this.language.getAvailableLanguages();\n    }\n\n    isSelectedLang(lang: string): boolean {\n        //return lang === this.state.selectedLang;\n        return false;\n    }\n\n    handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\n        this.setState({ anchorEl: event.currentTarget });\n    }\n\n    handleClose(): void {\n        this.setState({ anchorEl: null });\n    }\n\n    handleMenuItemClick(\n        event: React.MouseEvent<HTMLElement>,\n        id: string\n    ): void {\n        this.language.changeLanguage(id);\n        window.location.reload();\n        this.setState({\n            anchorEl: null,\n            selectedLang: this.language.getSelectedLanguage(),\n        });\n    }\n\n    langList(): JSX.Element[] {\n        let list: JSX.Element[] = [];\n        this.availableLanguages.forEach((lang: string, id: string) => {\n            list.push(\n                <MenuItem\n                    onClick={(e) => this.handleMenuItemClick(e, id)}\n                    selected={id === this.language.getSelectedLanguageId()}\n                >\n                    {lang}\n                </MenuItem>\n            );\n        });\n        return list;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div>\n                <Button\n                    onClick={this.handleClick}\n                    color=\"inherit\"\n                    startIcon={<Translate />}\n                    endIcon={<ExpandMore />}\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                >\n                    {this.state.selectedLang}\n                </Button>\n                <Menu\n                    open={Boolean(this.state.anchorEl)}\n                    anchorEl={this.state.anchorEl}\n                    onClose={this.handleClose}\n                >\n                    {this.langList()}\n                </Menu>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport LanguageMenu from './LanguageMenu';\nimport Language from '../../Controller/Storage/Language';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface IPageMenuProps {\n    language: Language;\n}\n\ninterface IPageMenuState {\n    open: boolean;\n}\n\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\n\n    private language: Language;\n\n    constructor(props: IPageMenuProps) {\n        super(props);\n        this.language = props.language;\n        this.state = { open: false };\n        this.toogleDrawer = this.toogleDrawer.bind(this);\n    }\n\n    private toogleDrawer() {\n        const toogle = !this.state.open;\n        this.setState({ open: toogle });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\" style={{\n                    height: '64px',\n                    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2)',\n                    position: 'relative',\n                    zIndex: 20,\n                }}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\n                            SmartAQnet\n                        </Typography>\n                        <div style={{ marginLeft: 'auto' }}>\n\n                            <LanguageMenu language={this.language} />\n\n                        </div>\n                        <div>\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\n                                <MenuIcon />\n                            </IconButton>\n                        </div>\n                    </Toolbar>\n                </AppBar>\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\n                    <div style={{ width: 250 }}>\n                        <List>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\n                                <ListItemIcon>\n                                    <SecurityIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\n                                <ListItemIcon>\n                                    <InfoIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={this.language.getText(\"about\")} />\n                            </ListItem>\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\n                                <ListItemIcon>\n                                    <ExitToAppIcon />\n                                </ListItemIcon>\n                                <ListItemText primary=\"SmartAQnet\" />\n                            </ListItem>\n                        </List>\n                    </div>\n                </SwipeableDrawer>\n            </Fragment>\n        );\n    }\n}","import React from \"react\";\nimport MapPage from \"../MapPage/MapPage\";\nimport DetailPage from \"./../DetailPage/DetailPage\";\nimport ErrorPage from \"../ErrorPage\";\nimport AboutPage from \"./../About\";\nimport PrivacyPolicyPage from \"./../PrivacyPolicy\";\nimport PageMenu from \"./PageMenu\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Language from \"../../Controller/Storage/Language\";\nimport './Layout.css'\n\nfunction Layout() {\n    let language: Language = Language.getInstance();\n\n    return (\n        <div className=\"app\">\n            <Router>\n                <PageMenu language={language} />\n                <div className='page-content'>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/\"\n                            component={MapPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/detail/:id\"\n                            component={DetailPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/about\"\n                            component={AboutPage}\n                        />\n                        <Route\n                            exact\n                            path=\"/pse-airquality-react/privacy-policy\"\n                            component={PrivacyPolicyPage}\n                        />\n                        {/* If no url pattern matches an error page is shown */}\n                        <Route>\n                            <ErrorPage\n                                code={404}\n                                message={Language.getInstance().getText(\"Error404\")}\n                            />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nexport default Layout;\n","import FeatureProvider from \"../FeatureProvider\";\nimport { isNullOrUndefined } from \"util\";\n\nexport default class Configuration {\n    private static instance: Configuration | null;\n    private language: string = \"de-de\";\n    private frostUrl: string = \"\";\n\n    // Return singleton instance\n    static getInstance(): Configuration {\n        if (!Configuration.instance) {\n            Configuration.load();\n        }\n        return Configuration.instance as Configuration;\n    }\n\n    // Load instance from config.json\n    private static load() {\n        var json = require(\"../../Jsons/config.json\"); //Load config\n        var iConf = json as IConfig;\n        console.log(iConf);\n        if (isNullOrUndefined(iConf)) {\n            throw new Error(\"Config.json has wrong format.\");\n        }\n        var newConf = new Configuration();\n        newConf.language = iConf.language;\n        newConf.frostUrl = iConf.frostUrl;\n        iConf.supportedFeatures.forEach(\n            (f) => FeatureProvider.getInstance().getFeature(f) //Load all supported features\n        );\n\n        Configuration.instance = newConf;\n    }\n\n    // The default value for the language id\n    getLanguage(): string {\n        return this.language;\n    }\n\n    // The Url of the top level FROST REST API\n    getFrostUrl(): string {\n        return this.frostUrl;\n    }\n}\n\ninterface IConfig {\n    frostUrl: string;\n    language: string;\n    supportedFeatures: string[];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport lightGreen from \"@material-ui/core/colors/green\";\nimport Layout from \"./View/Layout/Layout\";\nimport Configuration from \"./Controller/Storage/Configuration\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: lightGreen[500],\n        },\n        secondary: {\n            main: purple[500],\n        },\n    },\n});\n\nConfiguration.getInstance(); //Initialize App Config\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <Layout />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as languageData from \"./languages.json\";\n\ninterface Lang {\n    id: string;\n    name: string;\n    strings: Strings;\n}\n\ninterface Strings {\n    [id: string]: string;\n}\n\nexport default class Language {\n    private static languageInstance: Language | null = null;\n\n    private selectedLangId: string;\n    private languages: Lang[];\n    private selectedLang: Lang;\n\n    //class Language is designed as a singleton. You can get access to the only instance via the getInstance method\n    constructor() {\n        this.selectedLangId = \"\";\n        this.languages = languageData.languages;\n        this.selectedLang = this.languages[0];\n    }\n\n    //returns the language instance\n    public static getInstance(): Language {\n        if (!Language.languageInstance) {\n            Language.languageInstance = new Language();\n            var local = localStorage.getItem(\"language\");\n            if (local) {\n                //Change language if selected\n                Language.languageInstance.changeLanguage(local);\n            }\n        }\n        return Language.languageInstance as Language;\n    }\n\n    //returns the string that corresponds to the string id in the currently selected language\n    public getText(id: string): string {\n        let text: string = this.selectedLang.strings[id];\n        if (text === \"\" || text == null) {\n            throw new Error(\n                `There is no string with id: ${id} in ${this.selectedLang.name}.`\n            );\n        }\n        return text;\n    }\n\n    public getSelectedLanguage(): string {\n        return this.selectedLang.name;\n    }\n\n    public getSelectedLanguageId(): string {\n        return this.selectedLang.id;\n    }\n\n    public changeLanguage(languageID: string): void {\n        let find: Lang | undefined = this.languages.find(\n            (e) => e.id === languageID\n        );\n        if (find !== undefined) {\n            this.selectedLang = find;\n            this.selectedLangId = languageID;\n            localStorage.setItem(\"language\", this.selectedLangId);\n        }\n    }\n\n    public getAvailableLanguages(): Map<string, string> {\n        let langs: Map<string, string> = new Map<string, string>();\n        this.languages.forEach((element) => {\n            langs.set(element.id, element.name);\n        });\n        return langs;\n    }\n\n    public getDateString(date: Date): string {\n        let languageId = this.getSelectedLanguageId();\n        return date.toLocaleString(languageId);\n    }\n}\n","export class FrostResult<T> {\n    private result: T | null; //payload of the response from the FROST server\n    private success: boolean;\n    private errorMessage: string;\n\n    constructor(result: T | null, success: boolean, errorMessage: string) {\n        this.result = result;\n        this.success = success;\n        this.errorMessage = errorMessage;\n    }\n\n    getResult(): T | null {\n        return this.result;\n    }\n\n    getSuccess(): boolean {\n        return this.success;\n    }\n\n    getMessage(): string {\n        return this.errorMessage;\n    }\n}\n","import { FrostResult } from \"../../Model/FrostResult\";\nimport FrostFactory from \"./FrostFactory\";\n\nexport default class FrostServer {\n    private url: string;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    public getUrl(): string {\n        return this.url;\n    }\n\n    public setUrl(url: string): void {\n        this.url = url;\n    }\n\n    public async request<T>(\n        ff: FrostFactory<T>,\n        options: any\n    ): Promise<FrostResult<T>> {\n        //get query from query builder\n        let query: string = ff.getQueryBuilder().getQuery(options);\n\n        //fetch response\n        let response: Response = await fetch(this.url + query);\n        if (!response.ok) {\n            //something went wrong in the fetching process\n            return new FrostResult<T>(\n                null,\n                false,\n                `Fetching Error: ${response.status} ${response.statusText}`\n            );\n        }\n\n        //convert response to json\n        let json: JSON = await response.json();\n\n        try {\n            //get type specific json converter\n            let converter = ff.getConverter();\n            //convert json to specific objects\n            let result: T = converter.convert(json, options);\n\n            return new FrostResult<T>(result, true, \"No error occured\");\n        } catch (error) {\n            //something went wrong in the convertion process\n            return new FrostResult<T>(null, false, (error as Error).message);\n        }\n    }\n}\n","import ResultModelConverter from \"./ResultModelConverter\";\nimport QueryBuilder from \"./QueryBuilder\";\n\nexport default abstract class FrostFactory<T> {\n    private rmc: ResultModelConverter<T>;\n    private qb: QueryBuilder;\n\n    constructor(rmc: ResultModelConverter<T>, qb: QueryBuilder) {\n        this.rmc = rmc;\n        this.qb = qb;\n    }\n\n    public getConverter(): ResultModelConverter<T> {\n        return this.rmc;\n    }\n\n    public getQueryBuilder(): QueryBuilder {\n        return this.qb;\n    }\n}\n","import { Position } from \"./Position\";\nimport { Feature } from \"./Feature\";\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\n\nexport class ObservationStation {\n    private id: string;\n    private name: string;\n    private description: string;\n    private position: Position;\n    private availableFeatures: Feature[];\n\n    constructor(\n        id: string,\n        name: string,\n        description: string,\n        position: Position,\n        availableFeatures: Feature[]\n    ) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.position = position;\n        this.availableFeatures = availableFeatures;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public getPosition(): Position {\n        return this.position;\n    }\n\n    public getFeatures(): Feature[] {\n        return this.availableFeatures;\n    }\n\n    public getDiagramController(): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        for (let feature of this.availableFeatures) {\n            let featureDiagramControllerArray = feature.getDiagramController(\n                this\n            );\n            for (let controller of featureDiagramControllerArray) {\n                diagramController.push(controller);\n            }\n        }\n        return diagramController;\n    }\n\n    public hasFeature(feature: Feature): boolean {\n        return this.availableFeatures.find((f) => f.getId() === feature.getId())\n            ? true\n            : false;\n    }\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetStationFactory extends FrostFactory<ObservationStation> {\n    constructor() {\n        super(new GetStationConverter(), new GetStationBuilder());\n    }\n}\n\nexport class GetStationConverter\n    implements ResultModelConverter<ObservationStation> {\n    public convert(\n        json: ObservationStationEntity,\n        options: getStationOptions\n    ): ObservationStation {\n        let pos: Position;\n        if (json.Locations === undefined || json.Locations === null || json.Locations[0] === undefined || json.Locations[0] === null) {\n            throw new Error(\"Thing has no Location\");\n        } else {\n            pos = new Position(\n                json.Locations[0].location.coordinates[1],\n                json.Locations[0].location.coordinates[0]\n            );\n        }\n\n        let features: Feature[] = [];\n\n        let fp: FeatureProvider = FeatureProvider.getInstance();\n        json.Datastreams.forEach((element) => {\n            let getfeat: Feature | undefined = fp.getFeature(\n                element.ObservedProperty[\"@iot.id\"]\n            );\n            if (getfeat !== undefined) {\n                let feat: Feature = getfeat;\n                let isin: boolean = false;\n                features.forEach(f => {\n                    if (f.getId() === feat.getId()) {\n                        isin = true;\n                    }\n                })\n                if (isin === false) {\n                    features.push(getfeat);\n                }\n            }\n        });\n\n        return new ObservationStation(\n            json[\"@iot.id\"],\n            json.name,\n            json.description,\n            pos,\n            features\n        );\n    }\n}\n\nexport class GetStationBuilder implements QueryBuilder {\n    public getQuery(options: getStationOptions): string {\n        return (\n            \"Things('\" +\n            options.id +\n            \"')?$select=@iot.id,name,description&$expand=Locations($select=location),Datastreams/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface getStationOptions {\n    id: string;\n}\n\ninterface ObservationStationEntity {\n    name: string;\n    description: string;\n    Datastreams: DatastreamsEntity[];\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedPropertyEntity;\n}\ninterface ObservedPropertyEntity {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: LocationEntity;\n}\ninterface LocationEntity {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetObservationStationsFactory extends FrostFactory<\n    ObservationStation[]\n    > {\n    constructor() {\n        super(\n            new GetObservationStationsConverter(),\n            new GetObservationStationsBuilder()\n        );\n    }\n}\n\nexport class GetObservationStationsConverter\n    implements ResultModelConverter<ObservationStation[]> {\n    public convert(\n        json: ResultList,\n        options: GetObservationStationsOptions\n    ): ObservationStation[] {\n        let stations: ObservationStation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n        json.value.forEach((element) => {\n            let coord: number[] = element.Locations[0].location.coordinates;\n            let pos: Position = new Position(coord[1], coord[0]);\n\n            let features: Feature[] = [];\n            let fp: FeatureProvider = FeatureProvider.getInstance();\n            if (\n                element.Datastreams === null ||\n                element.Datastreams === undefined\n            ) {\n                throw new Error(\"Cannot parse response of server\");\n            }\n            element.Datastreams.forEach((stream) => {\n                let feat: Feature | undefined = fp.getFeature(\n                    stream.ObservedProperty[\"@iot.id\"]\n                );\n                if (feat !== undefined) {\n                    features.push(feat);\n                }\n            });\n            stations.push(\n                new ObservationStation(\n                    element[\"@iot.id\"],\n                    element.name,\n                    element.description,\n                    pos,\n                    []\n                )\n            );\n        });\n        return stations;\n    }\n}\n\nexport class GetObservationStationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationStationsOptions): string {\n        return (\n            \"Things?$filter=geo.distance(Locations/location,geography'POINT(\" +\n            options.middle.getLongitude() +\n            \" \" +\n            options.middle.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))&$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)\"\n        );\n    }\n}\n\nexport interface GetObservationStationsOptions {\n    middle: Position;\n    radius: number;\n}\n\nexport interface ResultList {\n    value?: ValueEntity[] | null;\n}\nexport interface ValueEntity {\n    name: string;\n    description: string;\n    properties?: Properties | null;\n    \"Datastreams@iot.navigationLink\": string;\n    Datastreams?: DatastreamsEntity[] | null;\n    \"MultiDatastreams@iot.navigationLink\": string;\n    \"Locations@iot.navigationLink\": string;\n    Locations: LocationsEntity[];\n    \"HistoricalLocations@iot.navigationLink\": string;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Properties {\n    \"hardware.id\": string;\n    shortname: string;\n    \"operator.domain\": string;\n    station_active_from?: string | null;\n    station_setting_name?: string | null;\n    \"station type name\"?: string | null;\n    station_no?: number | null;\n    documentation?: string | null;\n}\nexport interface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\nexport interface ObservedProperty {\n    \"@iot.id\": string;\n}\nexport interface LocationsEntity {\n    location: Location;\n}\nexport interface Location {\n    type: string;\n    coordinates: number[];\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\n\nexport class GetLatestObservationFactory extends FrostFactory<Observation> {\n    constructor() {\n        super(\n            new GetLatestObservationConverter(),\n            new GetLatestObservationBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationConverter\n    implements ResultModelConverter<Observation> {\n    //convert json to Observation object\n    public convert(\n        json: any,\n        options: GetLatestObservationOptions\n    ): Observation {\n        let rl: ResultList;\n        try {\n            //apply pattern\n            rl = json;\n        } catch {\n            throw new Error(\"Convertion Error: Unknown json pattern\");\n        }\n\n        let observation: ObservationsEntity = rl.value[0].Observations[0];\n\n        return new Observation(\n            options.station,\n            options.feature,\n            observation.result,\n            new Date(observation.phenomenonTime)\n        );\n    }\n}\n\nexport class GetLatestObservationBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() +\n            \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Observations($top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationOptions {\n    station: ObservationStation;\n    feature: Feature;\n}\n\nexport interface ResultList {\n    value: ValueEntity[];\n}\nexport interface ValueEntity {\n    Observations: ObservationsEntity[];\n    \"Observations@iot.nextLink\"?: string;\n    \"@iot.id\": string;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { Position } from \"../../../Model/Position\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\nimport FeatureProvider from \"../../FeatureProvider\";\n\nexport class GetLatestObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(\n            new GetLatestObservationsConverter(),\n            new GetLatestObservationsBuilder()\n        );\n    }\n}\n\nexport class GetLatestObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(\n        json: ResultList,\n        options: GetLatestObservationsOptions\n    ): Observation[] {\n        let observations: Observation[] = [];\n        if (json.value === null || json.value === undefined) {\n            throw new Error(\"Cannot parse response of server\");\n        }\n\n        json.value.forEach((stream) => {\n            try {\n                let thing: Thing = stream.Thing;\n                if (thing.Locations === null || thing.Locations === undefined) {\n                    return;\n                }\n                if (\n                    thing.Locations[0].location.coordinates === null ||\n                    thing.Locations[0].location.coordinates === undefined\n                ) {\n                    return;\n                }\n                let pos: Position = new Position(\n                    thing.Locations[0].location.coordinates[1],\n                    thing.Locations[0].location.coordinates[0]\n                );\n\n                let features: Feature[] = [];\n\n                if (\n                    thing.Datastreams === null ||\n                    thing.Datastreams === undefined\n                ) {\n                    return;\n                }\n\n                let fp: FeatureProvider = FeatureProvider.getInstance();\n\n                thing.Datastreams.forEach((dastream) => {\n                    let feat: Feature | undefined = fp.getFeature(\n                        dastream.ObservedProperty[\"@iot.id\"]\n                    );\n                    if (feat !== undefined) {\n                        features.push(feat);\n                    }\n                });\n\n                let sta: ObservationStation = new ObservationStation(\n                    thing[\"@iot.id\"],\n                    thing.name,\n                    thing.description,\n                    pos,\n                    features\n                );\n\n                if (\n                    stream.Observations === null ||\n                    stream.Observations === undefined\n                ) {\n                    return;\n                }\n                if (stream.Observations[0] === null || stream.Observations[0] === undefined) {\n                    return;\n                }\n                observations.push(\n                    new Observation(\n                        sta,\n                        options.feature,\n                        stream.Observations[0].result,\n                        new Date(stream.Observations[0].phenomenonTime)\n                    )\n                );\n            } catch (e) { }\n        });\n\n        return observations;\n    }\n}\n\nexport class GetLatestObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetLatestObservationsOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id,name&$filter=geo.distance(Thing/Locations/location,geography'POINT(\" +\n            options.center.getLongitude() +\n            \" \" +\n            options.center.getLatitude() +\n            \")') lt \" +\n            options.radius +\n            \" and overlaps(phenomenonTime,(now() sub duration'P1d')) and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Thing($select=name,description,@iot.id;$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)),Observations($select=result,phenomenonTime;$filter=phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1)\"\n        );\n    }\n}\n\nexport interface GetLatestObservationsOptions {\n    center: Position;\n    radius: number;\n    feature: Feature;\n}\n\ninterface ResultList {\n    value?: ValueEntity[] | null;\n}\ninterface ValueEntity {\n    name: string;\n    Thing: Thing;\n    Observations?: (ObservationsEntity | null)[] | null;\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string | null;\n}\ninterface Thing {\n    name: string;\n    description: string;\n    Datastreams?: DatastreamsEntity[] | null;\n    Locations?: LocationsEntity[] | null;\n    \"@iot.id\": string;\n}\ninterface DatastreamsEntity {\n    name: string;\n    ObservedProperty: ObservedProperty;\n}\ninterface ObservedProperty {\n    \"@iot.id\": string;\n}\ninterface LocationsEntity {\n    location: Location;\n}\ninterface Location {\n    type: string;\n    coordinates?: number[] | null;\n}\ninterface ObservationsEntity {\n    phenomenonTime: string;\n    result: number;\n}\n","import QueryBuilder from \"../QueryBuilder\";\nimport FrostFactory from \"../FrostFactory\";\nimport { Observation } from \"../../../Model/Observation\";\nimport ResultModelConverter from \"../ResultModelConverter\";\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\nimport { Feature } from \"../../../Model/Feature\";\n\nexport class GetObservationsFactory extends FrostFactory<Observation[]> {\n    constructor() {\n        super(new GetObservationsConverter(), new GetObservationsBuilder());\n    }\n}\n\nexport class GetObservationsConverter\n    implements ResultModelConverter<Observation[]> {\n    public convert(json: any, options: GetObservationsOptions): Observation[] {\n        let rl: ResultList;\n\n        try {\n            //convert json to template\n            rl = json;\n        } catch {\n            throw new Error(\"Convertion Error: unknown json template\");\n        }\n\n        let observations: Observation[] = [];\n\n        rl.value.forEach((stream) => {\n            stream.Observations.forEach((obs) => {\n                observations.push(\n                    new Observation(\n                        options.station,\n                        options.feature,\n                        obs.result,\n                        new Date(obs.phenomenonTime)\n                    )\n                );\n            });\n        });\n\n        return observations;\n    }\n}\n\nexport class GetObservationsBuilder implements QueryBuilder {\n    public getQuery(options: GetObservationsOptions): string {\n        return (\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\n            options.station.getId() +\n            \"' and ObservedProperty/@iot.id eq '\" +\n            options.feature.getId() +\n            \"'&$expand=Observations($filter=overlaps(phenomenonTime, \" +\n            options.start.toISOString() +\n            \"/\" +\n            options.end.toISOString() +\n            \");$orderby=phenomenonTime desc)\"\n        );\n    }\n}\n\nexport interface GetObservationsOptions {\n    station: ObservationStation;\n    feature: Feature;\n    start: Date;\n    end: Date;\n}\n\nexport interface ResultList {\n    value: ValueEntity[];\n}\nexport interface ValueEntity {\n    Observations: ObservationsEntity[];\n    \"@iot.id\": string;\n    \"Observations@iot.nextLink\"?: string;\n}\nexport interface ObservationsEntity {\n    phenomenonTime: string;\n    resultTime: string;\n    result: number;\n    parameters: Parameters;\n    \"@iot.id\": string;\n    \"@iot.selfLink\": string;\n}\nexport interface Parameters {\n    \"last calibration\": string;\n}\n","import { Feature } from \"../../Model/Feature\";\nimport { Observation } from \"../../Model/Observation\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Position } from \"../../Model/Position\";\nimport FrostServer from \"./FrostServer\";\nimport { GetStationFactory } from \"./factories/GetStation\";\nimport { FrostResult } from \"../../Model/FrostResult\";\nimport { GetObservationStationsFactory } from \"./factories/GetObservationStations\";\nimport { GetLatestObservationFactory } from \"./factories/GetLatestObservation\";\nimport { GetLatestObservationsFactory } from \"./factories/GetLatestObservations\";\nimport { GetObservationsFactory } from \"./factories/GetObservations\";\n\nexport default class DataProvider {\n    private static server: FrostServer = new FrostServer(\n        \"https://api.smartaq.net/v1.0/\"\n    );\n\n    private static handleFrostResult<T>(fr: FrostResult<T>): T {\n        let result: T | null = fr.getResult();\n        if (!fr.getSuccess() || result === null) {\n            //Error handling here\n            throw new Error(fr.getMessage());\n        } else {\n            return result;\n        }\n    }\n\n    // returns all observation stations that are located within a specified radius around a geo position\n    static async getObservationStations(\n        middle: Position,\n        radius: number\n    ): Promise<ObservationStation[]> {\n        let frostFactory = new GetObservationStationsFactory();\n        let options = { middle, radius };\n\n        //fetch data\n        let fr: FrostResult<ObservationStation[]> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservation(\n        station: ObservationStation,\n        feature: Feature\n    ): Promise<Observation> {\n        //fetch data\n        let fr: FrostResult<Observation> = await this.server.request(\n            new GetLatestObservationFactory(),\n            { station, feature }\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getStation(id: string): Promise<ObservationStation> {\n        let frostFactory = new GetStationFactory();\n        let options = { id };\n\n        //fetch data\n        let fr: FrostResult<ObservationStation> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        //check whether something went wrong\n        if (!fr.getSuccess()) {\n            throw new Error(fr.getMessage());\n        }\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getLatestObservations(\n        center: Position,\n        radius: number,\n        feature: Feature\n    ): Promise<Observation[]> {\n        let frostFactory = new GetLatestObservationsFactory();\n        let options = { center, radius, feature };\n\n        //fetch data\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            frostFactory,\n            options\n        );\n\n        return this.handleFrostResult(fr);\n    }\n\n    static async getObservations(\n        station: ObservationStation,\n        feature: Feature,\n        start: Date,\n        end: Date\n    ): Promise<Observation[]> {\n        let frostFactory = new GetObservationsFactory();\n\n        let options = [];\n\n        var step = new Date(start.getTime() + 6 * 60 * 60 * 1000);\n\n        do {\n            options.push({\n                station,\n                feature,\n                start: new Date(start.getTime()),\n                end: new Date(step < end ? step.getTime() : end.getTime()),\n            });\n            start.setHours(start.getHours() + 6);\n            step.setHours(step.getHours() + 6);\n        } while (step < end);\n\n        var promises: Promise<FrostResult<Observation[]>>[] = [];\n\n        options.forEach((o) => {\n            promises.push(this.server.request(frostFactory, o));\n        });\n        let res = await Promise.all(promises);\n        /*//fetch data\n        let fr: FrostResult<Observation[]> = await this.server.request(\n            frostFactory,\n            options\n        );*/\n\n        return res.flatMap((r) => this.handleFrostResult(r));\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\n\nexport default interface IDiagramController {\n    observationStation: ObservationStation;\n    feature: Feature;\n\n    getID: () => string;\n    //returns type of chart\n    getChartType: () => ChartType;\n\n    //returns options that specify how the diagram is displayed\n    getGraphicsOptions: () => {};\n\n    //returns whether the diagram is configurable\n    isConfigurable: () => boolean;\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption: () => string;\n\n    //return names of configuration options\n    getConfigurationOptions: () => string[];\n\n    //sets the current configuration option of the diagram\n    setConfigurationOption: (optionName: string) => void;\n\n    //returns the data that can be displayed in the diagram\n    getData: (\n        configurationOptionName: string\n    ) => Promise<Array<Array<Date | null | number | string>>>;\n}\n\nexport enum ChartType {\n    LINE_CHART = \"LineChart\",\n    PIE_CHART = \"PieChart\",\n}\n","export default class Timespan {\n\n  //length in milliseconds\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n\n  //returns the end of a timespan given the start date\n  public getEnd(start: Date): Date {\n    return (new Date(start.valueOf() + this.length));\n  }\n\n  //returns the start of a timespan given the end date\n  public getStart(end: Date): Date {\n    return (new Date(end.valueOf() - this.length));\n  }\n}\n","import { Observation } from \"../../Model/Observation\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\n\nconst BLOCK_TIME = 1000 * 60 * 15; //15 minutes\n\nexport default class RequestReducer {\n    private static reduceBlocks(obs: Observation[][]): Observation[] {\n        var results: Observation[] = [];\n        obs.forEach((hourBlock) => {\n            if (hourBlock.length === 0) {\n                return;\n            }\n            var avg =\n                hourBlock.map((a) => a.getValue()).reduce((a, b) => a + b, 0) /\n                hourBlock.length; //avg value\n            results.push(\n                new Observation(\n                    hourBlock[0].getObservationStation(),\n                    hourBlock[0].getFeature(),\n                    avg,\n                    hourBlock[0].getTimeStamp()\n                )\n            );\n        });\n\n        return results;\n    }\n\n    static async GetDataForDay(\n        day: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): Promise<Observation[]> {\n        var promises: Promise<Observation[]>[] = [];\n\n        day.setMinutes(0);\n\n        var zero = new Date(day.getTime());\n        var eight = new Date(day.getTime());\n        var sixteen = new Date(day.getTime());\n\n        zero.setHours(0, 0, 0);\n        eight.setHours(8, 0, 0);\n        sixteen.setHours(16, 0, 0);\n\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                zero,\n                new Date(zero.getTime() + BLOCK_TIME)\n            )\n        );\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                eight,\n                new Date(eight.getTime() + BLOCK_TIME)\n            )\n        );\n        promises.push(\n            DataProvider.getObservations(\n                observationStation,\n                feature,\n                sixteen,\n                new Date(sixteen.getTime() + BLOCK_TIME)\n            )\n        );\n        var r = await Promise.all(promises);\n\n        return this.reduceBlocks(r);\n    }\n\n    static async getDataByMonth(\n        endDate: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ) {\n        var startDate = new Date(endDate.getTime());\n        startDate.setMonth(startDate.getMonth() - 1);\n\n        var promises: Promise<Observation[]>[] = [];\n\n        while (startDate < endDate) {\n            promises.push(\n                this.GetDataForDay(startDate, observationStation, feature)\n            );\n            startDate.setDate(startDate.getDate() + 1);\n        }\n        var results = await Promise.all(promises);\n        return results.reduce((prev, next) => {\n            return prev.concat(next);\n        }, []);\n    }\n\n    static async getDataByYear(\n        endDate: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ) {\n        var observations: Promise<Observation[]>[] = [];\n        //Months\n        for (var i = 0; i < 12; i++) {\n            endDate.setDate(1);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(8);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(15);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n            endDate.setDate(22);\n            observations.push(\n                this.GetDataForDay(endDate, observationStation, feature)\n            );\n\n            endDate.setMonth(endDate.getMonth() - 1);\n        }\n        var res = await Promise.all(observations);\n        return res.reduce((prev, next) => {\n            return prev.concat(next);\n        }, []);\n    }\n    /*\n    private static async estimateObservationCount(\n        start: Date,\n        end: Date,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): Promise<number> {\n        var lastHour = await DataProvider.getObservations(\n            observationStation,\n            feature,\n            new Date(Date.now() - 60 * 60 * 1000),\n            new Date(Date.now())\n        );\n        var estimate =\n            lastHour.length *\n            (((end.getTime() - start.getTime()) / 1000) * 60 * 60);\n        return estimate;\n    }\n    */\n}\n","import Language from \"../Storage/Language\";\nimport IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport DataProvider from \"../Frost/DataProvider\";\nimport { Observation } from \"../../Model/Observation\";\nimport RequestReducer from \"./RequestReducer\";\n\nlet languageProvider = Language.getInstance();\n\nclass FHLCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n    additionalGraphicsOptions: {};\n\n    constructor(\n        nameId: string,\n        timespan: Timespan,\n        frequency: number,\n        additionalGraphicsOptions: {}\n    ) {\n        this.name = languageProvider.getText(nameId);\n        this.timespan = timespan;\n        this.frequency = frequency;\n        this.additionalGraphicsOptions = additionalGraphicsOptions;\n    }\n}\n\nexport class FeatureHistoryLineChartController implements IDiagramController {\n    private static readonly ID = \"FeatureHistoryLineChart\";\n    //support line charts\n    private static readonly chartType = ChartType.LINE_CHART;\n    //enable configuration\n    private static readonly isConfigutable = true;\n    //available configuration options\n    private static readonly configurationOptions = [\n        //last 24 hours\n        new FHLCConfigurationOption(\n            \"last_24_hours\",\n            new Timespan(24 * 60 * 60 * 1000),\n            24,\n            {\n                hAxis: {\n                    format: \"HH:mm\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n        //last 7 days\n        new FHLCConfigurationOption(\n            \"last_7_days\",\n            new Timespan(7 * 24 * 60 * 60 * 1000),\n            12,\n            {\n                hAxis: {\n                    format: \"dd.MM\",\n                    gridlines: {\n                        count: 7,\n                    },\n                },\n            }\n        ),\n        //last 31 days\n        new FHLCConfigurationOption(\n            \"last_31_days\",\n            new Timespan(31 * 24 * 60 * 60 * 1000),\n            6,\n            {\n                hAxis: {\n                    format: \"dd.MM\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n        //last year\n        new FHLCConfigurationOption(\n            \"last_year\",\n            new Timespan(365 * 24 * 60 * 60 * 1000),\n            1,\n            {\n                hAxis: {\n                    format: \"MMM\",\n                    gridlines: {\n                        count: 6,\n                    },\n                },\n            }\n        ),\n    ];\n    // options for the graphical appearence (aplied for all configuration options)\n    private static readonly graphicsOptions = {\n        legend: { position: \"none\" },\n    };\n\n    observationStation: ObservationStation;\n    feature: Feature;\n    currentConfigurationOption: FHLCConfigurationOption;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.currentConfigurationOption =\n            FeatureHistoryLineChartController.configurationOptions[0];\n    }\n    getID() {\n        return FeatureHistoryLineChartController.ID;\n    }\n    //returns chart type\n    getChartType(): ChartType {\n        return FeatureHistoryLineChartController.chartType;\n    }\n\n    //returns options that specify how the diagram is displayed\n    getGraphicsOptions() {\n        return {\n            ...FeatureHistoryLineChartController.graphicsOptions,\n            ...this.currentConfigurationOption.additionalGraphicsOptions,\n        };\n    }\n\n    //returns whether the diagram is configurable\n    isConfigurable() {\n        return FeatureHistoryLineChartController.isConfigutable;\n    }\n\n    //sets the current configurationOption of the diagram\n    setConfigurationOption(optionName: string) {\n        this.currentConfigurationOption = this.getFHLCConfigurationOption(\n            optionName\n        );\n    }\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption() {\n        return this.currentConfigurationOption.name;\n    }\n\n    //return names of configuration options\n    getConfigurationOptions(): string[] {\n        //translate options to current language\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(\n            (option) => option.name\n        );\n        return optionNames;\n    }\n\n    //return data to display\n    async getData(\n        configurationOptionName: string\n    ): Promise<Array<Array<Date | number | string | null>>> {\n        //get timespan\n        var start: Date = this.currentConfigurationOption.timespan.getStart(\n            new Date(Date.now())\n        );\n        var observations: Observation[] = [];\n\n        /*\n        while (start.valueOf() < Date.now()) {\n            let end = new Date(\n                start.getFullYear(),\n                start.getMonth(),\n                start.getDate(),\n                start.getHours() + 6\n            );\n\n            \n            //get observations\n            let newObs = await DataProvider.getObservations(\n                this.observationStation,\n                this.feature,\n                start,\n                end\n            );\n            \n            let newObs = await this.reduceGetData(start, end);\n\n            observations = observations.concat(newObs);\n\n            start = end;\n        }\n        */\n\n        var end = new Date(Date.now());\n        var length = end.getTime() - start.getTime();\n        const MONTH_IN_MILLI = 1000 * 60 * 60 * 24 * 30;\n        const YEAR_IN_MILLI = MONTH_IN_MILLI * 12;\n        if (length >= YEAR_IN_MILLI) {\n            observations = await RequestReducer.getDataByYear(\n                end,\n                this.observationStation,\n                this.feature\n            );\n        } else if (length >= MONTH_IN_MILLI) {\n            observations = await RequestReducer.getDataByMonth(\n                end,\n                this.observationStation,\n                this.feature\n            );\n        } else {\n            observations = await DataProvider.getObservations(\n                this.observationStation,\n                this.feature,\n                start,\n                end\n            );\n        }\n\n        let data: Array<[Date, number]> = [];\n\n        //extract values and timestamps from observations\n        observations.forEach((observation, index) => {\n            let timestamp = observation.getTimeStamp();\n            let value = observation.getValue();\n            data.push([timestamp, value]);\n        });\n\n        data.sort((row1, row2) => {\n            if (row1[0].valueOf() < row2[0].valueOf()) {\n                return -1;\n            } else {\n                return 1;\n            }\n        });\n\n        //add react google chart specific header\n        let table: any = data;\n        table.splice(0, 0, [\"Date\", \"Value\"]);\n\n        return table;\n    }\n\n    //get configuration option by name\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\n        var options = FeatureHistoryLineChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`\n        );\n    }\n}\n","import IDiagramController, { ChartType } from \"./DiagramController\";\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport Timespan from \"../../Model/Timespan\";\nimport Language from \"../Storage/Language\";\nimport { Observation } from \"../../Model/Observation\";\nimport RequestReducer from \"./RequestReducer\";\n\nlet languageProvider = Language.getInstance();\n\nclass CTLMPCConfigurationOption {\n    name: string;\n    timespan: Timespan;\n    frequency: number;\n    additionalGraphicOptions: {};\n\n    constructor(\n        name: string,\n        timespan: Timespan,\n        frequency: number,\n        additionalGraphicOptions: {}\n    ) {\n        this.name = name;\n        this.timespan = timespan;\n        this.frequency = frequency;\n        this.additionalGraphicOptions = additionalGraphicOptions;\n    }\n}\n\nexport class ComparisonToLastMonthPieChartController\n    implements IDiagramController {\n    private static readonly title = languageProvider.getText(\n        \"ComparisonToLastMonthPieChart_Title\"\n    );\n    private static readonly ID = \"ComparisonToLastMonthPieChart\";\n    //support line charts\n    private static readonly chartType = ChartType.PIE_CHART;\n    //enable configuration\n    private static readonly isConfigurable = false;\n    // options for the graphical appearence\n    private static readonly graphicsOptions = {\n        legend: \"none\",\n        pieSliceText: \"label\",\n        title: ComparisonToLastMonthPieChartController.title,\n        pieStartAngle: 100,\n        slices: {\n            0: { color: \"#4caf50\" },\n            1: { color: \"#f44336\" },\n        },\n    };\n    //configuration options\n    private static readonly configurationOptions = [\n        new CTLMPCConfigurationOption(\n            \"default_configuration\",\n            new Timespan(31 * 24 * 60 * 60 * 1000),\n            24,\n            {}\n        ),\n    ];\n\n    observationStation: ObservationStation;\n    feature: Feature;\n    currentConfigurationOption: CTLMPCConfigurationOption;\n\n    constructor(observationStation: ObservationStation, feature: Feature) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.currentConfigurationOption =\n            ComparisonToLastMonthPieChartController.configurationOptions[0];\n    }\n    getID() {\n        return ComparisonToLastMonthPieChartController.ID;\n    }\n\n    setConfigurationOption(optionName: string) {\n        this.currentConfigurationOption = this.getCTLMPCConfigurationOption(\n            optionName\n        );\n    }\n\n    getChartType(): ChartType {\n        return ComparisonToLastMonthPieChartController.chartType;\n    }\n\n    getGraphicsOptions() {\n        return {\n            ...ComparisonToLastMonthPieChartController.graphicsOptions,\n            ...this.currentConfigurationOption.additionalGraphicOptions,\n        };\n    }\n\n    isConfigurable() {\n        return ComparisonToLastMonthPieChartController.isConfigurable;\n    }\n\n    getConfigurationOptions() {\n        return ComparisonToLastMonthPieChartController.configurationOptions.map(\n            (option) => option.name\n        );\n    }\n\n    //returns the name of the current configuration option\n    getCurrentConfigurationOption() {\n        return this.currentConfigurationOption.name;\n    }\n\n    async getData(\n        configurationOptionName: string\n    ): Promise<Array<Array<Date | number | string | null>>> {\n        //configuration option by name\n        var configuration = this.getCTLMPCConfigurationOption(\n            configurationOptionName\n        );\n\n        ///get timespan\n        var start: Date = configuration.timespan.getStart(new Date(Date.now()));\n        var observations: Observation[] = [];\n\n        while (start.valueOf() < Date.now()) {\n            let end = new Date(\n                start.getFullYear(),\n                start.getMonth(),\n                start.getDate() + 7,\n                start.getHours()\n            );\n\n            //get observations\n            let newObs = await RequestReducer.GetDataForDay(\n                end,\n                this.observationStation,\n                this.feature\n            );\n\n            observations = observations.concat(newObs);\n\n            start = end;\n        }\n\n        var lastObservationValue = observations.pop()?.getValue() as number;\n\n        var higher = 0;\n        var lower = 0;\n\n        let higherTag = languageProvider.getText(\"higher\");\n        let lowerTag = languageProvider.getText(\"lower\");\n\n        observations.forEach((observation) => {\n            observation.getValue() > lastObservationValue ? higher++ : lower++;\n        });\n\n        var data = [\n            [\"tag\", \"#days\"],\n            [higherTag, higher],\n            [lowerTag, lower],\n        ];\n        return data;\n    }\n\n    //get configuration option by name\n    private getCTLMPCConfigurationOption(\n        name: string\n    ): CTLMPCConfigurationOption {\n        var options =\n            ComparisonToLastMonthPieChartController.configurationOptions;\n\n        for (let i = 0; i < options.length; i++) {\n            //if option matches return it\n            if (options[i].name === name) {\n                return options[i];\n            }\n        }\n\n        //no option matches, throw an error\n        throw new Error(\n            `${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`\n        );\n    }\n}\n","import { ObservationStation } from \"../../Model/ObservationStation\";\nimport { Feature } from \"../../Model/Feature\";\nimport { FeatureHistoryLineChartController } from \"./FeatureHistoryLineChartController\";\nimport { ComparisonToLastMonthPieChartController } from \"./ComparisonToLastMonthPieChartController\";\nimport IDiagramController from \"./DiagramController\";\n\nexport default class DiagramFactory {\n    private static readonly diagramMap = new Map<string, Function>([\n        [\n            \"FeatureHistoryLineChart\",\n            (observationStation: ObservationStation, feature: Feature) => {\n                return new FeatureHistoryLineChartController(\n                    observationStation,\n                    feature\n                );\n            },\n        ],\n        [\n            \"ComparisonToLastMonthPieChart\",\n            (observationStation: ObservationStation, feature: Feature) => {\n                return new ComparisonToLastMonthPieChartController(\n                    observationStation,\n                    feature\n                );\n            },\n        ],\n    ]);\n\n    public static getDiagramController(\n        id: string,\n        observationStation: ObservationStation,\n        feature: Feature\n    ): IDiagramController {\n        if (DiagramFactory.diagramMap.has(id)) {\n            var constructController = DiagramFactory.diagramMap.get(\n                id\n            ) as Function;\n            return constructController.call(\n                DiagramFactory,\n                observationStation,\n                feature\n            );\n        } else {\n            throw new Error(`Diagram id: ${id}, is not supported`);\n        }\n    }\n}\n","import { Scale } from \"./Scale\";\nimport { Observation } from \"./Observation\";\nimport { ObservationStation } from \"./ObservationStation\";\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\nimport Language from \"../Controller/Storage/Language\";\n\nlet language = Language.getInstance();\n\nexport class Feature {\n    private id: string;\n    private nameId: string;\n    private descriptionId: string;\n    private scale: Scale;\n    private relatedWeblinkId: string;\n    private limit: number;\n    private unitOfMeasurement: string;\n    private controllerIds: string[];\n    private iconName: string;\n\n    constructor(\n        id: string,\n        nameId: string,\n        descriptionId: string,\n        scale: Scale,\n        relatedWeblinkId: string,\n        limit: number,\n        unitOfMeasurement: string,\n        controllerIds: string[],\n        iconName: string\n    ) {\n        this.id = id;\n        this.nameId = nameId;\n        this.descriptionId = descriptionId;\n        this.scale = scale;\n        this.relatedWeblinkId = relatedWeblinkId;\n        this.limit = limit;\n        this.unitOfMeasurement = unitOfMeasurement;\n        this.controllerIds = controllerIds;\n        this.iconName = iconName;\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string {\n        return language.getText(this.nameId);\n        //return this.nameId;\n    }\n\n    public getDescription(): string {\n        return language.getText(this.descriptionId);\n        //return this.descriptionId;\n    }\n\n    public getRelatedWeblink(): string {\n        return language.getText(this.relatedWeblinkId);\n        //return this.relatedWeblinkId;\n    }\n\n    public getRelatedScale(): Scale {\n        return this.scale;\n    }\n\n    public getDiagramController(\n        observationStation: ObservationStation\n    ): IDiagramController[] {\n        var diagramController = new Array<IDiagramController>();\n\n        this.controllerIds.forEach((id) => {\n            let controller = DiagramFactory.getDiagramController(\n                id,\n                observationStation,\n                this\n            );\n            diagramController.push(controller);\n        });\n\n        return diagramController;\n    }\n\n    public getLimit(): number {\n        return this.limit;\n    }\n\n    public getUnitOfMeasurement(): string {\n        return this.unitOfMeasurement;\n    }\n\n    public isLimitExceeded(observation: Observation): boolean {\n        return observation.getValue() > this.limit;\n    }\n\n    public getIconName(): string {\n        return this.iconName;\n    }\n}\n","import { Feature } from \"../Model/Feature\";\nimport { Scale } from \"../Model/Scale\";\nimport * as featureDefinition from \"../Jsons/features.json\";\n\nexport default class FeatureProvider {\n    //private context: any;\n    private features: { [id: string]: Feature };\n    private static instance: FeatureProvider | null = null;\n\n    constructor() {\n        this.features = {};\n        //@ts-ignore\n        (featureDefinition.features as FeatureDefinition[]).forEach((f) => {\n            this.addFeature(f);\n        });\n    }\n\n    static getInstance(): FeatureProvider {\n        if (!this.instance) {\n            this.instance = new FeatureProvider();\n        }\n        return this.instance;\n    }\n\n    private addFeature(definition: FeatureDefinition) {\n        if (definition) {\n            var f = new Feature(\n                definition.id,\n                definition.nameId,\n                definition.descriptionId,\n                new Scale(true, definition.defaultScale),\n                definition.webLinkId,\n                definition.limit,\n                definition.unitOfMeasurement,\n                definition.diagrams,\n                definition.icon\n            );\n            this.features[f.getId()] = f;\n        }\n    }\n\n    //Returns all loaded features\n    listAllFeatures(): Feature[] {\n        return Object.keys(this.features).map((key) => {\n            return this.features[key];\n        });\n    }\n\n    getFeature(featureId: string): Feature | undefined {\n        if (Object.keys(this.features).includes(featureId)) {\n            return this.features[featureId];\n        } else {\n            return undefined;\n        }\n    }\n}\n\ninterface FeatureDefinition {\n    id: string;\n    nameId: string;\n    unitOfMeasurement: string;\n    descriptionId: string;\n    defaultScale: { [key: number]: string };\n    webLinkId: string;\n    limit: number;\n    diagrams: string[];\n    icon: string;\n}\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport Hidden from \"@material-ui/core/Hidden\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\n\nimport ObservationStationProfile from \"./ObservationStationProfile\";\nimport LocationMap from \"./LocationMap\";\nimport Diagram from \"./Diagram\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nexport default class DetailPage extends React.Component<\n    IDetailPageProps,\n    IDetailPageState\n> {\n    constructor(props: IDetailPageProps) {\n        super(props);\n        this.state = { obs: null };\n        DataProvider.getStation(this.props.match.params.id).then((o) => {\n            this.setState({ obs: o });\n        });\n    }\n\n    //styles of this component\n    styles = {\n        main_container: {\n            paddingTop: \"20px\",\n        },\n    };\n\n    //return diagrams of this observation station\n    renderDiagrams() {\n        if (this.state.obs === null) return <CircularProgress />;\n\n        var diagramController = this.state.obs.getDiagramController();\n        return diagramController.map((controller) => (\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <Diagram controller={controller} />\n            </Grid>\n        ));\n    }\n\n    //render component\n    render() {\n        return (\n            <Grid container justify=\"center\">\n                <Grid\n                    container\n                    justify=\"center\"\n                    spacing={4}\n                    xl={8}\n                    lg={8}\n                    md={8}\n                    sm={12}\n                    xs={12}\n                    style={this.styles.main_container}\n                >\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12}>\n                        {this.state.obs ? (\n                            <ObservationStationProfile\n                                observationStation={this.state.obs}\n                            />\n                        ) : (\n                            <CircularProgress />\n                        )}\n                    </Grid>\n                    <Hidden only={[\"sm\", \"xs\"]}>\n                        <Grid item xl={4} lg={4} md={4}>\n                            {this.state.obs ? (\n                                <LocationMap\n                                    position={this.state.obs.getPosition()}\n                                />\n                            ) : (\n                                <CircularProgress />\n                            )}\n                        </Grid>\n                    </Hidden>\n                    {this.renderDiagrams()}\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\ninterface IDetailPageProps {\n    match: { params: { id: string } };\n}\n\ninterface IDetailPageState {\n    obs: ObservationStation | null;\n}\n","import React from \"react\";\nimport {\n    Card,\n    Typography,\n    Divider,\n    CardContent,\n    Grid,\n} from \"@material-ui/core\";\n\nimport { ObservationStation } from \"../../Model/ObservationStation\";\nimport ObservationItem from \"./ObservationItem\";\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\nimport Language from \"../../Controller/Storage/Language\";\nimport DataProvider from \"../../Controller/Frost/DataProvider\";\n\nexport default class ObservationStationProfile extends React.Component<\n    IObservationStationProfileProps,\n    IObservationStationProfileState\n> {\n    languageProvider: Language;\n\n    constructor(props: IObservationStationProfileProps) {\n        super(props);\n        this.state = {\n            latestObservations: [],\n        };\n        this.languageProvider = Language.getInstance();\n        this.getLatestObservations().then((o) =>\n            this.setState({ latestObservations: o })\n        );\n    }\n\n    //styles for this component\n    styles = {\n        pos: {\n            marginBottom: 12,\n        },\n        section_1: {\n            padding: \"20px\",\n        },\n        section_2: {\n            padding: \"20px\",\n        },\n        feature_container: {\n            marginTop: \"20px\",\n        },\n    };\n\n    //colors that are asignable to the observation items icons\n    colors = [\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\",\n        \"#673ab7\",\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#8bc34a\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#795548\",\n        \"#9e9e9e\",\n        \"#607d8b\",\n    ];\n\n    //returns the latest observation for each feature of this observation station\n    private async getLatestObservations(): Promise<Array<Observation>> {\n        var features = this.props.observationStation.getFeatures();\n        var observations = new Array<Observation>();\n\n        for (let feature of features) {\n            var observation = await DataProvider.getLatestObservation(\n                this.props.observationStation,\n                feature\n            );\n            observations.push(observation);\n        }\n\n        return observations;\n    }\n\n    //returns a random color from the above ones\n    private getRandomColor() {\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\n        var color = this.colors[randomNumber];\n        this.colors.splice(randomNumber, 1);\n        return Color.getColorFromHex(color);\n    }\n\n    //returns JSX Elements for each latest observation\n    private renderLatestObservations() {\n        return this.state.latestObservations.map((observation) => (\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                <ObservationItem\n                    color={this.getRandomColor()}\n                    observation={observation}\n                />\n            </Grid>\n        ));\n    }\n\n    //returns the timestamp of the latest observation as a readable string\n    private renderObservationDate() {\n        if (this.state.latestObservations.length !== 0) {\n            return this.languageProvider.getDateString(\n                this.state.latestObservations[0].getTimeStamp()\n            );\n        } else {\n            return \"\";\n        }\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardContent>\n                    <div style={this.styles.section_1}>\n                        <Typography align=\"left\" variant=\"h4\" component=\"h2\">\n                            {this.props.observationStation.getName()}\n                        </Typography>\n                        <Typography\n                            align=\"left\"\n                            color=\"textSecondary\"\n                            component=\"p\"\n                            style={this.styles.pos}\n                        >\n                            {this.props.observationStation\n                                .getPosition()\n                                .getString()}\n                        </Typography>\n                        <Typography align=\"left\" variant=\"body2\" component=\"p\">\n                            {this.props.observationStation.getDescription()}\n                        </Typography>\n                    </div>\n                    <Divider variant=\"middle\" />\n                    <div style={this.styles.section_2}>\n                        <Grid container alignItems=\"stretch\">\n                            <Grid item xs>\n                                <Typography align=\"left\" variant=\"subtitle1\">\n                                    {this.languageProvider.getText(\n                                        \"last_measurement\"\n                                    )}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography\n                                    color=\"textSecondary\"\n                                    variant=\"subtitle1\"\n                                >\n                                    {this.renderObservationDate()}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid\n                            container\n                            style={this.styles.feature_container}\n                            spacing={2}\n                        >\n                            {this.renderLatestObservations()}\n                        </Grid>\n                    </div>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationStationProfileProps {\n    observationStation: ObservationStation;\n}\n\ninterface IObservationStationProfileState {\n    latestObservations: Observation[];\n}\n","import React from \"react\";\n\nimport { Card, Grid, Avatar, Typography, Box } from \"@material-ui/core\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library, IconName } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faThermometerHalf,\n    faSmog,\n    faTachometerAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { Color } from \"../../Model/Color\";\nimport { Observation } from \"../../Model/Observation\";\n\nimport \"./ObservationItem.css\";\n\nlibrary.add(faThermometerHalf, faSmog, faTachometerAlt);\n\nexport default class ObservationItem extends React.Component<\n    IObservationItemProps,\n    IObservationItemState\n> {\n    render() {\n        return (\n            <Card className=\"feature-card\">\n                <Box className=\"card-content\">\n                    <Grid container direction=\"row\">\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"center\"\n                            xl={2}\n                            lg={2}\n                            md={2}\n                            sm={2}\n                            xs={2}\n                        >\n                            <Avatar\n                                style={{\n                                    backgroundColor: this.props.color.getHex(),\n                                }}\n                            >\n                                <FontAwesomeIcon\n                                    icon={\n                                        this.props.observation\n                                            .getFeature()\n                                            .getIconName() as IconName\n                                    }\n                                />\n                            </Avatar>\n                        </Grid>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            xl={10}\n                            lg={10}\n                            md={10}\n                            sm={10}\n                            xs={10}\n                        >\n                            <Typography\n                                className=\"centered-text\"\n                                color=\"textSecondary\"\n                            >\n                                {this.props.observation.getFeature().getName()}\n                            </Typography>\n                            <Typography\n                                className=\"centered-text\"\n                                variant=\"subtitle1\"\n                            >\n                                {this.props.observation.getValue() +\n                                    \" \" +\n                                    this.props.observation\n                                        .getFeature()\n                                        .getUnitOfMeasurement()}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Card>\n        );\n    }\n}\n\ninterface IObservationItemProps {\n    color: Color;\n    observation: Observation;\n}\n\ninterface IObservationItemState {}\n","import React from \"react\";\n\nimport { Card } from \"@material-ui/core\";\n\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Leaflet from \"leaflet\";\n\nimport { Position } from \"../../Model/Position\";\n\nexport default class LocationMap extends React.Component<\n    ILocationMapProps,\n    ILocationMapState\n> {\n    //zoom level of the map\n    private static readonly ZOOM_LEVEL = 20;\n\n    // server that provides tiles to render the map\n    private static readonly TILE_SERVER =\n        \"https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png\";\n    private static readonly TILE_SERVER_ATTRIBUTION =\n        '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\n\n    // custom icon to show position\n    private static readonly MARKER_ICON_PATH = \"./marker_icon.svg\"; //path to the icon image\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\n\n    static MARKER_ICON = new Leaflet.Icon({\n        iconUrl: require(\"\" + LocationMap.MARKER_ICON_PATH),\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\n        iconAnchor: [\n            LocationMap.MARKER_ICON_SIZE / 2,\n            LocationMap.MARKER_ICON_SIZE,\n        ], // point of the icon which will correspond to marker's location\n    });\n\n    // custom css styles\n    styles = {\n        map: {\n            height: \"300px\",\n        },\n    };\n\n    //render component as JSX.Element\n    render() {\n        var position = new Leaflet.LatLng(\n            this.props.position.getLatitude(),\n            this.props.position.getLongitude()\n        );\n        return (\n            <Card>\n                <Map\n                    center={position} //center map to the required position\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\n                    style={this.styles.map} //provide custom styles\n                    // diable zooming via mouse and keyboard and disable dragging\n                    scrollWheelZoom={false}\n                    dragging={false}\n                    keyboard={false}\n                    doubleClickZoom={false}\n                >\n                    <TileLayer\n                        url={LocationMap.TILE_SERVER}\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\n                    />\n                    <Marker\n                        position={position}\n                        icon={LocationMap.MARKER_ICON}\n                    />\n                </Map>\n            </Card>\n        );\n    }\n}\n\ninterface ILocationMapProps {\n    position: Position;\n}\n\ninterface ILocationMapState {}\n","import React from \"react\";\nimport {\n    Card,\n    Divider,\n    Typography,\n    Grid,\n    CircularProgress,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport Chart from \"react-google-charts\";\n\nimport Language from \"../../Controller/Storage/Language\";\n\nimport IDiagramController from \"../../Controller/DiagramController/DiagramController\";\n\nexport default class Diagram extends React.Component<\n    IDiagramProps,\n    IDiagramState\n> {\n    //controller for this diagram\n    controller: IDiagramController;\n\n    constructor(props: IDiagramProps) {\n        super(props);\n        this.controller = this.props.controller;\n\n        //setup default configuration in state\n        this.state = {\n            data: null,\n        };\n\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(\n            this\n        );\n    }\n\n    //styles of this component\n    styles = {\n        header: {\n            padding: \"10px\",\n            paddingLeft: \"40px\",\n        },\n        diagram: {\n            width: \"100%\",\n            height: \"350px\",\n        },\n    };\n\n    //changes the diagrams configuration\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\n        let configurationOption = event.target.value as string;\n        this.controller.setConfigurationOption(configurationOption);\n        this.setState({\n            data: null,\n        });\n        this.controller.getData(configurationOption).then((data) =>\n            this.setState({\n                data: data,\n            })\n        );\n    }\n\n    //return configuration options as menu items\n    renderConfigurationOptions() {\n        var configurationOptions = this.controller.getConfigurationOptions();\n        return configurationOptions.map((option) => (\n            <MenuItem value={option}>{option}</MenuItem>\n        ));\n    }\n\n    //renders the configuration form of this diagram\n    renderDiagramConfiguration() {\n        //if configuration is enabled return select form with configuration options\n        if (this.controller.isConfigurable()) {\n            return (\n                <Grid item>\n                    <Select\n                        value={this.controller.getCurrentConfigurationOption()}\n                        onChange={this.handleConfigurationChange}\n                    >\n                        {this.renderConfigurationOptions()}\n                    </Select>\n                </Grid>\n            );\n            //not configurable return empty string\n        } else return \"\";\n    }\n\n    componentDidMount() {\n        this.controller\n            .getData(this.controller.getCurrentConfigurationOption())\n            .then((data) => this.setState({ data: data }));\n    }\n\n    renderChart() {\n        if (this.state.data === null) {\n            return (\n                <Grid\n                    container\n                    justify=\"center\"\n                    alignContent=\"center\"\n                    style={this.styles.diagram}\n                >\n                    <CircularProgress />\n                </Grid>\n            );\n        } else {\n            return (\n                <Chart\n                    width={this.styles.diagram.width}\n                    height={this.styles.diagram.height}\n                    chartType={this.controller.getChartType()}\n                    options={this.controller.getGraphicsOptions()}\n                    loader={\n                        <Grid\n                            container\n                            justify=\"center\"\n                            alignContent=\"center\"\n                            style={this.styles.diagram}\n                        >\n                            <CircularProgress />\n                        </Grid>\n                    }\n                    data={this.state.data}\n                />\n            );\n        }\n    }\n\n    //render component\n    render() {\n        return (\n            <Card>\n                <div style={this.styles.header}>\n                    <Grid container justify=\"space-between\" alignItems=\"center\">\n                        <Grid item>\n                            <Typography variant=\"subtitle1\">\n                                {Language.getInstance().getText(\n                                    this.controller.getID() + \"_Name\"\n                                ) +\n                                    \" - \" +\n                                    this.controller.feature.getName() +\n                                    \" [\" +\n                                    this.controller.feature.getUnitOfMeasurement() +\n                                    \"]\"}\n                            </Typography>\n                        </Grid>\n                        {this.renderDiagramConfiguration()}\n                    </Grid>\n                </div>\n                <Divider />\n                {this.renderChart()}\n            </Card>\n        );\n    }\n}\n\nexport interface IDiagramProps {\n    controller: IDiagramController;\n}\n\ninterface IDiagramState {\n    data: Array<Array<Date | number | string | null>> | null;\n}\n","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n"],"sourceRoot":""}