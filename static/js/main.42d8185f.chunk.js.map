{"version":3,"sources":["View/DetailPage sync /^.*$","View/DetailPage/marker_icon.svg","serviceWorker.ts","Model/Viewport.ts","View/MapPage/StationInfo.tsx","View/MapPage/Map.tsx","Model/MapPin.ts","Controller/MapPage/MapConfiguration.ts","Model/Polygon.ts","Controller/TestConfiguration.ts","Controller/MapPage/NearConfiguration.ts","Controller/MapPage/PolygonConfiguration.ts","Controller/MapPage/StationConfiguration.ts","Controller/Storage/MapConfigurationMemory.ts","Controller/MapPage/MapController.ts","View/MapPage/FeatureSelect.tsx","View/MapPage/Search.tsx","View/MapPage/Legend.tsx","View/MapPage/MapPage.tsx","View/ErrorPage.tsx","View/About.tsx","View/PrivacyPolicy.tsx","View/Layout/LanguageMenu.tsx","View/Layout/PageMenu.tsx","View/Layout/Layout.tsx","Controller/Storage/Configuration.ts","index.tsx","Controller/Storage/Language.ts","Model/Position.ts","Controller/DiagramController/DiagramController.ts","Model/Timespan.ts","Controller/MockDataProvider.ts","Controller/DiagramController/FeatureHistoryLineChartController.ts","Controller/DiagramController/ComparisonToLastYearPieChartController.ts","Controller/DiagramController/YearComparisonLineChartController.ts","Controller/DiagramController/DiagramFactory.ts","Model/Feature.ts","Controller/FeatureProvider.ts","Model/Color.ts","Model/FrostResult.ts","Controller/FROST/FrostServer.ts","Controller/FROST/FrostFactory.ts","Controller/FROST/factories/GetStation.ts","Controller/FROST/factories/GetObservationStations.ts","Controller/FROST/factories/GetLatestObservation.ts","Controller/FROST/factories/GetLatestObservations.ts","Controller/FROST/factories/GetObservations.ts","Controller/FROST/DataProvider.ts","Model/ObservationStation.ts","Model/Observation.ts","Model/Scale.ts","View/DetailPage/DetailPage.tsx","View/DetailPage/ObservationStationProfile.tsx","View/DetailPage/ObservationItem.tsx","View/DetailPage/LocationMap.tsx","View/DetailPage/Diagram.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Viewport","center","zoom","this","position","language","Language","getInstance","StationInfo","href","props","lastObservation","getObservationStation","getId","station","Box","className","Grid","container","direction","Typography","variant","color","getName","getPosition","getString","Divider","orientation","justify","getFeature","getRelatedWeblink","display","Math","floor","getValue","getUnitOfMeasurement","Button","onClick","openDetails","getText","React","Component","require","Map","nextViewport","lock","oldViewport","state","viewport","pin","icon","L","IconMaterial","iconColor","markerColor","getColor","getHex","outlineColor","outlineWidth","regEx","test","iconName","exec","setTimeout","newView","viewportLeafletToModel","getCenter","getDistance","abs","getZoom","updateViewport","onViewportChange","setState","Position","handlePopup","observation","polygon","getStations","obsSt","getCoordinates","v","zoomControl","TileLayer","attribution","url","pins","Marker","getIconFromMapPin","Popup","onOpen","polygons","positions","getPositionsFromPolygon","fillOpacity","MapPin","value","MapConfiguration","obsStation","getScale","Polygon","stations","TestConfiguration","feature","view","Color","random","Observation","Date","now","values","index","length","getLatestObservationMock","push","avgValue","reduce","acc","c","ObservationStation","getFeatures","getRelatedScale","features","NearConfiguration","selectedFeature","scale","obs","observations","min","apply","p","max","sc","key","val","getLimit","Scale","DataProvider","getLatestObservations","buildNearScale","forEach","buildMapPin","PolygonConfiguration","getRadius","polys","triangulate","points","getLatitude","getLongitude","output","tri","Delaunator","from","triangles","i","triStations","StationConfiguration","latestObs","DEFAULT_CONF","FeatureProvider","DEFAULT_VIEWPORT","MapConfigurationMemory","conf","localStorage","setItem","JSON","stringify","type","ls","getItem","parse","obj","latitude","longitude","isNullOrUndefined","MapController","useMemory","config","DEFAULT_POSITION","DEFAULT_ZOOM","mcm","load","getStation","getLatestObservation","save","f","getPins","getPolygons","searchTerm","fetch","encodeURIComponent","response","json","updateCurrentPosition","lat","lon","setCenter","useStyles","makeStyles","theme","createStyles","root","background","palette","primary","main","title","textAlign","width","marginBottom","popup","padding","paddingBottom","formControl","marginTop","FeatureSelect","classes","useState","open","setOpen","listAllFeatures","setFeature","setConfig","useEffect","startConf","changeConfig","console","log","testConf","onConfigurationChange","nearConf","polyConf","stationConf","alignItems","Card","FormControl","InputLabel","Select","onChange","event","target","MenuItem","Avatar","currentTarget","Search","locationEnabled","navigator","permissions","query","name","then","status","geolocation","getCurrentPosition","res","coords","updatePosition","err","alignContent","onSubmit","onSearch","InputBase","placeholder","IconButton","locationClick","flexItem","disabled","spacing","getStyleFromScale","grad","slice","height","Legend","style","MapPage","mapController","selectedStation","getViewport","additionalPins","update","pinPromise","polyPromsie","Promise","all","pinPoly","concat","sortedPins","sort","a","b","dis","disSum","temp","handleViewportChange","some","promise","changePopupStation","term","search","mp","isFinite","getMin","getMax","pos","onStationSelected","getFeatureSelectConf","withStyles","ErrorPage","message","AboutPage","PrivacyPolicyPage","LanguageMenu","availableLanguages","ref","selectedLang","getSelectedLanguage","anchorEl","handleClick","bind","handleClose","getAvailableLanguages","lang","changeLanguage","reload","list","handleMenuItemClick","selected","getSelectedLanguageId","startIcon","Translate","endIcon","ExpandMore","aria-controls","aria-haspopup","onClose","langList","PageMenu","toogleDrawer","toogle","AppBar","boxShadow","zIndex","Toolbar","component","Link","to","textDecoration","marginLeft","float","SwipeableDrawer","anchor","List","ListItem","button","ListItemIcon","ListItemText","Layout","exact","path","DetailPage","Configuration","frostUrl","instance","iConf","newConf","supportedFeatures","createMuiTheme","lightGreen","secondary","purple","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","selectedLangId","languages","languageData","text","strings","languageID","find","undefined","langs","element","set","date","languageId","toLocaleString","languageInstance","local","sqrt","pow","lng","round","toString","ChartType","Timespan","start","valueOf","end","MockDataProvider","colors","randomColor","Feature","count","mockStation","mockFeature","radius","mockObservations","frequency","Array","getFullYear","getMonth","getDate","getHours","middle","languageProvider","FHLCConfigurationOption","nameId","timespan","xAxis","FeatureHistoryLineChartController","observationStation","yAxisLabel","chartType","graphicsOptions","isConfigutable","defaultConfigurationOption","configurationOptions","option","configurationOptionName","configurationOption","getFHLCConfigurationOption","getStart","getObservations","data","timestamp","getTimeStamp","options","LINE_CHART","label","ComparisonToLastYearPieChartController","isConfigurable","configuration","getCTLYPCConfigurationOption","lastObservationValue","pop","higher","lower","higherTag","lowerTag","PIE_CHART","YCLCCConfigurationOption","numberOfYears","YearComparisonLineChartController","getYCLCCConfigurationOption","cleanedObservations","filter","years","header","year","splice","dt","DataTable","addValue","dtAsArray","toArray","hAxis","format","gridlines","DTRow","numberOfValues","arrayRepresentation","dtrowA","dtrowB","rows","columnKey","rowIndex","getRowIndex","getBaseDate","columnIndex","getColumnIndex","datesAreEqual","BASE_YEAR","getMinutes","getSeconds","getMilliseconds","dateA","dateB","row","DiagramFactory","diagramMap","has","get","call","descriptionId","relatedWeblinkId","limit","unitOfMeasurement","controllerIds","diagramController","controller","getDiagramController","featureDefinition","addFeature","definition","defaultScale","webLinkId","diagrams","featureId","includes","r","g","TypeError","toHex","n","hex","toUpperCase","parseInt","FrostResult","result","success","errorMessage","FrostServer","ff","getQueryBuilder","getQuery","ok","getConverter","convert","FrostFactory","rmc","qb","GetStationFactory","GetStationConverter","GetStationBuilder","Locations","coordinates","Datastreams","fp","getfeat","ObservedProperty","description","GetObservationStationsFactory","GetObservationStationsConverter","GetObservationStationsBuilder","coord","stream","feat","alert","GetLatestObservationFactory","GetLatestObservationConverter","GetLatestObservationBuilder","Observations","phenomenonTime","GetLatestObservationsFactory","GetLatestObservationsConverter","GetLatestObservationsBuilder","thing","Thing","dastream","sta","GetObservationsFactory","GetObservationsConverter","GetObservationsBuilder","server","request","fr","obsnull","getResult","getMessage","availableFeatures","contr","found","counter","linearTransition","dict","sortOnKeys","getColorFromHex","Number","getLinearTransition","numKeys","tempDict","lowerIndex","colorA","getRGB","colorB","resR","interpolate","resG","resB","add","styles","main_container","paddingTop","params","item","xl","lg","md","sm","xs","only","renderDiagrams","ObservationStationProfile","section_1","section_2","feature_container","latestObservations","promises","randomNumber","getRandomColor","getDateString","align","getDescription","renderObservationDate","renderLatestObservations","ObservationItem","feature_card","card_content","backgroundColor","faThermometerHalf","LocationMap","Leaflet","LatLng","ZOOM_LEVEL","scrollWheelZoom","dragging","keyboard","doubleClickZoom","TILE_SERVER","TILE_SERVER_ATTRIBUTION","MARKER_ICON","MARKER_ICON_PATH","MARKER_ICON_SIZE","Icon","iconUrl","iconSize","iconAnchor","Diagram","paddingLeft","diagram","getDefaultConfigurationOption","handleConfigurationChange","getConfigurationOptions","renderConfigurationOptions","renderDiagramConfiguration","getChartType","getGraphicsOptions","loader","getData"],"mappings":"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","file":"static/js/main.42d8185f.chunk.js","sourcesContent":["var map = {\n\t\"./DetailPage\": 71,\n\t\"./DetailPage.tsx\": 71,\n\t\"./Diagram\": 75,\n\t\"./Diagram.tsx\": 75,\n\t\"./LocationMap\": 74,\n\t\"./LocationMap.tsx\": 74,\n\t\"./ObservationItem\": 73,\n\t\"./ObservationItem.tsx\": 73,\n\t\"./ObservationStationProfile\": 72,\n\t\"./ObservationStationProfile.tsx\": 72,\n\t\"./marker_icon.svg\": 164\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 163;","module.exports = __webpack_public_path__ + \"static/media/marker_icon.5891ef15.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Position } from \"../Model/Position\";\n\nexport class Viewport {\n    private center: Position;\n    private zoom: number;\n\n    constructor(center: Position, zoom: number) {\n        this.center = center;\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n\n    getCenter(): Position {\n        return this.center;\n    }\n\n    getZoom(): number {\n        return this.zoom;\n    }\n\n    getRadius(): number {\n        return this.zoom; //TODO: fix this\n    }\n\n    setCenter(position: Position) {\n        this.center = position;\n    }\n\n    setZoom(zoom: number) {\n        this.zoom = zoom;\n        if (this.zoom < 0) {\n            this.zoom = 0;\n        }\n    }\n}\n","import React from \"react\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { Button, Typography, Grid, Box, Divider } from \"@material-ui/core\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nimport FeatureInfo from \"./FeatureInfo\";\r\n\r\nimport './StationInfo.css';\r\n\r\nlet language: Language = Language.getInstance();\r\n\r\ninterface State { }\r\ninterface Props {\r\n    lastObservation: Observation;\r\n}\r\n\r\nconst DETAIL_PATH = \"/pse-airquality-react/detail/\";\r\n\r\nexport class StationInfo extends React.Component<Props, State> {\r\n    openDetails() {\r\n        window.location.href =\r\n            DETAIL_PATH +\r\n            this.props.lastObservation.getObservationStation().getId();\r\n    }\r\n\r\n    render() {\r\n        var station = this.props.lastObservation.getObservationStation();\r\n        return (\r\n            <Box className='popup'>\r\n                <Grid container direction=\"column\">\r\n                    <Typography className='title' variant=\"h5\" color=\"textPrimary\">\r\n                        {station.getName()}\r\n                    </Typography>\r\n                    <Typography className='position' color=\"textSecondary\">\r\n                        {station.getPosition().getString()}\r\n                    </Typography>\r\n                    <Divider orientation='horizontal'></Divider>\r\n                    <Grid container direction='row' justify='space-between'>\r\n                        <Typography className='feature' variant='subtitle1' color='textSecondary'>\r\n                            {this.props.lastObservation.getFeature().getName() +\r\n                                \":\"}\r\n                        </Typography>\r\n                        <Typography color='primary'>\r\n                            <a href={this.props.lastObservation.getFeature().getRelatedWeblink()}>?</a>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Typography className='value' variant=\"h4\" display=\"inline\" color=\"primary\">\r\n                        {Math.floor(\r\n                            this.props.lastObservation.getValue() * 100\r\n                        ) / 100}{\" \"}\r\n                        {this.props.lastObservation\r\n                            .getFeature()\r\n                            .getUnitOfMeasurement()}\r\n                    </Typography>\r\n                    <Button\r\n                        className='info-button'\r\n                        color='primary'\r\n                        onClick={() => this.openDetails()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        {language.getText(\"stationInfoButton\")}\r\n                    </Button>\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","import \"./Map.css\";\r\nimport React from \"react\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\n\r\nimport { Card } from '@material-ui/core';\r\nimport {\r\n    Map as LeafletMap,\r\n    TileLayer,\r\n    Marker,\r\n    Polygon as LeafletPolygon,\r\n    Viewport as LeafletViewport,\r\n    Popup,\r\n} from \"react-leaflet\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { StationInfo } from \"./StationInfo\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nrequire(\"leaflet-iconmaterial\");\r\n\r\nconst VIEW_UPDATE_DELAY = 500; // in ms\r\nconst DISTANCE_THRESHOLD = 0.25; // In coordinate units\r\nconst ZOOM_THRESHOLD = 1; // In leaflet zoom\r\nconst DEFAULT_ZOOM = 5;\r\ninterface State {\r\n    viewport: Viewport;\r\n    lastObservation: Observation | null;\r\n}\r\n\r\ninterface Props {\r\n    onViewportChange: (viewport: Viewport) => void;\r\n    handlePopup: (pin: MapPin) => Promise<Observation>;\r\n    viewport: Viewport;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n}\r\n\r\nexport class Map extends React.Component<Props, State> {\r\n    nextViewport: LeafletViewport | null;\r\n    lock: boolean;\r\n    oldViewport: Viewport | null;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.lock = false;\r\n        this.nextViewport = null;\r\n        this.oldViewport = null;\r\n        this.state = {\r\n            viewport: this.props.viewport,\r\n            lastObservation: null,\r\n        };\r\n    }\r\n\r\n    private getIconFromMapPin(pin: MapPin): L.Icon {\r\n        // Custom icons with colors\r\n        //TODO: Add warning if limit is reached? (requires design change)\r\n        // @ts-ignore\r\n        var icon = L.IconMaterial.icon({\r\n            icon: \"\", // Name of Material icon\r\n            iconColor: \"\", // Material icon color (could be rgba, hex, html name...)\r\n            markerColor: pin.getColor().getHex(), // Marker fill color\r\n            outlineColor: \"\", // Marker outline color\r\n            outlineWidth: 1, // Marker outline width\r\n        });\r\n        //Filter icons\r\n        var regEx = /icon-(.+)-.*/;\r\n        if (regEx.test(pin.getId())) {\r\n            var iconName = regEx.exec(pin.getId()) as RegExpExecArray;\r\n            //@ts-ignore\r\n            icon = L.IconMaterial.icon({\r\n                icon: iconName[1], // Name of Material icon\r\n                iconColor: \"#33DD11\", // Material icon color (could be rgba, hex, html name...)\r\n                markerColor: pin.getColor().getHex(), // Marker fill color\r\n                outlineColor: \"black\", // Marker outline color\r\n                outlineWidth: 1, // Marker outline width\r\n            });\r\n        }\r\n        return icon;\r\n    }\r\n\r\n    private onViewportChange(viewport: LeafletViewport) {\r\n        this.nextViewport = viewport; //Update new viewport\r\n        if (!this.lock) {\r\n            if (!this.oldViewport) {\r\n                this.oldViewport = this.state.viewport; //Set viewport of last update\r\n            }\r\n            this.lock = true; //Lock update for VIEW_UPDATE_DELAY ms\r\n            setTimeout(() => {\r\n                var newView = this.viewportLeafletToModel(\r\n                    this.nextViewport as LeafletViewport\r\n                );\r\n                this.lock = false;\r\n                if (\r\n                    this.oldViewport &&\r\n                    (newView\r\n                        .getCenter()\r\n                        .getDistance(this.oldViewport?.getCenter()) >\r\n                        DISTANCE_THRESHOLD ||\r\n                        Math.abs(\r\n                            newView.getZoom() - this.oldViewport?.getZoom()\r\n                        ) >= ZOOM_THRESHOLD)\r\n                ) {\r\n                    this.updateViewport(newView); //Only update if change has been significant\r\n                }\r\n            }, VIEW_UPDATE_DELAY);\r\n        }\r\n    }\r\n\r\n    private updateViewport(viewport: Viewport) {\r\n        this.props.onViewportChange(viewport);\r\n\r\n        this.setState({ viewport: viewport });\r\n        this.oldViewport = null;\r\n    }\r\n\r\n    private viewportLeafletToModel(viewport: LeafletViewport): Viewport {\r\n        return new Viewport(\r\n            new Position(viewport.center?.[0] ?? 0, viewport.center?.[1] ?? 0),\r\n            viewport.zoom ?? DEFAULT_ZOOM\r\n        );\r\n    }\r\n\r\n    private async handlePopup(pin: MapPin) {\r\n        var observation = await this.props.handlePopup(pin);\r\n        this.setState({ lastObservation: observation });\r\n    }\r\n\r\n    private getPositionsFromPolygon(\r\n        polygon: Polygon\r\n    ): { lat: number; lng: number }[] {\r\n        return polygon\r\n            .getStations()\r\n            .map((obsSt: ObservationStation) =>\r\n                obsSt.getPosition().getCoordinates()\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <LeafletMap\r\n                center={this.state.viewport.getCenter().getCoordinates()}\r\n                zoom={this.state.viewport.getZoom()}\r\n                onViewportChange={(v) => this.onViewportChange(v)}\r\n                zoomControl={false}\r\n            >\r\n                <TileLayer\r\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {this.props.pins.map((pin) => (\r\n                    <Marker\r\n                        position={pin.getPosition().getCoordinates()}\r\n                        icon={this.getIconFromMapPin(pin)}\r\n                    >\r\n                        <Popup onOpen={() => this.handlePopup(pin)}>\r\n                            {this.state.lastObservation ? (\r\n                                <StationInfo\r\n                                    lastObservation={\r\n                                        this.state.lastObservation\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                    <p>\r\n                                        {Language.getInstance().getText(\r\n                                            \"noData\"\r\n                                        )}\r\n                                    </p>\r\n                                )}\r\n                        </Popup>\r\n                    </Marker>\r\n                ))}\r\n                {this.props.polygons.map((polygon) => (\r\n                    <LeafletPolygon\r\n                        positions={this.getPositionsFromPolygon(polygon)}\r\n                        color={polygon.getColor().getHex()}\r\n                        fillOpacity={0.1}\r\n                    />\r\n                ))}\r\n            </LeafletMap>\r\n        );\r\n    }\r\n}\r\n","import { Color } from \"./Color\";\nimport { Position } from \"./Position\";\n\nexport class MapPin {\n  private id: string;\n  private position: Position;\n  private value: number;\n  private color: Color;\n\n  constructor(id: string, position: Position, value: number, color: Color) {\n    this.id = id;\n    this.position = position;\n    this.value = value;\n    this.color = color;\n  }\n\n  getPosition(): Position {\n    return this.position;\n  }\n\n  setPosition(position: Position) {\n    this.position = position;\n  }\n\n  getValue(): number {\n    return this.value;\n  }\n\n  setValue(value: number) {\n    this.value = value;\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getColor(): Color {\n    return this.color;\n  }\n}\n","import { Viewport } from \"../../Model/Viewport\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\n\r\nexport default abstract class MapConfiguration {\r\n    protected buildMapPin(\r\n        obsStation: ObservationStation,\r\n        value: number\r\n    ): MapPin {\r\n        return new MapPin(\r\n            obsStation.getId(),\r\n            obsStation.getPosition(),\r\n            value,\r\n            this.getScale().getColor(value)\r\n        );\r\n    }\r\n    abstract getId(): string;\r\n    abstract async getPins(view: Viewport): Promise<MapPin[]>;\r\n    abstract async getPolygons(view: Viewport): Promise<Polygon[]>;\r\n    abstract getScale(): Scale;\r\n    abstract getFeatures(): Feature[];\r\n}\r\n","import { ObservationStation } from \"./ObservationStation\";\nimport { Color } from \"./Color\";\n\nexport class Polygon {\n    private stations: ObservationStation[];\n    private color: Color;\n    constructor(stations: ObservationStation[], color: Color) {\n        this.stations = stations;\n        this.color = color;\n    }\n    getColor(): Color {\n        return this.color;\n    }\n    setColor(color: Color) {\n        this.color = color;\n    }\n    getStations(): ObservationStation[] {\n        return this.stations;\n    }\n}\n","import MapConfiguration from \"./MapPage/MapConfiguration\";\r\nimport { Viewport } from \"../Model/Viewport\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { MapPin } from \"../Model/MapPin\";\r\nimport { Polygon } from \"../Model/Polygon\";\r\nimport { Feature } from \"../Model/Feature\";\r\nimport { Color } from \"../Model/Color\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Observation } from \"../Model/Observation\";\r\n\r\nexport default class TestConfiguration extends MapConfiguration {\r\n    private feature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.feature = feature;\r\n    }\r\n\r\n    getId(): string {\r\n        return \"TestConfiguration\";\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [\r\n            new MapPin(\r\n                view.getCenter().getString(),\r\n                view.getCenter(),\r\n                10,\r\n                new Color(\r\n                    Math.random() * 255,\r\n                    Math.random() * 255,\r\n                    Math.random() * 255\r\n                )\r\n            ),\r\n        ];\r\n    }\r\n\r\n    private async getLatestObservationMock(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 50,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    private async getPolygonColor(polygon: Polygon): Promise<Color> {\r\n        var stations = polygon.getStations();\r\n        var values = [];\r\n        for (let index = 0; index < stations.length; index++) {\r\n            var v = await this.getLatestObservationMock(\r\n                stations[index],\r\n                this.feature\r\n            );\r\n            values.push(v.getValue());\r\n        }\r\n        var avgValue = values.reduce((acc, c) => acc + c, 0) / values.length;\r\n        return this.getScale().getColor(avgValue);\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [\r\n            new Polygon(\r\n                [\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.4),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(49, 8.5),\r\n                        []\r\n                    ),\r\n                    new ObservationStation(\r\n                        \"1\",\r\n                        \"1\",\r\n                        \"\",\r\n                        new Position(50, 8.45),\r\n                        []\r\n                    ),\r\n                ],\r\n                new Color(0, 0, 0)\r\n            ),\r\n        ];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.getFeatures()[0].getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.feature];\r\n    }\r\n\r\n    setFeatures(features: Feature[]) {\r\n        if (features.length === 0) {\r\n            return; //no elements in array\r\n        }\r\n        this.feature = features[0];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport DataProvider from \"../FROST/DataProvider\";\r\n\r\nconst SAMPLE_SCALE = 20;\r\nconst ID = \"NearConfiguration\";\r\n\r\nexport default class NearConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n    private scale: Scale;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n        this.scale = this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n\r\n    buildMapPin(obs: ObservationStation, value: number): MapPin {\r\n        return new MapPin(\r\n            obs.getId(),\r\n            obs.getPosition(),\r\n            value,\r\n            this.scale.getColor(value)\r\n        );\r\n    }\r\n\r\n    private buildNearScale(observations: Observation[]): Scale {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        var max = Math.max.apply(\r\n            Math,\r\n            observations.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n\r\n        var sc: { [key: number]: string } = {};\r\n        // Sample 10 times between 0 => min and limit of feature => max\r\n        for (let index = 0; index < SAMPLE_SCALE; index++) {\r\n            var key = Math.floor(min + (max - min) * (index / SAMPLE_SCALE));\r\n            var val = this.selectedFeature.getLimit() * (index / SAMPLE_SCALE);\r\n            sc[key] = this.selectedFeature\r\n                .getRelatedScale()\r\n                .getColor(val)\r\n                .getHex();\r\n        }\r\n        return new Scale(true, sc);\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var observations = await DataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n\r\n        this.scale = this.buildNearScale(observations);\r\n\r\n        var pins: MapPin[] = [];\r\n        observations.forEach((o) => {\r\n            pins.push(\r\n                this.buildMapPin(o.getObservationStation(), o.getValue())\r\n            );\r\n        });\r\n        return pins;\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n    getScale(): Scale {\r\n        return this.scale;\r\n    }\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport DataProvider from \"../FROST/DataProvider\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport Delaunator from \"delaunator\";\r\n\r\nconst ID = \"PolygonConfiguration\";\r\nexport default class PolygonConfiguration extends MapConfiguration {\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        return [];\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        var observations = await DataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getRadius(),\r\n            this.selectedFeature\r\n        );\r\n        var polys = this.triangulate(observations);\r\n        return polys;\r\n    }\r\n\r\n    // Convert Observations in array of triangular Polygons\r\n    private triangulate(observations: Observation[]): Polygon[] {\r\n        var points: [number, number][] = [];\r\n        observations.forEach((o) =>\r\n            points.push([\r\n                //Get number tupels from Position\r\n                o.getObservationStation().getPosition().getLatitude(),\r\n                o.getObservationStation().getPosition().getLongitude(),\r\n            ])\r\n        );\r\n        var delaunay = Delaunator.from(points);\r\n        var output = [];\r\n        var tri = delaunay.triangles; // Convert Points to indices for triangles\r\n        for (let i = 0; i < tri.length; i += 3) {\r\n            var triStations = [\r\n                // 3 sequential indices describe a triangle\r\n                observations[tri[i]].getObservationStation(),\r\n                observations[tri[i + 1]].getObservationStation(),\r\n                observations[tri[i + 2]].getObservationStation(),\r\n            ];\r\n            var val =\r\n                // Calculate average value for all of the stations\r\n                (observations[tri[i]].getValue() +\r\n                    observations[tri[i + 1]].getValue() +\r\n                    observations[tri[i + 2]].getValue()) /\r\n                3;\r\n            output.push(\r\n                new Polygon(\r\n                    triStations,\r\n                    this.selectedFeature.getRelatedScale().getColor(val)\r\n                )\r\n            );\r\n        }\r\n        return output;\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"./MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport DataProvider from \"../FROST/DataProvider\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Observation } from \"../../Model/Observation\";\r\n\r\nconst ID = \"StationConfiguration\";\r\n\r\nexport default class StationConfiguration extends MapConfiguration {\r\n    getId(): string {\r\n        return ID;\r\n    }\r\n    private selectedFeature: Feature;\r\n\r\n    constructor(feature: Feature) {\r\n        super();\r\n        this.selectedFeature = feature;\r\n    }\r\n\r\n    async getPins(view: Viewport): Promise<MapPin[]> {\r\n        var latestObs: Observation[] = await DataProvider.getLatestObservations(\r\n            view.getCenter(),\r\n            view.getZoom(),\r\n            this.selectedFeature\r\n        );\r\n        return latestObs.map((o) =>\r\n            this.buildMapPin(o.getObservationStation(), o.getValue())\r\n        );\r\n    }\r\n\r\n    async getPolygons(view: Viewport): Promise<Polygon[]> {\r\n        return [];\r\n    }\r\n\r\n    getScale(): Scale {\r\n        return this.selectedFeature.getRelatedScale();\r\n    }\r\n\r\n    getFeatures(): Feature[] {\r\n        return [this.selectedFeature];\r\n    }\r\n}\r\n","import MapConfiguration from \"../MapPage/MapConfiguration\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport TestConfiguration from \"../TestConfiguration\";\r\nimport NearConfiguration from \"../MapPage/NearConfiguration\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport PolygonConfiguration from \"../MapPage/PolygonConfiguration\";\r\nimport StationConfiguration from \"../MapPage/StationConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\nconst LOCALSTORAGE_MAPCONF = \"mapconf\";\r\nconst DEFAULT_CONF = new StationConfiguration(\r\n    FeatureProvider.getInstance().getFeature(\"saqn:op:ta\") as Feature\r\n);\r\nconst DEFAULT_VIEWPORT = new Viewport(new Position(49, 8.4), 7);\r\n\r\nexport default class MapConfigurationMemory {\r\n    static save(conf: MapConfiguration, view: Viewport) {\r\n        localStorage.setItem(\r\n            LOCALSTORAGE_MAPCONF,\r\n            JSON.stringify({\r\n                type: conf.getId(),\r\n                feature: conf.getFeatures()[0].getId(),\r\n                view: view,\r\n            })\r\n        );\r\n    }\r\n\r\n    static load(): [MapConfiguration, Viewport] {\r\n        var ls = localStorage.getItem(LOCALSTORAGE_MAPCONF);\r\n        if (\r\n            ls &&\r\n            (JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: Viewport;\r\n            })\r\n        ) {\r\n            //return configuration if it exists\r\n            var obj = JSON.parse(ls) as {\r\n                type: string;\r\n                feature: string;\r\n                view: any;\r\n            };\r\n            var view = new Viewport(\r\n                new Position(\r\n                    obj.view.center.latitude,\r\n                    obj.view.center.longitude\r\n                ),\r\n                obj.view.zoom\r\n            );\r\n            var feature = FeatureProvider.getInstance().getFeature(obj.feature);\r\n            if (isNullOrUndefined(feature)) {\r\n                throw new Error(\r\n                    \"Feature \" + obj.feature + \" is not supported.\"\r\n                );\r\n            }\r\n            if (obj.type === \"NearConfiguration\") {\r\n                return [new NearConfiguration(feature), view];\r\n            } else if (obj.type === \"PolygonConfiguration\") {\r\n                return [new PolygonConfiguration(feature), view];\r\n            } else if (obj.type === \"StationConfiguration\") {\r\n                return [new StationConfiguration(feature), view];\r\n            } else {\r\n                return [new TestConfiguration(feature), view];\r\n            }\r\n        }\r\n        return [DEFAULT_CONF, DEFAULT_VIEWPORT];\r\n    }\r\n}\r\n","import { Viewport } from \"../../Model/Viewport\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport MapConfiguration from \"./MapConfiguration\";\r\nimport MapConfigurationMemory from \"../Storage/MapConfigurationMemory\";\r\nimport StationConfiguration from \"./StationConfiguration\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport NearConfiguration from \"./NearConfiguration\";\r\nimport PolygonConfiguration from \"./PolygonConfiguration\";\r\nimport DataProvider from \"../FROST/DataProvider\";\r\n\r\nexport class MapController {\r\n    private config: MapConfiguration;\r\n    private viewport: Viewport;\r\n\r\n    private DEFAULT_POSITION: Position = new Position(49, 8.4); //Karlsruhe\r\n    private DEFAULT_ZOOM: number = 5;\r\n\r\n    constructor(useMemory: boolean = true) {\r\n        if (useMemory) {\r\n            var mcm = MapConfigurationMemory.load();\r\n            this.config = mcm[0];\r\n            this.viewport = mcm[1];\r\n        } else {\r\n            // Default viewport\r\n            this.viewport = new Viewport(\r\n                this.DEFAULT_POSITION,\r\n                this.DEFAULT_ZOOM\r\n            );\r\n            this.config = new StationConfiguration(\r\n                // Default configuration\r\n                FeatureProvider.getInstance().getFeature(\r\n                    \"saqn:op:mcpm2p5\"\r\n                ) as Feature\r\n            );\r\n        }\r\n        if (this.config.getFeatures().length === 0) {\r\n            throw Error(\"Invalid MapConfiguration\");\r\n        }\r\n    }\r\n\r\n    // Called when a pin on the map is clicked, gets information from server\r\n    async handlePopup(pin: MapPin): Promise<Observation> {\r\n        var station = await DataProvider.getStation(pin.getId());\r\n        return DataProvider.getLatestObservation(\r\n            station,\r\n            this.config.getFeatures()[0]\r\n        );\r\n    }\r\n\r\n    // Store configuration and viewport in local storage\r\n    private save() {\r\n        MapConfigurationMemory.save(this.config, this.viewport);\r\n    }\r\n\r\n    // Current configuration id and feature id\r\n    getFeatureSelectConf(): { conf: string; feature: string } {\r\n        var f = this.config.getFeatures()[0].getId();\r\n        var c = this.config.getId();\r\n        return { conf: c, feature: f };\r\n    }\r\n\r\n    // Current viewport\r\n    getViewport(): Viewport {\r\n        return this.viewport;\r\n    }\r\n\r\n    // Called if the viewport has changed significantly\r\n    handleViewportChange(viewport: Viewport) {\r\n        this.viewport = viewport;\r\n        this.save();\r\n    }\r\n\r\n    // Pins for leaflet map\r\n    async getPins(): Promise<MapPin[]> {\r\n        return this.config.getPins(this.viewport);\r\n    }\r\n\r\n    // Polygons to be drawn\r\n    async getPolygons(): Promise<Polygon[]> {\r\n        return this.config.getPolygons(this.viewport);\r\n    }\r\n\r\n    // The leaflet scale of the map\r\n    getScale(): Scale {\r\n        return this.config.getScale();\r\n    }\r\n\r\n    // Switch to configuration with different feature\r\n    changeFeature(feature: Feature) {\r\n        switch (this.config.getId()) {\r\n            case \"StationConfiguration\":\r\n                this.config = new StationConfiguration(feature);\r\n                break;\r\n            case \"NearConfiguration\":\r\n                this.config = new NearConfiguration(feature);\r\n                break;\r\n            case \"PolygonConfiguration\":\r\n                this.config = new PolygonConfiguration(feature);\r\n                break;\r\n\r\n            default:\r\n                throw new Error(\r\n                    \"Current configuration has invalid id: \" +\r\n                        this.config.getId()\r\n                );\r\n        }\r\n    }\r\n\r\n    // Called when user changes configuration\r\n    onConfigurationChange(conf: MapConfiguration) {\r\n        this.config = conf;\r\n        this.save();\r\n    }\r\n\r\n    // Get Position from search term using the nominatim API\r\n    async search(searchTerm: string) {\r\n        if (searchTerm.length === 0) {\r\n            return; //No search possible\r\n        }\r\n\r\n        var response = await fetch(\r\n            \"https://nominatim.openstreetmap.org/search?format=json&q=\" +\r\n                encodeURIComponent(searchTerm)\r\n        );\r\n        var json = await response.json();\r\n        if (json.length === 0) {\r\n            return; //No location found\r\n        }\r\n        this.updateCurrentPosition(new Position(json[0].lat, json[0].lon));\r\n    }\r\n\r\n    // Set new position\r\n    updateCurrentPosition(position: Position) {\r\n        this.viewport.setCenter(position);\r\n        this.save();\r\n    }\r\n}\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Card,\r\n    CardContent,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Grid,\r\n    Typography,\r\n    Divider,\r\n} from \"@material-ui/core\";\r\nimport LayersIcon from \"@material-ui/icons/Layers\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport MapConfiguration from \"../../Controller/MapPage/MapConfiguration\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport TestConfiguration from \"../../Controller/TestConfiguration\";\r\nimport NearConfiguration from \"../../Controller/MapPage/NearConfiguration\";\r\nimport StationConfiguration from \"../../Controller/MapPage/StationConfiguration\";\r\nimport PolygonConfiguration from \"../../Controller/MapPage/PolygonConfiguration\";\r\nimport FeatureProvider from \"../../Controller/FeatureProvider\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\ninterface Props {\r\n    onConfigurationChange(mapConfig: MapConfiguration): void;\r\n    startConf?: { conf: string; feature: string };\r\n}\r\n\r\nlet language = Language.getInstance();\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            background: theme.palette.primary.main,\r\n            position: 'relative',\r\n        },\r\n        title: {\r\n            textAlign: 'center',\r\n            width: '100%',\r\n            marginBottom: '10px',\r\n        },\r\n        popup: {\r\n            padding: '20px',\r\n            paddingBottom: '50px',\r\n            marginBottom: '-40px',\r\n        },\r\n        formControl: {\r\n            width: '100%',\r\n            marginTop: '10px',\r\n            marginBottom: '10px',\r\n        },\r\n    })\r\n);\r\n\r\nexport default function FeatureSelect(props: Props) {\r\n    const TEST_CONFIG = \"TestConfiguration\";\r\n    const NEAR_CONFIG = \"NearConfiguration\";\r\n    const POLY_CONFIG = \"PolygonConfiguration\";\r\n    const STATION_CONFIG = \"StationConfiguration\";\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState<HTMLImageElement | null>(null);\r\n    const [feature, setFeature] = useState<Feature | undefined>(\r\n        FeatureProvider.getInstance().listAllFeatures()[0]\r\n    );\r\n    const [config, setConfig] = useState<string | null>(STATION_CONFIG);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLImageElement>) => {\r\n        setOpen(open ? null : event.currentTarget);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.startConf) {\r\n            //Get start values from props\r\n            setFeature(\r\n                FeatureProvider.getInstance().getFeature(\r\n                    props.startConf.feature\r\n                )\r\n            );\r\n            setConfig(props.startConf.conf);\r\n        }\r\n    }, [props.startConf]);\r\n    const changeConfig = (conf: string, feature: Feature) => {\r\n        console.log(conf);\r\n        setConfig(conf);\r\n        switch (conf) {\r\n            case TEST_CONFIG:\r\n                var testConf = new TestConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(testConf);\r\n                break;\r\n            case NEAR_CONFIG:\r\n                var nearConf = new NearConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(nearConf);\r\n                break;\r\n            case POLY_CONFIG:\r\n                var polyConf = new PolygonConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(polyConf);\r\n                break;\r\n            case STATION_CONFIG:\r\n                var stationConf = new StationConfiguration(feature); //Create new config\r\n                props.onConfigurationChange(stationConf);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleFeatureChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        var f = FeatureProvider.getInstance().getFeature(\r\n            event.target.value as string\r\n        ); //Feature Id\r\n        setFeature(f);\r\n\r\n        if (f) {\r\n            if (config) {\r\n                changeConfig(config, f);\r\n            } else {\r\n                throw new Error(\"No config selected\");\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleConfigChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        if (!feature) {\r\n            return; //A feature has to be selected, should never happen.\r\n        }\r\n        changeConfig(event.target.value as string, feature);\r\n        //window.location.reload(); //Reload with new config\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container direction='column' alignItems='flex-end'>\r\n                {open ? (\r\n                    <Card className={classes.popup} variant=\"outlined\">\r\n                        <Grid container direction='column'>\r\n                            <Typography className={classes.title} variant='subtitle1' color='textSecondary'>\r\n                                {language.getText('map_configuration_title')}\r\n                            </Typography>\r\n                            <Divider orientation='horizontal'></Divider>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel>{\"Feature\"}</InputLabel>\r\n                                <Select\r\n                                    onChange={handleFeatureChange}\r\n                                    value={feature?.getId() ?? \"\"}\r\n                                >\r\n                                    {FeatureProvider.getInstance()\r\n                                        .listAllFeatures()\r\n                                        .map((f) => (\r\n                                            <MenuItem value={f.getId()}>\r\n                                                {f.getName()}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel>{\"Style\"}</InputLabel>\r\n                                <Select\r\n                                    onChange={handleConfigChange}\r\n                                    value={config ?? \"\"}\r\n                                >\r\n                                    <MenuItem value={POLY_CONFIG}>\r\n                                        {POLY_CONFIG}\r\n                                    </MenuItem>\r\n                                    <MenuItem value={STATION_CONFIG}>\r\n                                        {STATION_CONFIG}\r\n                                    </MenuItem>\r\n                                    <MenuItem value={NEAR_CONFIG}>\r\n                                        {NEAR_CONFIG}\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Card>\r\n                ) : (\r\n                        \"\"\r\n                    )}\r\n                <Avatar\r\n                    className={classes.root}\r\n                    onClick={handleClick}>\r\n                    <LayersIcon />\r\n                </Avatar>\r\n            </Grid>\r\n        </Fragment >\r\n    );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport {\r\n    IconButton,\r\n    Divider,\r\n    InputBase,\r\n    Grid,\r\n    Card,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport GpsFixedIcon from '@material-ui/icons/GpsFixed';\r\nimport { Position } from \"../../Model/Position\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\nimport './Search.css'\r\n\r\nlet language = Language.getInstance();\r\n\r\ninterface Props {\r\n    onSearch(term: string): void;\r\n    updatePosition(pos: Position): void;\r\n}\r\n\r\ninterface State {\r\n    searchTerm: string;\r\n    locationEnabled: boolean;\r\n}\r\n\r\nexport default class Search extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { searchTerm: \"\", locationEnabled: true };\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.permissions\r\n                .query({ name: \"geolocation\" })\r\n                .then((status: PermissionStatus) => {\r\n                    if (status.state === \"denied\") {\r\n                        //If permission was denied, disable button\r\n                        this.setState({ locationEnabled: false });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    locationClick() {\r\n        if (\"geolocation\" in navigator) {\r\n            console.log(\"Available\");\r\n            navigator.geolocation.getCurrentPosition(\r\n                (res) => {\r\n                    //Get position\r\n                    var position = new Position(\r\n                        res.coords.latitude,\r\n                        res.coords.longitude\r\n                    );\r\n                    this.props.updatePosition(position);\r\n                    this.setState({ locationEnabled: true });\r\n                },\r\n                (err) => {\r\n                    //Location denied\r\n                    console.log(\"Location denied.\");\r\n                    this.setState({ locationEnabled: false });\r\n                }\r\n            );\r\n        } else {\r\n            //Browser doesn't support geolocation\r\n            console.log(\"Not Available\");\r\n            this.setState({ locationEnabled: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Card className='root'>\r\n                    <Grid container direction='row' alignContent='space-between'>\r\n                        <form\r\n                            className='search-form'\r\n                            onSubmit={() => { this.props.onSearch(this.state.searchTerm); }}\r\n                        >\r\n                            <InputBase\r\n                                className='input'\r\n                                type=\"search\"\r\n                                onChange={(e) => {\r\n                                    this.setState({ searchTerm: e.target.value });\r\n                                }}\r\n                                placeholder={language.getText('search')}\r\n                            />\r\n                            <IconButton\r\n                                type='submit'\r\n                                onClick={() => this.locationClick()}\r\n                                className='search-button'\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </form>\r\n                        <Divider\r\n                            orientation='vertical'\r\n                            flexItem={true}\r\n                        />\r\n                        <IconButton\r\n                            onClick={() => this.locationClick()}\r\n                            className='location-button'\r\n                            disabled={!this.state.locationEnabled}\r\n                        >\r\n                            <GpsFixedIcon />\r\n                        </IconButton>\r\n                    </Grid>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Box, Grid, Typography, Card } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            padding: theme.spacing(1),\r\n        },\r\n    })\r\n);\r\n\r\ninterface Props {\r\n    scale: Scale;\r\n    min: number;\r\n    max: number;\r\n}\r\n\r\nfunction getStyleFromScale(scale: Scale, min: number, max: number) {\r\n    var grad = \"linear-gradient(0deg,\";\r\n    for (let index = 0; index < 10; index++) {\r\n        grad =\r\n            grad +\r\n            scale.getColor(min + (max - min) * (index / 10)).getHex() +\r\n            \" \" +\r\n            index * 10 +\r\n            \"%, \";\r\n    }\r\n    grad = grad.slice(0, -2) + \")\";\r\n    return {\r\n        background: grad,\r\n        height: \"100px\",\r\n        width: \"30px\",\r\n    };\r\n}\r\n\r\nfunction Legend(props: Props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.container}>\r\n            <Grid container direction=\"column\" alignItems='center'>\r\n                <Typography variant=\"body2\">\r\n                    {Math.floor(props.max * 10) / 10}\r\n                </Typography>\r\n                <Box\r\n                    style={getStyleFromScale(props.scale, props.min, props.max)}\r\n                />\r\n                <Typography variant=\"body2\">\r\n                    {Math.floor(props.min * 10) / 10}\r\n                </Typography>\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Legend;\r\n","import React, { Fragment } from \"react\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Map } from \"./Map\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport { Viewport } from \"../../Model/Viewport\";\r\nimport { MapController } from \"../../Controller/MapPage/MapController\";\r\nimport { MapPin } from \"../../Model/MapPin\";\r\nimport { Polygon } from \"../../Model/Polygon\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport FeatureSelect from \"./FeatureSelect\";\r\nimport Search from \"./Search\";\r\nimport Legend from \"./Legend\";\r\nimport { Box, Theme, Grid } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { Color } from \"../../Model/Color\";\r\n\r\nimport './MapPage.css'\r\n\r\nconst styles = (theme: Theme) => ({});\r\n\r\ninterface State {\r\n    selectedStation: ObservationStation | null;\r\n    pins: MapPin[];\r\n    polygons: Polygon[];\r\n    viewport: Viewport;\r\n    additionalPins: MapPin[];\r\n}\r\n\r\ninterface Props {\r\n    classes: any;\r\n}\r\n\r\nconst DEFAULT_MIN = 0;\r\nconst DEFAULT_MAX = 100;\r\n\r\nclass MapPage extends React.Component<Props, State> {\r\n    mapController: MapController;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.mapController = new MapController();\r\n\r\n        this.state = {\r\n            selectedStation: null,\r\n            viewport: this.mapController.getViewport(),\r\n            pins: [],\r\n            polygons: [],\r\n            additionalPins: [],\r\n        };\r\n        this.update();\r\n    }\r\n\r\n    // Set station as source for the StationInfo Popup\r\n    changePopupStation(station: ObservationStation) {\r\n        this.setState({\r\n            selectedStation: station,\r\n        });\r\n    }\r\n\r\n    // Reload Pins and Polygons\r\n    update() {\r\n        var pinPromise = this.mapController.getPins();\r\n        var polyPromsie = this.mapController.getPolygons();\r\n        Promise.all([pinPromise, polyPromsie]).then((pinPoly) => {\r\n            this.setState({\r\n                pins: pinPoly[0].concat(this.state.additionalPins),\r\n                polygons: pinPoly[1],\r\n            });\r\n        });\r\n    }\r\n\r\n    getValueAt(position: Position, feature: Feature): number {\r\n        // Get pins sorted by distance\r\n        var sortedPins = this.state.pins.sort((a, b) => {\r\n            return (\r\n                a.getPosition().getDistance(position) -\r\n                b.getPosition().getDistance(position)\r\n            );\r\n        });\r\n        var dis = 0; //Distance of nearest station to position\r\n        var disSum = 0;\r\n        if (sortedPins.length !== 0) {\r\n            dis = sortedPins[0].getPosition().getDistance(position);\r\n        }\r\n        var value = 0;\r\n        for (let i = 0; i <= 2; i++) {\r\n            //nearest 3 stations (if they exist)\r\n            if (sortedPins.length > i) {\r\n                var temp =\r\n                    dis / sortedPins[i].getPosition().getDistance(position); //Inverse of distance in comparison to nearest station\r\n                disSum += temp;\r\n                value += sortedPins[i].getValue() * temp; //Value, nearest with weight 1.\r\n            }\r\n        }\r\n        return value / (disSum === 0 ? 1 : disSum); //Catch division by zero (empty pin list)\r\n    }\r\n\r\n    onViewportChange(viewport: Viewport) {\r\n        this.mapController.handleViewportChange(viewport);\r\n        //Update Page\r\n        this.setState({\r\n            viewport: viewport,\r\n        });\r\n        this.update();\r\n    }\r\n\r\n    async onStationSelected(pin: MapPin): Promise<Observation> {\r\n        if (this.state.additionalPins.some((p) => pin.getId() === p.getId())) {\r\n            // Not a station, do nothing\r\n            return new Promise(() => {\r\n                return null;\r\n            });\r\n        }\r\n        this.setState({ selectedStation: null });\r\n        var promise = this.mapController.handlePopup(pin);\r\n        promise.then((o) => this.changePopupStation(o.getObservationStation()));\r\n        return promise;\r\n    }\r\n\r\n    onSearch(term: string) {\r\n        this.mapController.search(term).then(() => {\r\n            var mp = new MapPin(\r\n                \"icon-home-1\",\r\n                this.state.viewport.getCenter(),\r\n                -1,\r\n                new Color(0, 0, 0)\r\n            );\r\n            this.setState({\r\n                additionalPins: [mp],\r\n                pins: this.state.pins.concat(mp),\r\n            });\r\n            this.update();\r\n        });\r\n    }\r\n\r\n    getMin(): number {\r\n        var min = Math.min.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(min)) {\r\n            min = DEFAULT_MIN;\r\n        }\r\n        return min;\r\n    }\r\n\r\n    getMax(): number {\r\n        var max = Math.max.apply(\r\n            Math,\r\n            this.state.pins.map((p) => {\r\n                return p.getValue();\r\n            })\r\n        );\r\n        if (!isFinite(max)) {\r\n            max = DEFAULT_MAX;\r\n        }\r\n        return max;\r\n    }\r\n\r\n    render() {\r\n        var min = this.getMin();\r\n        var max = this.getMax();\r\n        return (\r\n            <Box className='map-page'>\r\n                <Box className='search'>\r\n                    <Search\r\n                        onSearch={(term) => this.onSearch(term)}\r\n                        updatePosition={(pos) => {\r\n                            var view = this.state.viewport;\r\n                            view.setCenter(pos);\r\n                            this.onViewportChange(view);\r\n                        }}\r\n                    />\r\n                </Box>\r\n                <Box className='map'>\r\n                    <Map\r\n                        viewport={this.state.viewport}\r\n                        onViewportChange={(viewport) => {\r\n                            this.onViewportChange(viewport);\r\n                        }}\r\n                        handlePopup={(pin) => this.onStationSelected(pin)}\r\n                        pins={this.state.pins}\r\n                        polygons={this.state.polygons}\r\n                    />\r\n                </Box>\r\n                <Box className='feature-select'>\r\n                    <FeatureSelect\r\n                        onConfigurationChange={(conf) => {\r\n                            this.mapController.onConfigurationChange(conf);\r\n                            this.update();\r\n                        }}\r\n                        startConf={this.mapController.getFeatureSelectConf()}\r\n                    />\r\n                </Box>\r\n                <Box className='legend'>\r\n                    <Legend\r\n                        min={min}\r\n                        max={max}\r\n                        scale={this.mapController.getScale()}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MapPage);\r\n","import React from 'react';\r\n\r\nexport default class ErrorPage extends React.Component<IErrorPageProps, IErrorPageState> {\r\n\r\n    code: number;\r\n    message: string;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.code = this.props.code;\r\n        this.message = this.props.message;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"informationPage\">\r\n                <h1>Error</h1>\r\n                <h2>{this.code}</h2>\r\n                <p>{this.message}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IErrorPageProps {\r\n    code: number;\r\n    message: string;\r\n}\r\n\r\ninterface IErrorPageState {\r\n\r\n\r\n}","import React from \"react\";\r\nimport Language from \"../Controller/Storage/Language\";\r\nimport \"./informationPage.css\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport default class AboutPage extends React.Component<\r\n    IAboutPageProps,\r\n    IAboutPageState\r\n    > {\r\n    render() {\r\n        return <div>\r\n            <p className=\"informationPage\">\r\n                <h1>{language.getText(\"about\")}</h1>\r\n                <h3>{language.getText(\"aboutText\")}</h3>\r\n            </p>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface IAboutPageProps { }\r\n\r\ninterface IAboutPageState { }","import React from \"react\";\r\nimport Language from \"../Controller/Storage/Language\";\r\nimport \"./informationPage.css\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport default class PrivacyPolicyPage extends React.Component<\r\n    IPrivacyPolicyPageProps,\r\n    IPrivacyPolicyPageState\r\n    > {\r\n    render() {\r\n        return <div>\r\n            <p className=\"informationPage\">\r\n                <h1>{language.getText(\"privacyPolicy\")}</h1>\r\n                <h3>{language.getText(\"privacyPolicyText\")}</h3>\r\n            </p>\r\n        </div>\r\n    }\r\n}\r\n\r\ninterface IPrivacyPolicyPageProps { }\r\n\r\ninterface IPrivacyPolicyPageState { }\r\n","import React from \"react\";\r\nimport { Menu, Button, MenuItem } from \"@material-ui/core\";\r\nimport { Translate, ExpandMore } from \"@material-ui/icons\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\n\r\ninterface IState {\r\n    selectedLang: string;\r\n    anchorEl: Element | null;\r\n}\r\n\r\ninterface IProps {\r\n    language: Language;\r\n}\r\n\r\nexport default class LanguageMenu extends React.Component<IProps, IState> {\r\n    private availableLanguages: Map<string, string>;\r\n    private ref: any;\r\n    private language: Language;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.language = props.language;\r\n        this.state = {\r\n            selectedLang: this.language.getSelectedLanguage(),\r\n            anchorEl: null,\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n\r\n        this.availableLanguages = this.language.getAvailableLanguages();\r\n    }\r\n\r\n    isSelectedLang(lang: string): boolean {\r\n        //return lang === this.state.selectedLang;\r\n        return false;\r\n    }\r\n\r\n    handleClick(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    }\r\n\r\n    handleClose(): void {\r\n        this.setState({ anchorEl: null });\r\n    }\r\n\r\n    handleMenuItemClick(\r\n        event: React.MouseEvent<HTMLElement>,\r\n        id: string\r\n    ): void {\r\n        this.language.changeLanguage(id);\r\n        window.location.reload();\r\n        this.setState({\r\n            anchorEl: null,\r\n            selectedLang: this.language.getSelectedLanguage(),\r\n        });\r\n    }\r\n\r\n    langList(): JSX.Element[] {\r\n        let list: JSX.Element[] = [];\r\n        this.availableLanguages.forEach((lang: string, id: string) => {\r\n            list.push(\r\n                <MenuItem\r\n                    onClick={(e) => this.handleMenuItemClick(e, id)}\r\n                    selected={id === this.language.getSelectedLanguageId()}\r\n                >\r\n                    {lang}\r\n                </MenuItem>\r\n            );\r\n        });\r\n        return list;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    onClick={this.handleClick}\r\n                    color=\"inherit\"\r\n                    startIcon={<Translate />}\r\n                    endIcon={<ExpandMore />}\r\n                    aria-controls=\"simple-menu\"\r\n                    aria-haspopup=\"true\"\r\n                >\r\n                    {this.state.selectedLang}\r\n                </Button>\r\n                <Menu\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    anchorEl={this.state.anchorEl}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {this.langList()}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, Typography, IconButton, SwipeableDrawer, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport SecurityIcon from '@material-ui/icons/Security';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport LanguageMenu from './LanguageMenu';\r\nimport Language from '../../Controller/Storage/Language';\r\nimport { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IPageMenuProps {\r\n    language: Language;\r\n}\r\n\r\ninterface IPageMenuState {\r\n    open: boolean;\r\n}\r\n\r\nexport default class PageMenu extends React.Component<IPageMenuProps, IPageMenuState> {\r\n\r\n    private language: Language;\r\n\r\n    constructor(props: IPageMenuProps) {\r\n        super(props);\r\n        this.language = props.language;\r\n        this.state = { open: false };\r\n        this.toogleDrawer = this.toogleDrawer.bind(this);\r\n    }\r\n\r\n    private toogleDrawer() {\r\n        const toogle = !this.state.open;\r\n        this.setState({ open: toogle });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <AppBar position=\"static\" style={{\r\n                    height: '64px',\r\n                    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2)',\r\n                    position: 'relative',\r\n                    zIndex: 20,\r\n                }}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" component={Link} to='/pse-airquality-react/' style={{ textDecoration: 'none', color: 'unset' }}>\r\n                            SmartAQnet\r\n                        </Typography>\r\n                        <div style={{ marginLeft: 'auto' }}>\r\n\r\n                            <LanguageMenu language={this.language} />\r\n\r\n                        </div>\r\n                        <div>\r\n                            <IconButton style={{ float: 'right' }} onClick={this.toogleDrawer}>\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer anchor=\"right\" open={this.state.open} onOpen={this.toogleDrawer} onClose={this.toogleDrawer}>\r\n                    <div style={{ width: 250 }}>\r\n                        <List>\r\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/privacy-policy'>\r\n                                <ListItemIcon>\r\n                                    <SecurityIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={this.language.getText(\"privacyPolicy\")} />\r\n                            </ListItem>\r\n                            <ListItem button onClick={this.toogleDrawer} component={Link} to='/pse-airquality-react/about'>\r\n                                <ListItemIcon>\r\n                                    <InfoIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={this.language.getText(\"about\")} />\r\n                            </ListItem>\r\n                            <ListItem button onClick={this.toogleDrawer} component='a' href='https://www.smartaq.net'>\r\n                                <ListItemIcon>\r\n                                    <ExitToAppIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"SmartAQnet\" />\r\n                            </ListItem>\r\n                        </List>\r\n                    </div>\r\n                </SwipeableDrawer>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport MapPage from \"../MapPage/MapPage\";\r\nimport DetailPage from \"./../DetailPage/DetailPage\";\r\nimport ErrorPage from \"../ErrorPage\";\r\nimport AboutPage from \"./../About\";\r\nimport PrivacyPolicyPage from \"./../PrivacyPolicy\";\r\nimport PageMenu from \"./PageMenu\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nimport './Layout.css'\r\n\r\nfunction Layout() {\r\n    let language: Language = Language.getInstance();\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Router>\r\n                <PageMenu language={language} />\r\n                <div className='page-content'>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/pse-airquality-react/\"\r\n                            component={MapPage}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/pse-airquality-react/detail/:id\"\r\n                            component={DetailPage}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/pse-airquality-react/about\"\r\n                            component={AboutPage}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/pse-airquality-react/privacy-policy\"\r\n                            component={PrivacyPolicyPage}\r\n                        />\r\n                        {/* If no url pattern matches an error page is shown */}\r\n                        <Route>\r\n                            <ErrorPage\r\n                                code={404}\r\n                                message={Language.getInstance().getText(\"Error404\")}\r\n                            />\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import FeatureProvider from \"../FeatureProvider\";\r\n\r\nexport default class Configuration {\r\n    private static instance: Configuration | null;\r\n    private language: string = \"de-de\";\r\n    private frostUrl: string = \"\";\r\n\r\n    // Return singleton instance\r\n    static getInstance(): Configuration {\r\n        if (!Configuration.instance) {\r\n            Configuration.load();\r\n        }\r\n        return Configuration.instance as Configuration;\r\n    }\r\n\r\n    // Load instance from config.json\r\n    private static load() {\r\n        var json = require(\"../../Jsons/config.json\"); //Load config\r\n        var iConf = json as IConfig;\r\n        if (!iConf) {\r\n            throw new Error(\"Config.json has wrong format.\");\r\n        }\r\n        var newConf = new Configuration();\r\n        newConf.language = iConf.language;\r\n        newConf.frostUrl = iConf.frostUrl;\r\n        iConf.supportedFeatures.forEach(\r\n            (f) => FeatureProvider.getInstance().getFeature(f) //Load all supported features\r\n        );\r\n\r\n        Configuration.instance = newConf;\r\n    }\r\n\r\n    // The default value for the language id\r\n    getLanguage(): string {\r\n        return this.language;\r\n    }\r\n\r\n    // The Url of the top level FROST REST API\r\n    getFrostUrl(): string {\r\n        return this.frostUrl;\r\n    }\r\n}\r\n\r\ninterface IConfig {\r\n    frostUrl: string;\r\n    language: string;\r\n    supportedFeatures: string[];\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"typeface-roboto\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport purple from \"@material-ui/core/colors/purple\";\r\nimport lightGreen from \"@material-ui/core/colors/green\";\r\nimport Layout from \"./View/Layout/Layout\";\r\nimport Configuration from \"./Controller/Storage/Configuration\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: lightGreen[500],\r\n        },\r\n        secondary: {\r\n            main: purple[500],\r\n        },\r\n    },\r\n});\r\n\r\nConfiguration.getInstance(); //Initialize App Config\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <Layout />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as languageData from \"./languages.json\";\r\n\r\ninterface Lang {\r\n    id: string;\r\n    name: string;\r\n    strings: Strings;\r\n}\r\n\r\ninterface Strings {\r\n    [id: string]: string;\r\n}\r\n\r\nexport default class Language {\r\n    private static languageInstance: Language | null = null;\r\n\r\n    private selectedLangId: string;\r\n    private languages: Lang[];\r\n    private selectedLang: Lang;\r\n\r\n    //class Language is designed as a singleton. You can get access to the only instance via the getInstance method\r\n    constructor() {\r\n        this.selectedLangId = \"\";\r\n        this.languages = languageData.languages;\r\n        this.selectedLang = this.languages[0];\r\n    }\r\n\r\n    //returns the language instance\r\n    public static getInstance(): Language {\r\n        if (!Language.languageInstance) {\r\n            Language.languageInstance = new Language();\r\n            var local = localStorage.getItem(\"language\");\r\n            if (local) {\r\n                //Change language if selected\r\n                Language.languageInstance.changeLanguage(local);\r\n            }\r\n        }\r\n        return Language.languageInstance as Language;\r\n    }\r\n\r\n    //returns the string that corresponds to the string id in the currently selected language\r\n    public getText(id: string): string {\r\n        let text: string = this.selectedLang.strings[id];\r\n        if (text === \"\" || text == null) {\r\n            throw new Error(\r\n                `There is no string with id: ${id} in ${this.selectedLang.name}.`\r\n            );\r\n        }\r\n        return text;\r\n    }\r\n\r\n    public getSelectedLanguage(): string {\r\n        return this.selectedLang.name;\r\n    }\r\n\r\n    public getSelectedLanguageId(): string {\r\n        return this.selectedLang.id;\r\n    }\r\n\r\n    public changeLanguage(languageID: string): void {\r\n        let find: Lang | undefined = this.languages.find(\r\n            (e) => e.id === languageID\r\n        );\r\n        if (find !== undefined) {\r\n            this.selectedLang = find;\r\n            this.selectedLangId = languageID;\r\n            localStorage.setItem(\"language\", this.selectedLangId);\r\n        }\r\n    }\r\n\r\n    public getAvailableLanguages(): Map<string, string> {\r\n        let langs: Map<string, string> = new Map<string, string>();\r\n        this.languages.forEach((element) => {\r\n            langs.set(element.id, element.name);\r\n        });\r\n        return langs;\r\n    }\r\n\r\n    public getDateString(date: Date): string {\r\n        let languageId = this.getSelectedLanguageId();\r\n        return date.toLocaleString(languageId);\r\n    }\r\n}\r\n","export class Position {\r\n    private latitude: number;\r\n\r\n    private longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        if (Math.abs(latitude) >= 90 || Math.abs(longitude) >= 180) {\r\n            throw new Error(\r\n                \"Not valid coordinates: \" + latitude + \"°N, \" + longitude + \"°O\"\r\n            );\r\n        }\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    getDistance(pos: Position): number {\r\n        return Math.sqrt(\r\n            Math.pow(this.latitude - pos.getLatitude(), 2) +\r\n                Math.pow(this.longitude - pos.getLongitude(), 2)\r\n        );\r\n    }\r\n\r\n    getCoordinates(): { lat: number; lng: number } {\r\n        var lat = this.latitude;\r\n        var lng = this.longitude;\r\n        return { lat, lng };\r\n    }\r\n\r\n    getLatitude(): number {\r\n        return this.latitude;\r\n    }\r\n\r\n    getLongitude(): number {\r\n        return this.longitude;\r\n    }\r\n\r\n    getString(): string {\r\n        return (\r\n            (Math.round(this.latitude * 100) / 100).toString() +\r\n            \" °N \" +\r\n            Math.round(this.longitude * 100) / 100 +\r\n            \" °O\"\r\n        );\r\n    }\r\n}\r\n","import { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\n\r\nexport default interface IDiagramController {\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    //returns type of chart\r\n    getChartType: () => ChartType,\r\n\r\n    //returns options that specify how the diagram is displayed\r\n    getGraphicsOptions: () => {},\r\n\r\n    //returns whether a diagram can be configured via a select form. In this case getSelectOprions must return an Array of select options\r\n    isConfigurable: () => boolean,\r\n\r\n    //returns all options that can be selected to configure the diagram\r\n    getConfigurationOptions: () => string[],\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption: () => string,\r\n\r\n    //returns the data that can be displayed in the diagram\r\n    getData: (configurationOptionName: string) => any[][],\r\n}\r\n\r\nexport enum ChartType {\r\n    LINE_CHART = 'LineChart',\r\n    PIE_CHART = 'PieChart',\r\n}","export default class Timespan {\r\n\r\n  //length in milliseconds\r\n  length: number;\r\n\r\n  constructor(length: number) {\r\n    this.length = length;\r\n  }\r\n\r\n  //returns the end of a timespan given the start date\r\n  public getEnd(start: Date): Date {\r\n    return (new Date(start.valueOf() + this.length));\r\n  }\r\n\r\n  //returns the start of a timespan given the end date\r\n  public getStart(end: Date): Date {\r\n    return (new Date(end.valueOf() - this.length));\r\n  }\r\n}\r\n","import { Feature } from \"../Model/Feature\";\r\nimport { Observation } from \"../Model/Observation\";\r\nimport { ObservationStation } from \"../Model/ObservationStation\";\r\nimport { Position } from \"../Model/Position\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport { Color } from \"../Model/Color\";\r\n\r\nexport default class MockDataProvider {\r\n    private static stations: { [key: string]: ObservationStation } = {};\r\n\r\n    private static randomColor(): Color {\r\n        return new Color(\r\n            Math.random() * 255,\r\n            Math.random() * 255,\r\n            Math.random() * 255\r\n        );\r\n    }\r\n    static mockFeature(): Feature {\r\n        var colors: { [key: number]: string } = {};\r\n        for (let index = 0; index < 5; index++) {\r\n            var c = this.randomColor().getHex();\r\n            colors[Math.floor(Math.random() * 100)] = c;\r\n        }\r\n        var scale = new Scale(true, colors);\r\n        return new Feature(\r\n            \"mockFeature\",\r\n            \"mockFeatureNameId\",\r\n            \"mockFeatureDescriptionId\",\r\n            scale,\r\n            \"mockWeblinkId\",\r\n            100,\r\n            \"uoM\",\r\n            ['YearComparisonLineChart', 'FeatureHistoryLineChart', 'ComparisonToLastYearPieChart'],\r\n            ''\r\n        );\r\n    }\r\n    private static mockStation(center: Position): ObservationStation {\r\n        var id = Math.floor(Math.random() * 10000).toString();\r\n        var station = new ObservationStation(\r\n            id,\r\n            \"mockName\",\r\n            \"mockDescription\",\r\n            new Position(\r\n                center.getLatitude() + 6 * Math.random() - 3,\r\n                center.getLongitude() + 6 * Math.random() - 3\r\n            ),\r\n            []\r\n        );\r\n        MockDataProvider.stations[station.getId()] = station;\r\n        return station;\r\n    }\r\n\r\n    private static mockObservations(center: Position): Observation[] {\r\n        var count = Math.floor(Math.random() * 9) + 2;\r\n        var obs = [];\r\n        for (let i = 0; i < count; i++) {\r\n            obs.push(\r\n                new Observation(\r\n                    this.mockStation(center),\r\n                    this.mockFeature(),\r\n                    Math.random() * 100,\r\n                    new Date(Date.now())\r\n                )\r\n            );\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Observation[] {\r\n        return this.mockObservations(center);\r\n    }\r\n\r\n    static getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Observation {\r\n        return new Observation(\r\n            station,\r\n            feature,\r\n            Math.random() * 100,\r\n            new Date(Date.now())\r\n        );\r\n    }\r\n\r\n    static getObservations(\r\n        station: ObservationStation,\r\n        start: Date,\r\n        end: Date,\r\n        feature: Feature,\r\n        //how many observations per day are expected\r\n        frequency: number\r\n    ): Observation[] {\r\n        let date = start;\r\n        let observations = new Array<Observation>();\r\n\r\n        if (frequency <= 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        } else if (frequency > 1) {\r\n            while (date.valueOf() < end.valueOf()) {\r\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 24 / frequency);\r\n                let value = Math.random() * 100;\r\n                let observation = new Observation(station, feature, value, date);\r\n                observations.push(observation);\r\n            }\r\n        }\r\n\r\n        return observations;\r\n    }\r\n\r\n    static getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): ObservationStation[] {\r\n        var obs = [];\r\n        for (let index = 0; index < 7; index++) {\r\n            obs.push(this.mockStation(middle));\r\n        }\r\n        return obs;\r\n    }\r\n\r\n    static getStation(id: string): ObservationStation {\r\n        return new ObservationStation(\r\n            id,\r\n            'mockName',\r\n            'mockDesc',\r\n            new Position(48.369665, 10.903877),\r\n            [\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n                this.mockFeature(),\r\n            ]\r\n        );\r\n    }\r\n}","import Language from \"../Storage/Language\";\r\nimport IDiagramController, { ChartType } from \"./DiagramController\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport Timespan from \"../../Model/Timespan\";\r\nimport MockDataProvider from \"../MockDataProvider\";\r\n\r\nlet languageProvider = Language.getInstance();\r\n\r\nclass FHLCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n    //type and label for the xAxis\r\n    xAxis: { type: string; label: string };\r\n\r\n    constructor(\r\n        nameId: string,\r\n        timespan: Timespan,\r\n        frequency: number,\r\n        xAxis: { type: string; label: string }\r\n    ) {\r\n        this.name = languageProvider.getText(nameId);\r\n        this.name = \"\";\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n        this.xAxis = xAxis;\r\n    }\r\n}\r\n\r\nexport class FeatureHistoryLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = true;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        //last 24 hours\r\n        new FHLCConfigurationOption(\r\n            \"last_24_hours\",\r\n            new Timespan(24 * 60 * 60 * 1000),\r\n            24,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last 7 days\r\n        new FHLCConfigurationOption(\r\n            \"last_7_days\",\r\n            new Timespan(7 * 24 * 60 * 60 * 1000),\r\n            12,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last 31 days\r\n        new FHLCConfigurationOption(\r\n            \"last_31_days\",\r\n            new Timespan(31 * 24 * 60 * 60 * 1000),\r\n            6,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n        //last year\r\n        new FHLCConfigurationOption(\r\n            \"last_year\",\r\n            new Timespan(365 * 24 * 60 * 60 * 1000),\r\n            1,\r\n            { type: \"date\", label: \"Day\" }\r\n        ),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption =\r\n        FeatureHistoryLineChartController.configurationOptions[0];\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel =\r\n            this.feature.getName() +\r\n            \"[\" +\r\n            this.feature.getUnitOfMeasurement() +\r\n            \"]\";\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return FeatureHistoryLineChartController.chartType;\r\n    }\r\n\r\n    getGraphicsOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return names of graphics options\r\n    getViewOptions() {\r\n        return FeatureHistoryLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return FeatureHistoryLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return FeatureHistoryLineChartController.defaultConfigurationOption\r\n            .name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        //translate options to current language\r\n        var optionNames = FeatureHistoryLineChartController.configurationOptions.map(\r\n            (option) => option.name\r\n        );\r\n        return optionNames;\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): any[][] {\r\n        //get option object\r\n        var configurationOption: FHLCConfigurationOption = this.getFHLCConfigurationOption(\r\n            configurationOptionName\r\n        );\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configurationOption.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configurationOption.frequency\r\n        );\r\n\r\n        //add react google chart specific header\r\n        var data: any[] = [[configurationOption.xAxis, this.yAxisLabel]];\r\n\r\n        //extract values and timestamps from observations\r\n        observations.forEach((observation) => {\r\n            let timestamp = observation.getTimeStamp();\r\n            let value = observation.getValue();\r\n            data.push([timestamp, value]);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getFHLCConfigurationOption(name: string): FHLCConfigurationOption {\r\n        var options = FeatureHistoryLineChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(\r\n            `${name} is an invalid configuration option for a diagram of type FeatureHistoryLineChart`\r\n        );\r\n    }\r\n}\r\n","import IDiagramController, { ChartType } from \"./DiagramController\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Feature } from \"../../Model/Feature\";\r\nimport Timespan from \"../../Model/Timespan\";\r\nimport Language from \"../Storage/Language\";\r\nimport MockDataProvider from \"../MockDataProvider\";\r\n\r\nclass CTLYPCConfigurationOption {\r\n    name: string;\r\n    timespan: Timespan;\r\n    frequency: number;\r\n\r\n    constructor(name: string, timespan: Timespan, frequency: number) {\r\n        this.name = name;\r\n        this.timespan = timespan;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class ComparisonToLastYearPieChartController\r\n    implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.PIE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigurable = false;\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {};\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new CTLYPCConfigurationOption(\r\n            \"default_configuration\",\r\n            new Timespan(365 * 24 * 60 * 60 * 1000),\r\n            24\r\n        ),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption =\r\n        ComparisonToLastYearPieChartController.configurationOptions[0];\r\n\r\n    languageProvider: Language;\r\n\r\n    observationStation: ObservationStation;\r\n    feature: Feature;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n\r\n        this.languageProvider = Language.getInstance();\r\n    }\r\n\r\n    getChartType(): ChartType {\r\n        return ComparisonToLastYearPieChartController.chartType;\r\n    }\r\n\r\n    getGraphicsOptions() {\r\n        return ComparisonToLastYearPieChartController.graphicsOptions;\r\n    }\r\n\r\n    isConfigurable() {\r\n        return ComparisonToLastYearPieChartController.isConfigurable;\r\n    }\r\n\r\n    getConfigurationOptions() {\r\n        return ComparisonToLastYearPieChartController.configurationOptions.map(\r\n            (option) => option.name\r\n        );\r\n    }\r\n\r\n    getDefaultConfigurationOption() {\r\n        return ComparisonToLastYearPieChartController.defaultConfigurationOption\r\n            .name;\r\n    }\r\n\r\n    getData(configurationOptionName: string): any[][] {\r\n        //configuration option by name\r\n        var configuration = this.getCTLYPCConfigurationOption(\r\n            configurationOptionName\r\n        );\r\n\r\n        //get timespan\r\n        var end: Date = new Date(Date.now());\r\n        var start: Date = configuration.timespan.getStart(end);\r\n\r\n        //get mock observations\r\n        var observations = MockDataProvider.getObservations(\r\n            this.observationStation,\r\n            start,\r\n            end,\r\n            this.feature,\r\n            configuration.frequency\r\n        );\r\n\r\n        var lastObservationValue = observations.pop()?.getValue() as number;\r\n\r\n        var higher = 0;\r\n        var lower = 0;\r\n\r\n        let higherTag = this.languageProvider.getText(\"higher\");\r\n        let lowerTag = this.languageProvider.getText(\"lower\");\r\n\r\n        observations.forEach((observation) => {\r\n            observation.getValue() > lastObservationValue ? higher++ : lower++;\r\n        });\r\n\r\n        var data = [\r\n            [\"Vergleich zum letzten Messwert\", \"Anzahl Tage\"],\r\n            [higherTag, higher],\r\n            [lowerTag, lower],\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    //get configuration option by name\r\n    private getCTLYPCConfigurationOption(\r\n        name: string\r\n    ): CTLYPCConfigurationOption {\r\n        var options =\r\n            ComparisonToLastYearPieChartController.configurationOptions;\r\n\r\n        for (let i = 0; i < options.length; i++) {\r\n            //if option matches return it\r\n            if (options[i].name === name) {\r\n                return options[i];\r\n            }\r\n        }\r\n\r\n        //no option matches, throw an error\r\n        throw new Error(\r\n            `${name} is an invalid configuration option for a diagram of type ComparisonToLastYearPieChart`\r\n        );\r\n    }\r\n}\r\n","import IDiagramController, { ChartType } from './DiagramController';\r\nimport { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport MockDataProvider from '../MockDataProvider';\r\n\r\nclass YCLCCConfigurationOption {\r\n    name: string;\r\n    numberOfYears: number;\r\n    frequency: number;\r\n\r\n    constructor(name: string, numberOfYears: number, frequency: number) {\r\n        this.name = name;\r\n        this.numberOfYears = numberOfYears;\r\n        this.frequency = frequency;\r\n    }\r\n}\r\n\r\nexport class YearComparisonLineChartController implements IDiagramController {\r\n    //support line charts\r\n    private static readonly chartType = ChartType.LINE_CHART;\r\n\r\n    //enable configuration\r\n    private static readonly isConfigutable = false;\r\n\r\n    //configuration options\r\n    private static readonly configurationOptions = [\r\n        new YCLCCConfigurationOption('default_configuration', 3, 1),\r\n    ];\r\n\r\n    //default configuration option\r\n    private static readonly defaultConfigurationOption = new YCLCCConfigurationOption('default_configuration', 10, 1);\r\n\r\n    // options for the graphical appearence\r\n    private static readonly graphicsOptions = {\r\n        hAxis: {\r\n            format: 'MMM',\r\n            gridlines: { count: 6 }\r\n        },\r\n    };\r\n\r\n    //concerning observation station\r\n    observationStation: ObservationStation;\r\n    //concerning feature\r\n    feature: Feature;\r\n    yAxisLabel: string;\r\n\r\n    constructor(observationStation: ObservationStation, feature: Feature) {\r\n        this.observationStation = observationStation;\r\n        this.feature = feature;\r\n        this.yAxisLabel = `${this.feature.getName()} [${this.feature.getUnitOfMeasurement()}]`;\r\n    }\r\n    //return chart type\r\n    getChartType(): ChartType {\r\n        return YearComparisonLineChartController.chartType;\r\n    };\r\n\r\n    getGraphicsOptions() {\r\n        return YearComparisonLineChartController.graphicsOptions;\r\n    }\r\n\r\n    //return that the corresponding diagram to this controller is configurable\r\n    isConfigurable() {\r\n        return YearComparisonLineChartController.isConfigutable;\r\n    }\r\n\r\n    //returns default configuration option\r\n    getDefaultConfigurationOption(): string {\r\n        return YearComparisonLineChartController.defaultConfigurationOption.name;\r\n    }\r\n\r\n    //return names of configuration options\r\n    getConfigurationOptions(): string[] {\r\n        return YearComparisonLineChartController.configurationOptions.map(option => option.name);\r\n    }\r\n\r\n    getYCLCCConfigurationOption(name: string) {\r\n        for (let option of YearComparisonLineChartController.configurationOptions) {\r\n            if (option.name === name) return option;\r\n        }\r\n        throw new Error('Configuration option: ' + name + ' does not exist for YearComparisonLineChart');\r\n    }\r\n\r\n    //return data to display\r\n    getData(configurationOptionName: string): Array<Array<string | Date | number | null>> {\r\n        let configurationOption = this.getYCLCCConfigurationOption(configurationOptionName);\r\n        let numberOfYears = configurationOption.numberOfYears;\r\n        let frequency = configurationOption.frequency;\r\n\r\n        let now = new Date(Date.now());\r\n\r\n        //start of timespan\r\n        let start = new Date(now.getFullYear() - numberOfYears, 0, 1);\r\n        //end of timespan\r\n        let end = now;\r\n\r\n        //request (mock-)data\r\n        let observations = MockDataProvider.getObservations(this.observationStation, start, end, this.feature, frequency);\r\n\r\n        //filter out the null values\r\n        let cleanedObservations = observations.filter(observation => {\r\n            return (observation !== null);\r\n        });\r\n\r\n        //determine the displayed years\r\n        let years: number[] = new Array<number>();\r\n        for (let i = 0; i < numberOfYears; i++) {\r\n            years.push(now.getFullYear() - i);\r\n        }\r\n\r\n        //define header\r\n        let header: string[] = years.map(year => year.toString());\r\n        header.splice(0, 0, 'dates');\r\n\r\n\r\n        //define new data table with header\r\n        let dt = new DataTable(header)\r\n\r\n        //add every observation to the table\r\n        for (let observation of cleanedObservations) {\r\n            let date = observation.getTimeStamp();\r\n            let year = date.getFullYear().toString();\r\n            let value = observation.getValue();\r\n            dt.addValue(date, year, value);\r\n        }\r\n\r\n        //return data table as a twodimensional array\r\n        let dtAsArray = dt.toArray();\r\n        console.log(dtAsArray);\r\n        return dtAsArray;\r\n    }\r\n}\r\n\r\nclass DTRow {\r\n    date: Date;\r\n    values: Array<number>;\r\n\r\n    constructor(date: Date, numberOfValues: number) {\r\n        this.date = date;\r\n        this.values = new Array<number>(numberOfValues);\r\n    }\r\n\r\n    addValue(value: number, index: number) {\r\n        this.values[index] = value;\r\n    }\r\n\r\n    toArray(): Array<Date | number> {\r\n        let arrayRepresentation = new Array<Date | number>();\r\n        arrayRepresentation = this.values;\r\n        arrayRepresentation.splice(0, 0, this.date);\r\n        return arrayRepresentation;\r\n    }\r\n\r\n    static sort(dtrowA: DTRow, dtrowB: DTRow): number {\r\n        return ((dtrowA.date.valueOf() <= dtrowB.date.valueOf() ? -1 : 1));\r\n    }\r\n}\r\n\r\nclass DataTable {\r\n    static readonly BASE_YEAR = 2020;\r\n\r\n    header: string[];\r\n    rows: DTRow[];\r\n    numberOfValues: number;\r\n\r\n    constructor(header: string[]) {\r\n        this.header = header;\r\n        this.numberOfValues = header.length - 1;\r\n        this.rows = new Array<DTRow>();\r\n    }\r\n\r\n    addValue(date: Date, columnKey: string, value: number) {\r\n        //get row\r\n        let rowIndex = this.getRowIndex(date);\r\n        if (rowIndex === null) {\r\n            this.rows.push(new DTRow(this.getBaseDate(date), this.numberOfValues));\r\n            rowIndex = (this.rows.length - 1);\r\n        }\r\n\r\n        //get column\r\n        let columnIndex = this.getColumnIndex(columnKey);\r\n        if (columnKey === null) {\r\n            throw new Error(`No column key: ${columnKey} in this data table`);\r\n        }\r\n        columnIndex = columnIndex as number;\r\n\r\n        //add value\r\n        this.rows[rowIndex].addValue(value, columnIndex);\r\n    }\r\n\r\n    getColumnIndex(key: string): number | null {\r\n        for (let index = 0; index < this.header.length; index++) {\r\n            if (key === this.header[index]) {\r\n                return (index - 1);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getRowIndex(date: Date): number | null {\r\n        for (let index = 0; index < this.rows.length; index++) {\r\n            if (this.datesAreEqual(date, this.rows[index].date)) {\r\n                return index;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getBaseDate(date: Date) {\r\n        let baseDate = new Date(\r\n            DataTable.BASE_YEAR,\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        );\r\n        return baseDate;\r\n    }\r\n\r\n    //returns whether two dates are the same except their years\r\n    datesAreEqual(dateA: Date, dateB: Date): boolean {\r\n        let equal: boolean =\r\n            (dateA.getMonth() === dateB.getMonth()) &&\r\n            (dateA.getDate() === dateB.getDate()) &&\r\n            (dateA.getHours() === dateB.getHours()) &&\r\n            (dateA.getMinutes() === dateB.getMinutes()) &&\r\n            (dateA.getSeconds() === dateB.getSeconds()) &&\r\n            (dateA.getMilliseconds() === dateB.getMilliseconds());\r\n        return equal;\r\n    }\r\n\r\n    sort() {\r\n        this.rows.sort(DTRow.sort);\r\n    }\r\n\r\n    toArray() {\r\n        this.sort();\r\n\r\n        let arrayRepresentation = new Array<Array<string | Date | number | null>>();\r\n        arrayRepresentation = this.rows.map(row => row.toArray());\r\n        arrayRepresentation.splice(0, 0, this.header);\r\n        return arrayRepresentation;\r\n    }\r\n}\r\n\r\n","import { ObservationStation } from '../../Model/ObservationStation';\r\nimport { Feature } from '../../Model/Feature';\r\nimport { FeatureHistoryLineChartController } from './FeatureHistoryLineChartController';\r\nimport { ComparisonToLastYearPieChartController } from './ComparisonToLastYearPieChartController';\r\nimport { YearComparisonLineChartController } from './YearComparisonLineChartController';\r\nimport IDiagramController from './DiagramController';\r\n\r\nexport default class DiagramFactory {\r\n    private static readonly diagramMap = new Map<string, Function>([\r\n        ['FeatureHistoryLineChart', (observationStation: ObservationStation, feature: Feature) => { return new FeatureHistoryLineChartController(observationStation, feature) }],\r\n        ['ComparisonToLastYearPieChart', (observationStation: ObservationStation, feature: Feature) => { return new ComparisonToLastYearPieChartController(observationStation, feature) }],\r\n        ['YearComparisonLineChart', (observationStation: ObservationStation, feature: Feature) => { return new YearComparisonLineChartController(observationStation, feature) }],\r\n    ]);\r\n\r\n    public static getDiagramController(id: string, observationStation: ObservationStation, feature: Feature): IDiagramController {\r\n        if (DiagramFactory.diagramMap.has(id)) {\r\n            var constructController = DiagramFactory.diagramMap.get(id) as Function;\r\n            return constructController.call(DiagramFactory, observationStation, feature);\r\n        } else {\r\n            throw new Error(`Diagram id: ${id}, is not supported`);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Scale } from \"./Scale\";\r\nimport { Observation } from \"./Observation\";\r\nimport { ObservationStation } from \"./ObservationStation\";\r\nimport DiagramFactory from \"../Controller/DiagramController/DiagramFactory\";\r\nimport IDiagramController from \"../Controller/DiagramController/DiagramController\";\r\nimport Language from \"../Controller/Storage/Language\";\r\n\r\nlet language = Language.getInstance();\r\n\r\nexport class Feature {\r\n    private id: string;\r\n    private nameId: string;\r\n    private descriptionId: string;\r\n    private scale: Scale;\r\n    private relatedWeblinkId: string;\r\n    private limit: number;\r\n    private unitOfMeasurement: string;\r\n    private controllerIds: string[];\r\n    private iconName: string;\r\n\r\n    constructor(\r\n        id: string,\r\n        nameId: string,\r\n        descriptionId: string,\r\n        scale: Scale,\r\n        relatedWeblinkId: string,\r\n        limit: number,\r\n        unitOfMeasurement: string,\r\n        controllerIds: string[],\r\n        iconName: string\r\n    ) {\r\n        this.id = id;\r\n        this.nameId = nameId;\r\n        this.descriptionId = descriptionId;\r\n        this.scale = scale;\r\n        this.relatedWeblinkId = relatedWeblinkId;\r\n        this.limit = limit;\r\n        this.unitOfMeasurement = unitOfMeasurement;\r\n        this.controllerIds = controllerIds;\r\n        this.iconName = iconName;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return language.getText(this.nameId);\r\n        //return this.nameId;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return language.getText(this.descriptionId);\r\n        //return this.descriptionId;\r\n    }\r\n\r\n    public getRelatedWeblink(): string {\r\n        return language.getText(this.relatedWeblinkId);\r\n        //return this.relatedWeblinkId;\r\n    }\r\n\r\n    public getRelatedScale(): Scale {\r\n        return this.scale;\r\n    }\r\n\r\n    public getDiagramController(\r\n        observationStation: ObservationStation\r\n    ): IDiagramController[] {\r\n        var diagramController = new Array<IDiagramController>();\r\n\r\n        this.controllerIds.forEach((id) => {\r\n            let controller = DiagramFactory.getDiagramController(\r\n                id,\r\n                observationStation,\r\n                this\r\n            );\r\n            diagramController.push(controller);\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public getLimit(): number {\r\n        return this.limit;\r\n    }\r\n\r\n    public getUnitOfMeasurement(): string {\r\n        return this.unitOfMeasurement;\r\n    }\r\n\r\n    public isLimitExceeded(observation: Observation): boolean {\r\n        return observation.getValue() > this.limit;\r\n    }\r\n\r\n    public getIconName(): string {\r\n        return this.iconName;\r\n    }\r\n}\r\n","import { Feature } from \"../Model/Feature\";\r\nimport { Scale } from \"../Model/Scale\";\r\nimport * as featureDefinition from \"../Jsons/features.json\";\r\n\r\nexport default class FeatureProvider {\r\n    //private context: any;\r\n    private features: { [id: string]: Feature };\r\n    private static instance: FeatureProvider | null = null;\r\n\r\n    constructor() {\r\n        this.features = {};\r\n        //@ts-ignore\r\n        (featureDefinition.features as FeatureDefinition[]).forEach((f) => {\r\n            this.addFeature(f);\r\n        });\r\n    }\r\n\r\n    static getInstance(): FeatureProvider {\r\n        if (!this.instance) {\r\n            this.instance = new FeatureProvider();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private addFeature(definition: FeatureDefinition) {\r\n        if (definition) {\r\n            var f = new Feature(\r\n                definition.id,\r\n                definition.nameId,\r\n                definition.descriptionId,\r\n                new Scale(true, definition.defaultScale),\r\n                definition.webLinkId,\r\n                definition.limit,\r\n                definition.unitOfMeasurement,\r\n                definition.diagrams,\r\n                definition.icon\r\n            );\r\n            this.features[f.getId()] = f;\r\n        }\r\n    }\r\n\r\n    //Returns all loaded features\r\n    listAllFeatures(): Feature[] {\r\n        return Object.keys(this.features).map((key) => {\r\n            return this.features[key];\r\n        });\r\n    }\r\n\r\n    getFeature(featureId: string): Feature | undefined {\r\n        if (Object.keys(this.features).includes(featureId)) {\r\n            return this.features[featureId];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\ninterface FeatureDefinition {\r\n    id: string;\r\n    nameId: string;\r\n    unitOfMeasurement: string;\r\n    descriptionId: string;\r\n    defaultScale: { [key: number]: string };\r\n    webLinkId: string;\r\n    limit: number;\r\n    diagrams: string[];\r\n    icon: string;\r\n}\r\n","export class Color {\n    private r: number;\n    private g: number;\n    private b: number;\n\n    constructor(r: number, g: number, b: number) {\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        //Creates a color from RGB values\n        if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n            throw new TypeError(\n                \"r, g, b have to be an integer in [0, 255], are\" +\n                    r +\n                    \" \" +\n                    g +\n                    \" \" +\n                    b\n            );\n        }\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static getColorFromHex(hex: string): Color {\n        var regexp = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g;\n        var match = regexp.exec(hex);\n        if (!match) {\n            //Keine Hex-Farbe\n            throw new TypeError(\"hex has to be in format #RRGGBB\");\n        }\n        var r = parseInt(match[1], 16);\n        var g = parseInt(match[2], 16);\n        var b = parseInt(match[3], 16);\n\n        return new Color(r, g, b);\n    }\n\n    getRGB(): { r: number; g: number; b: number } {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        return { r: r, g: g, b: b };\n    }\n\n    getHex(): string {\n        return (\n            \"#\" + this.toHex(this.r) + this.toHex(this.g) + this.toHex(this.b)\n        );\n    }\n\n    private toHex(n: number): string {\n        if (n < 0 || n > 255) {\n            return this.toHex(0); //This should never happen, only for reusing this method later.\n        }\n        var hex = n.toString(16).toUpperCase(); //Converts to upper-case-hex.\n        if (hex.length < 2) {\n            hex = \"0\" + hex; //Add padding if n < 16\n        }\n        return hex;\n    }\n}\n","export class FrostResult<T> {\r\n    private result: T | null;\r\n    private success: boolean;\r\n    private errorMessage: string;\r\n\r\n    constructor(result: T | null, success: boolean, errorMessage: string) {\r\n        if (success || result !== null || result !== undefined) {\r\n            //object is not null or success\r\n            this.result = result;\r\n            this.success = true;\r\n            this.errorMessage = \"\";\r\n        } else {\r\n            //object is null and no success\r\n            this.result = null;\r\n            this.success = false;\r\n            this.errorMessage = errorMessage;\r\n        }\r\n    }\r\n\r\n    getResult(): T | null {\r\n        if (this.result === undefined) {\r\n            return null;\r\n        }\r\n        return this.result;\r\n    }\r\n\r\n    getSuccess(): boolean {\r\n        return this.success;\r\n    }\r\n\r\n    getMessage(): string {\r\n        return this.errorMessage;\r\n    }\r\n}\r\n","import { FrostResult } from \"../../Model/FrostResult\";\r\nimport FrostFactory from \"./FrostFactory\";\r\nimport QueryBuilder from \"./QueryBuilder\";\r\n\r\nexport default class FrostServer {\r\n    private url: string;\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n    }\r\n\r\n    public getUrl(): string {\r\n        return this.url;\r\n    }\r\n\r\n    public setUrl(url: string): void {\r\n        this.url = url;\r\n    }\r\n\r\n    public async request<T>(\r\n        ff: FrostFactory<T>,\r\n        options: any\r\n    ): Promise<FrostResult<T>> {\r\n        let req: string = ff.getQueryBuilder().getQuery(options);\r\n        const json: any = await fetch(this.url + req).then((response) => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n        if (json === null) {\r\n            return new FrostResult<T>(null, false, \"fetch error\");\r\n        }\r\n        let result: T;\r\n        try {\r\n            result = ff.getConverter().convert(json, options);\r\n        } catch (error) {\r\n            return new FrostResult<T>(null, false, error.message);\r\n        }\r\n        return new FrostResult<T>(result, true, \"\");\r\n    }\r\n}\r\n","import ResultModelConverter from \"./ResultModelConverter\";\r\nimport QueryBuilder from \"./QueryBuilder\";\r\n\r\nexport default abstract class FrostFactory<T> {\r\n\r\n    private rmc: ResultModelConverter<T>;\r\n    private qb: QueryBuilder;\r\n\r\n    constructor(rmc: ResultModelConverter<T>, qb: QueryBuilder) {\r\n        this.rmc = rmc;\r\n        this.qb = qb;\r\n    }\r\n\r\n    public getConverter(): ResultModelConverter<T> {\r\n        return this.rmc;\r\n    }\r\n\r\n    public getQueryBuilder(): QueryBuilder {\r\n        return this.qb;\r\n    }\r\n}","import QueryBuilder from \"../QueryBuilder\";\r\nimport FrostFactory from \"../FrostFactory\";\r\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\r\nimport ResultModelConverter from \"../ResultModelConverter\";\r\nimport { Position } from \"../../../Model/Position\";\r\nimport { Feature } from \"../../../Model/Feature\";\r\nimport FeatureProvider from \"../../FeatureProvider\";\r\n\r\nexport class GetStationFactory extends FrostFactory<ObservationStation> {\r\n    constructor() {\r\n        super(new GetStationConverter(), new GetStationBuilder());\r\n    }\r\n}\r\n\r\nexport class GetStationConverter\r\n    implements ResultModelConverter<ObservationStation> {\r\n    public convert(\r\n        json: ObservationStationEntity,\r\n        options: getStationOptions\r\n    ): ObservationStation {\r\n        let pos: Position;\r\n        if (json.Locations === undefined || json.Locations === null) {\r\n            throw new Error(\"ObservationStation has no Location\");\r\n        } else {\r\n            pos = new Position(\r\n                json.Locations[0].location.coordinates[1],\r\n                json.Locations[0].location.coordinates[0]\r\n            );\r\n        }\r\n\r\n        if (json.Datastreams === undefined || json.Datastreams === null) {\r\n            throw new Error(\"Station has no Observed Properties\");\r\n        }\r\n\r\n        let features: Feature[] = [];\r\n\r\n        let fp: FeatureProvider = FeatureProvider.getInstance();\r\n        json.Datastreams.forEach((element) => {\r\n            let getfeat: Feature | undefined = fp.getFeature(\r\n                element.ObservedProperty[\"@iot.id\"]\r\n            );\r\n            if (getfeat !== undefined) {\r\n                features.push(getfeat);\r\n            }\r\n        });\r\n\r\n        return new ObservationStation(\r\n            json[\"@iot.id\"],\r\n            json.name,\r\n            json.description,\r\n            pos,\r\n            features\r\n        );\r\n    }\r\n}\r\n\r\nexport class GetStationBuilder implements QueryBuilder {\r\n    public getQuery(options: getStationOptions): string {\r\n        return (\r\n            \"Things('\" +\r\n            options.id +\r\n            \"')?$select=@iot.id,name,description&$expand=Locations($select=location),Datastreams/ObservedProperty($select=@iot.id)\"\r\n        );\r\n    }\r\n}\r\n\r\nexport interface getStationOptions {\r\n    id: string;\r\n}\r\n\r\ninterface ObservationStationEntity {\r\n    name: string;\r\n    description: string;\r\n    Datastreams?: DatastreamsEntity[] | null;\r\n    Locations?: LocationsEntity[] | null;\r\n    \"@iot.id\": string;\r\n}\r\ninterface DatastreamsEntity {\r\n    name: string;\r\n    ObservedProperty: ObservedPropertyEntity;\r\n}\r\ninterface ObservedPropertyEntity {\r\n    \"@iot.id\": string;\r\n}\r\ninterface LocationsEntity {\r\n    location: LocationEntity;\r\n}\r\ninterface LocationEntity {\r\n    type: string;\r\n    coordinates: number[];\r\n}\r\n","import QueryBuilder from \"../QueryBuilder\";\r\nimport FrostFactory from \"../FrostFactory\";\r\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\r\nimport ResultModelConverter from \"../ResultModelConverter\";\r\nimport { Position } from \"../../../Model/Position\";\r\nimport { Feature } from \"../../../Model/Feature\";\r\nimport FeatureProvider from \"../../FeatureProvider\";\r\n\r\nexport class GetObservationStationsFactory extends FrostFactory<\r\n    ObservationStation[]\r\n> {\r\n    constructor() {\r\n        super(\r\n            new GetObservationStationsConverter(),\r\n            new GetObservationStationsBuilder()\r\n        );\r\n    }\r\n}\r\n\r\nexport class GetObservationStationsConverter\r\n    implements ResultModelConverter<ObservationStation[]> {\r\n    public convert(\r\n        json: ResultList,\r\n        options: GetObservationStationsOptions\r\n    ): ObservationStation[] {\r\n        let stations: ObservationStation[] = [];\r\n        if (json.value === null || json.value === undefined) {\r\n            throw new Error(\"nö\");\r\n        }\r\n        json.value.forEach((element) => {\r\n            let coord: number[] = element.Locations[0].location.coordinates;\r\n            let pos: Position = new Position(coord[1], coord[0]);\r\n\r\n            let features: Feature[] = [];\r\n            let fp: FeatureProvider = FeatureProvider.getInstance();\r\n            if (\r\n                element.Datastreams === null ||\r\n                element.Datastreams === undefined\r\n            ) {\r\n                throw new Error(\"nö\");\r\n            }\r\n            element.Datastreams.forEach((stream) => {\r\n                let feat: Feature | undefined = fp.getFeature(\r\n                    stream.ObservedProperty[\"@iot.id\"]\r\n                );\r\n                if (feat !== undefined) {\r\n                    features.push(feat);\r\n                }\r\n            });\r\n            stations.push(\r\n                new ObservationStation(\r\n                    element[\"@iot.id\"],\r\n                    element.name,\r\n                    element.description,\r\n                    pos,\r\n                    []\r\n                )\r\n            );\r\n        });\r\n\r\n        if (stations.length === 0) {\r\n            alert(\"keine Stationen gefunden\");\r\n        }\r\n        return stations;\r\n    }\r\n}\r\n\r\nexport class GetObservationStationsBuilder implements QueryBuilder {\r\n    public getQuery(options: GetObservationStationsOptions): string {\r\n        return (\r\n            \"Things?$filter=geo.distance(Locations/location,geography'POINT(\" +\r\n            options.middle.getLongitude() +\r\n            \" \" +\r\n            options.middle.getLatitude() +\r\n            \")') lt \" +\r\n            options.radius +\r\n            \" and overlaps(Datastreams/phenomenonTime,(now() sub duration'P1d'))&$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)\"\r\n        );\r\n    }\r\n}\r\n\r\nexport interface GetObservationStationsOptions {\r\n    middle: Position;\r\n    radius: number;\r\n}\r\n\r\nexport interface ResultList {\r\n    value?: ValueEntity[] | null;\r\n}\r\nexport interface ValueEntity {\r\n    name: string;\r\n    description: string;\r\n    properties?: Properties | null;\r\n    \"Datastreams@iot.navigationLink\": string;\r\n    Datastreams?: DatastreamsEntity[] | null;\r\n    \"MultiDatastreams@iot.navigationLink\": string;\r\n    \"Locations@iot.navigationLink\": string;\r\n    Locations: LocationsEntity[];\r\n    \"HistoricalLocations@iot.navigationLink\": string;\r\n    \"@iot.id\": string;\r\n    \"@iot.selfLink\": string;\r\n}\r\nexport interface Properties {\r\n    \"hardware.id\": string;\r\n    shortname: string;\r\n    \"operator.domain\": string;\r\n    station_active_from?: string | null;\r\n    station_setting_name?: string | null;\r\n    \"station type name\"?: string | null;\r\n    station_no?: number | null;\r\n    documentation?: string | null;\r\n}\r\nexport interface DatastreamsEntity {\r\n    name: string;\r\n    ObservedProperty: ObservedProperty;\r\n}\r\nexport interface ObservedProperty {\r\n    \"@iot.id\": string;\r\n}\r\nexport interface LocationsEntity {\r\n    location: Location;\r\n}\r\nexport interface Location {\r\n    type: string;\r\n    coordinates: number[];\r\n}\r\n","import QueryBuilder from \"../QueryBuilder\";\r\nimport FrostFactory from \"../FrostFactory\";\r\nimport { Observation } from \"../../../Model/Observation\";\r\nimport ResultModelConverter from \"../ResultModelConverter\";\r\nimport { Position } from \"../../../Model/Position\";\r\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\r\nimport { Feature } from \"../../../Model/Feature\";\r\nimport { Scale } from \"../../../Model/Scale\";\r\n\r\nexport class GetLatestObservationFactory extends FrostFactory<Observation> {\r\n    constructor() {\r\n        super(\r\n            new GetLatestObservationConverter(),\r\n            new GetLatestObservationBuilder()\r\n        );\r\n    }\r\n}\r\n\r\nexport class GetLatestObservationConverter\r\n    implements ResultModelConverter<Observation> {\r\n    public convert(\r\n        json: ResultList,\r\n        options: GetLatestObservationOptions\r\n    ): Observation {\r\n        if (json.value === null || json.value === undefined) {\r\n            throw new Error(\"nö\");\r\n        }\r\n        if (json.value[0] === null || json.value[0] === undefined) {\r\n            throw new Error(\"nö\");\r\n        }\r\n        if (\r\n            json.value[0].Observations === null ||\r\n            json.value[0].Observations === undefined\r\n        ) {\r\n            throw new Error(\"nö\");\r\n        }\r\n        if (\r\n            json.value[0].Observations[0] === null ||\r\n            json.value[0].Observations[0] === undefined\r\n        ) {\r\n            throw new Error(\"nö\");\r\n        }\r\n\r\n        let observation: ObservationsEntity = json.value[0].Observations[0];\r\n\r\n        return new Observation(\r\n            options.station,\r\n            options.feature,\r\n            observation.result,\r\n            new Date(observation.phenomenonTime)\r\n        );\r\n    }\r\n}\r\n\r\nexport class GetLatestObservationBuilder implements QueryBuilder {\r\n    public getQuery(options: GetLatestObservationOptions): string {\r\n        return (\r\n            \"Datastreams?$select=@iot.id&$filter=Thing/@iot.id eq '\" +\r\n            options.station.getId() +\r\n            \"' and ObservedProperty/@iot.id eq '\" +\r\n            options.feature.getId() +\r\n            \"'&$expand=Observations($top=1;$orderby=phenomenonTime desc;$select=result,phenomenonTime)\"\r\n        );\r\n    }\r\n}\r\n\r\nexport interface GetLatestObservationOptions {\r\n    station: ObservationStation;\r\n    feature: Feature;\r\n}\r\n\r\nexport interface ResultList {\r\n    value?: ValueEntity[] | null;\r\n}\r\nexport interface ValueEntity {\r\n    Observations?: ObservationsEntity[] | null;\r\n    \"Observations@iot.nextLink\": string;\r\n    \"@iot.id\": string;\r\n}\r\nexport interface ObservationsEntity {\r\n    phenomenonTime: string;\r\n    result: number;\r\n}\r\n","import QueryBuilder from \"../QueryBuilder\";\r\nimport FrostFactory from \"../FrostFactory\";\r\nimport { Observation } from \"../../../Model/Observation\";\r\nimport ResultModelConverter from \"../ResultModelConverter\";\r\nimport { Position } from \"../../../Model/Position\";\r\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\r\nimport { Feature } from \"../../../Model/Feature\";\r\nimport { Stream } from \"stream\";\r\nimport FeatureProvider from \"../../FeatureProvider\";\r\n\r\nexport class GetLatestObservationsFactory extends FrostFactory<Observation[]> {\r\n    constructor() {\r\n        super(\r\n            new GetLatestObservationsConverter(),\r\n            new GetLatestObservationsBuilder()\r\n        );\r\n    }\r\n}\r\n\r\nexport class GetLatestObservationsConverter\r\n    implements ResultModelConverter<Observation[]> {\r\n    public convert(\r\n        json: ResultList,\r\n        options: GetLatestObservationsOptions\r\n    ): Observation[] {\r\n        let observations: Observation[] = [];\r\n        if (json.value === null || json.value === undefined) {\r\n            throw new Error(\"nö\");\r\n        }\r\n\r\n        json.value.forEach((stream) => {\r\n            try {\r\n                let thing: Thing = stream.Thing;\r\n                if (thing.Locations === null || thing.Locations === undefined) {\r\n                    return;\r\n                }\r\n                if (\r\n                    thing.Locations[0].location.coordinates === null ||\r\n                    thing.Locations[0].location.coordinates === undefined\r\n                ) {\r\n                    return;\r\n                }\r\n                let pos: Position = new Position(\r\n                    thing.Locations[0].location.coordinates[1],\r\n                    thing.Locations[0].location.coordinates[0]\r\n                );\r\n\r\n                let features: Feature[] = [];\r\n\r\n                if (\r\n                    thing.Datastreams === null ||\r\n                    thing.Datastreams === undefined\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                let fp: FeatureProvider = FeatureProvider.getInstance();\r\n\r\n                thing.Datastreams.forEach((dastream) => {\r\n                    let feat: Feature | undefined = fp.getFeature(\r\n                        dastream.ObservedProperty[\"@iot.id\"]\r\n                    );\r\n                    if (feat !== undefined) {\r\n                        features.push(feat);\r\n                    }\r\n                });\r\n\r\n                let sta: ObservationStation = new ObservationStation(\r\n                    thing[\"@iot.id\"],\r\n                    thing.name,\r\n                    thing.description,\r\n                    pos,\r\n                    features\r\n                );\r\n\r\n                if (\r\n                    stream.Observations === null ||\r\n                    stream.Observations === undefined\r\n                ) {\r\n                    return;\r\n                }\r\n                if (stream.Observations[0] === null) {\r\n                    return;\r\n                }\r\n                observations.push(\r\n                    new Observation(\r\n                        sta,\r\n                        options.feature,\r\n                        stream.Observations[0].result,\r\n                        new Date(stream.Observations[0].phenomenonTime)\r\n                    )\r\n                );\r\n            } catch (e) {}\r\n        });\r\n\r\n        return observations;\r\n    }\r\n}\r\n\r\nexport class GetLatestObservationsBuilder implements QueryBuilder {\r\n    public getQuery(options: GetLatestObservationsOptions): string {\r\n        return (\r\n            \"Datastreams?$select=@iot.id,name&$filter=geo.distance(Thing/Locations/location,geography'POINT(\" +\r\n            options.center.getLongitude() +\r\n            \" \" +\r\n            options.center.getLatitude() +\r\n            \")') lt \" +\r\n            options.radius +\r\n            \" and overlaps(phenomenonTime,(now() sub duration'P1d')) and ObservedProperty/@iot.id eq '\" +\r\n            options.feature.getId() +\r\n            \"'&$expand=Thing($select=name,@iot.id;$expand=Locations($select=location),Datastreams($select=name)/ObservedProperty($select=@iot.id)),Observations($select=result;$filter=phenomenonTime gt now() sub duration'P1D';$orderby=phenomenonTime desc;$top=1)\"\r\n        );\r\n    }\r\n}\r\n\r\nexport interface GetLatestObservationsOptions {\r\n    center: Position;\r\n    radius: number;\r\n    feature: Feature;\r\n}\r\n\r\ninterface ResultList {\r\n    value?: ValueEntity[] | null;\r\n}\r\ninterface ValueEntity {\r\n    name: string;\r\n    Thing: Thing;\r\n    Observations?: (ObservationsEntity | null)[] | null;\r\n    \"@iot.id\": string;\r\n    \"Observations@iot.nextLink\"?: string | null;\r\n}\r\ninterface Thing {\r\n    name: string;\r\n    description: string;\r\n    Datastreams?: DatastreamsEntity[] | null;\r\n    Locations?: LocationsEntity[] | null;\r\n    \"@iot.id\": string;\r\n}\r\ninterface DatastreamsEntity {\r\n    name: string;\r\n    ObservedProperty: ObservedProperty;\r\n}\r\ninterface ObservedProperty {\r\n    \"@iot.id\": string;\r\n}\r\ninterface LocationsEntity {\r\n    location: Location;\r\n}\r\ninterface Location {\r\n    type: string;\r\n    coordinates?: number[] | null;\r\n}\r\ninterface ObservationsEntity {\r\n    phenomenonTime: string;\r\n    result: number;\r\n}\r\n","import QueryBuilder from \"../QueryBuilder\";\r\nimport FrostFactory from \"../FrostFactory\";\r\nimport { Observation } from \"../../../Model/Observation\";\r\nimport ResultModelConverter from \"../ResultModelConverter\";\r\nimport { ObservationStation } from \"../../../Model/ObservationStation\";\r\nimport { Feature } from \"../../../Model/Feature\";\r\n\r\nexport class GetObservationsFactory extends FrostFactory<Observation[]> {\r\n    constructor() {\r\n        super(new GetObservationsConverter(), new GetObservationsBuilder());\r\n    }\r\n}\r\n\r\nexport class GetObservationsConverter\r\n    implements ResultModelConverter<Observation[]> {\r\n    public convert(\r\n        json: ResultList,\r\n        options: GetObservationsOptions\r\n    ): Observation[] {\r\n        if (json.value === null || json.value === undefined) {\r\n            throw new Error(\"nö\");\r\n        }\r\n        let observations: Observation[] = [];\r\n        json.value.forEach((stream) => {\r\n            if (\r\n                stream.Observations === null ||\r\n                stream.Observations === undefined\r\n            ) {\r\n                return;\r\n            }\r\n            stream.Observations.forEach((obs) => {\r\n                if (obs !== null) {\r\n                    observations.push(\r\n                        new Observation(\r\n                            options.station,\r\n                            options.feature,\r\n                            obs.result,\r\n                            new Date(obs.phenomenonTime)\r\n                        )\r\n                    );\r\n                }\r\n            });\r\n        });\r\n        return observations;\r\n    }\r\n}\r\n\r\nexport class GetObservationsBuilder implements QueryBuilder {\r\n    public getQuery(options: GetObservationsOptions): string {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport interface GetObservationsOptions {\r\n    station: ObservationStation;\r\n    feature: Feature;\r\n    start: Date;\r\n    end: Date;\r\n}\r\n\r\nexport interface ResultList {\r\n    value?: ValueEntity[] | null;\r\n}\r\nexport interface ValueEntity {\r\n    Observations?: (ObservationsEntity | null)[] | null;\r\n    \"@iot.id\": string;\r\n    \"Observations@iot.nextLink\"?: string | null;\r\n}\r\nexport interface ObservationsEntity {\r\n    phenomenonTime: string;\r\n    resultTime: string;\r\n    result: number;\r\n    parameters: Parameters;\r\n    \"@iot.id\": string;\r\n    \"@iot.selfLink\": string;\r\n}\r\nexport interface Parameters {\r\n    \"last calibration\": string;\r\n}\r\n","import { Feature } from \"../../Model/Feature\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport { Position } from \"../../Model/Position\";\r\nimport { Scale } from \"../../Model/Scale\";\r\nimport { Color } from \"../../Model/Color\";\r\nimport FeatureProvider from \"../FeatureProvider\";\r\nimport FrostServer from \"./FrostServer\";\r\nimport { GetStationFactory } from \"./factories/GetStation\";\r\nimport { FrostResult } from \"../../Model/FrostResult\";\r\nimport { GetObservationStationsFactory } from \"./factories/GetObservationStations\";\r\nimport { GetLatestObservationFactory } from \"./factories/GetLatestObservation\";\r\nimport { GetLatestObservationsFactory } from \"./factories/GetLatestObservations\";\r\nimport { GetObservationsFactory } from \"./factories/GetObservations\";\r\n\r\nexport default class DataProvider {\r\n    private static server: FrostServer = new FrostServer(\r\n        \"https://api.smartaq.net/v1.0/\"\r\n    );\r\n\r\n    static async getObservationStations(\r\n        middle: Position,\r\n        radius: number\r\n    ): Promise<ObservationStation[]> {\r\n        let fr: FrostResult<ObservationStation[]> = await this.server.request(\r\n            new GetObservationStationsFactory(),\r\n            {\r\n                middle,\r\n                radius,\r\n            }\r\n        );\r\n        let obsnull: ObservationStation[] | null = fr.getResult();\r\n        if (obsnull !== null) {\r\n            return obsnull;\r\n        }\r\n        alert(\"dp error\");\r\n        alert(fr.getMessage());\r\n        throw new Error(fr.getMessage());\r\n    }\r\n\r\n    static async getLatestObservation(\r\n        station: ObservationStation,\r\n        feature: Feature\r\n    ): Promise<Observation> {\r\n        let fr: FrostResult<Observation> = await this.server.request(\r\n            new GetLatestObservationFactory(),\r\n            { station, feature }\r\n        );\r\n        let obsnull: Observation | null = fr.getResult();\r\n        if (obsnull !== null) {\r\n            return obsnull;\r\n        }\r\n        throw new Error(\"nö\");\r\n    }\r\n\r\n    static async getStation(id: string): Promise<ObservationStation> {\r\n        let fr: FrostResult<ObservationStation> = await this.server.request(\r\n            new GetStationFactory(),\r\n            { id }\r\n        );\r\n        let obsnull: ObservationStation | null = fr.getResult();\r\n        if (obsnull !== null) {\r\n            return obsnull;\r\n        }\r\n        alert(\"dp error\");\r\n        throw new Error(\"nö\");\r\n    }\r\n\r\n    static async getLatestObservations(\r\n        center: Position,\r\n        radius: number,\r\n        feature: Feature\r\n    ): Promise<Observation[]> {\r\n        let fr: FrostResult<Observation[]> = await this.server.request(\r\n            new GetLatestObservationsFactory(),\r\n            {\r\n                center,\r\n                radius,\r\n                feature,\r\n            }\r\n        );\r\n        let obsnull: Observation[] | null = fr.getResult();\r\n        if (obsnull !== null) {\r\n            return obsnull;\r\n        }\r\n        alert(fr.getMessage() + \"dp spec\");\r\n        return [];\r\n    }\r\n\r\n    static async getObservations(\r\n        station: ObservationStation,\r\n        feature: Feature,\r\n        start: Date,\r\n        end: Date\r\n    ): Promise<Observation[]> {\r\n        let fr: FrostResult<Observation[]> = await this.server.request(\r\n            new GetObservationsFactory(),\r\n            {\r\n                station,\r\n                feature,\r\n                start,\r\n                end,\r\n            }\r\n        );\r\n        let obsnull: Observation[] | null = fr.getResult();\r\n        if (obsnull !== null) {\r\n            return obsnull;\r\n        }\r\n        alert(fr.getMessage() + \"dp spec\");\r\n        return [];\r\n    }\r\n}\r\n","import { Position } from './Position';\r\nimport { Feature } from './Feature';\r\nimport IDiagramController from '../Controller/DiagramController/DiagramController';\r\n\r\nexport class ObservationStation {\r\n    private id: string;\r\n    private name: string;\r\n    private description: string;\r\n    private position: Position;\r\n    private availableFeatures: Feature[];\r\n\r\n    constructor(id: string, name: string, description: string, position: Position, availableFeatures: Feature[]) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.position = position;\r\n        this.availableFeatures = availableFeatures;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getDescription(): string {\r\n        return this.description;\r\n    }\r\n\r\n    public getPosition(): Position {\r\n        return this.position;\r\n    }\r\n\r\n    public getFeatures(): Feature[] {\r\n        return this.availableFeatures;\r\n    }\r\n\r\n    public getDiagramController(): IDiagramController[] {\r\n        var diagramController: IDiagramController[] = [];\r\n\r\n        this.availableFeatures.forEach(feature => {\r\n            let featureDiagramControllerArray = feature.getDiagramController(this);\r\n            featureDiagramControllerArray.forEach(contr => {\r\n                diagramController.push(contr);\r\n            });\r\n        });\r\n\r\n        return diagramController;\r\n    }\r\n\r\n    public hasFeature(feature: Feature): boolean {\r\n        //Not sure if this works \r\n        var found: boolean = false;\r\n        var length: number = this.availableFeatures.length;\r\n        for (var counter: number = 0; counter < length; counter++) {\r\n            if (feature === this.availableFeatures[counter]) {\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n}","import { ObservationStation } from './ObservationStation';\nimport { Feature } from './Feature';\n\nexport class Observation {\n    private observationStation: ObservationStation;\n    private feature: Feature;\n    private value: number;\n    private timestamp: Date;\n\n    constructor(observationStation: ObservationStation, feature: Feature, value: number, timestamp: Date) {\n        this.observationStation = observationStation;\n        this.feature = feature;\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n\n    public getObservationStation(): ObservationStation {\n        return this.observationStation;\n    }\n\n    public getFeature(): Feature {\n        return this.feature;\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n\n    public getTimeStamp(): Date {\n        return this.timestamp;\n    }\n}","import { Color } from \"./Color\";\n\nexport class Scale {\n    private linearTransition: boolean;\n    private dict: { [key: number]: string };\n\n    constructor(linearTransition: boolean, colors: { [key: number]: string }) {\n        this.linearTransition = linearTransition;\n        this.dict = colors;\n        this.sortOnKeys();\n    }\n\n    getColor(value: number): Color {\n        var keys = Object.keys(this.dict);\n        if (keys.length === 0) {\n            //Empty Scale\n            return Color.getColorFromHex(\"#AAAAAA\");\n        }\n        for (let index = 0; index < keys.length - 1; index++) {\n            if (\n                Number(keys[index]) <= value &&\n                Number(keys[index + 1]) > value\n            ) {\n                if (this.linearTransition) {\n                    return this.getLinearTransition(index, value); //Interpolate values of this and next index\n                } else {\n                    return Color.getColorFromHex(\n                        (this.dict[Number(keys[index])] as unknown) as string\n                    ); //Get Hex-Color directly.\n                }\n            }\n        }\n        return Color.getColorFromHex(\n            (this.dict[Number(keys[keys.length - 1])] as unknown) as string\n        ); //If the value is higher than any in the list, return highest value color.\n    }\n\n    private sortOnKeys() {\n        //Sorts the dictionary by key value (ascending).\n        var keys = Object.keys(this.dict);\n        var numKeys: number[] = [];\n\n        for (let i = 0; i < keys.length; i++) {\n            numKeys.push(Number(keys[i]));\n        }\n\n        numKeys.sort();\n        var tempDict: { [key: number]: string } = {};\n        for (let i = 0; i < keys.length; i++) {\n            tempDict[numKeys[i]] = this.dict[numKeys[i]];\n        }\n        this.dict = tempDict;\n    }\n\n    private getLinearTransition(lowerIndex: number, value: number): Color {\n        var a = [Number(Object.keys(this.dict)[lowerIndex]), \"\"]; // lower value\n        a[1] = this.dict[a[0] as number]; //Hex-Color of lower value\n        var b = [Number(Object.keys(this.dict)[lowerIndex + 1]), \"\"]; //higher value\n        b[1] = this.dict[b[0] as number]; //Hex-Color of higher value\n        var colorA = Color.getColorFromHex(a[1] as string).getRGB();\n        var colorB = Color.getColorFromHex(b[1] as string).getRGB();\n\n        //Interpolate all RGB values for colors A and B at value\n        var resR = this.interpolate(\n            [a[0] as number, colorA.r],\n            [b[0] as number, colorB.r],\n            value\n        );\n        var resG = this.interpolate(\n            [a[0] as number, colorA.g],\n            [b[0] as number, colorB.g],\n            value\n        );\n        var resB = this.interpolate(\n            [a[0] as number, colorA.b],\n            [b[0] as number, colorB.b],\n            value\n        );\n\n        return new Color(resR, resG, resB); //Color constructor floors values, decimals are cut off.\n    }\n\n    private interpolate(\n        a: [number, number],\n        b: [number, number],\n        value: number\n    ): number {\n        var add = b[0] - a[0];\n        return (\n            a[1] * ((add - value + a[0]) / add) +\n            b[1] * ((add - b[0] + value) / add)\n        ); //Interpolate with values a[0] and b[0] and weights a[1] and b[1] at value.\n    }\n}\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\n\r\nimport ObservationStationProfile from \"./ObservationStationProfile\";\r\nimport LocationMap from \"./LocationMap\";\r\nimport Diagram from \"./Diagram\";\r\nimport DataProvider from \"../../Controller/FROST/DataProvider\";\r\n\r\nexport default class DetailPage extends React.Component<\r\n    IDetailPageProps,\r\n    IDetailPageState\r\n> {\r\n    constructor(props: IDetailPageProps) {\r\n        super(props);\r\n        this.state = { obs: null };\r\n        DataProvider.getStation(this.props.match.params.id).then((o) => {\r\n            this.setState({ obs: o });\r\n        });\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        main_container: {\r\n            paddingTop: \"20px\",\r\n        },\r\n    };\r\n\r\n    //return diagrams of this observation station\r\n    renderDiagrams() {\r\n        var diagramController = (this.state\r\n            .obs as ObservationStation).getDiagramController();\r\n        return diagramController.map((controller) => (\r\n            <Grid item xl={6} lg={6} md={6} sm={6} xs={6}>\r\n                <Diagram controller={controller} />\r\n            </Grid>\r\n        ));\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Grid container justify=\"center\">\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    spacing={4}\r\n                    xl={8}\r\n                    lg={8}\r\n                    md={8}\r\n                    sm={12}\r\n                    xs={12}\r\n                    style={this.styles.main_container}\r\n                >\r\n                    <Grid item xl={8} lg={8} md={8} sm={12} xs={12}>\r\n                        {this.state.obs ? (\r\n                            <ObservationStationProfile\r\n                                observationStation={this.state.obs}\r\n                            />\r\n                        ) : (\r\n                            <p>...</p>\r\n                        )}\r\n                    </Grid>\r\n                    <Hidden only={[\"sm\", \"xs\"]}>\r\n                        <Grid item xl={4} lg={4} md={4}>\r\n                            {this.state.obs ? (\r\n                                <LocationMap\r\n                                    position={this.state.obs.getPosition()}\r\n                                />\r\n                            ) : (\r\n                                <p>...</p>\r\n                            )}\r\n                        </Grid>\r\n                    </Hidden>\r\n                    {this.state.obs ? this.renderDiagrams() : <p>...</p>}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IDetailPageProps {\r\n    match: { params: { id: string } };\r\n}\r\n\r\ninterface IDetailPageState {\r\n    obs: ObservationStation | null;\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Card,\r\n    Typography,\r\n    Divider,\r\n    CardContent,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { ObservationStation } from \"../../Model/ObservationStation\";\r\nimport ObservationItem from \"./ObservationItem\";\r\nimport { Color } from \"../../Model/Color\";\r\nimport { Observation } from \"../../Model/Observation\";\r\nimport Language from \"../../Controller/Storage/Language\";\r\nimport DataProvider from \"../../Controller/FROST/DataProvider\";\r\n\r\nexport default class ObservationStationProfile extends React.Component<\r\n    IObservationStationProfileProps,\r\n    IObservationStationProfileState\r\n> {\r\n    languageProvider: Language;\r\n\r\n    constructor(props: IObservationStationProfileProps) {\r\n        super(props);\r\n        this.state = {\r\n            latestObservations: [],\r\n        };\r\n        this.languageProvider = Language.getInstance();\r\n        this.getLatestObservations().then((o) =>\r\n            this.setState({ latestObservations: o })\r\n        );\r\n    }\r\n\r\n    //styles for this component\r\n    styles = {\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n        section_1: {\r\n            padding: \"20px\",\r\n        },\r\n        section_2: {\r\n            padding: \"20px\",\r\n        },\r\n        feature_container: {\r\n            marginTop: \"20px\",\r\n        },\r\n    };\r\n\r\n    //colors that are asignable to the observation items icons\r\n    colors = [\r\n        \"#f44336\",\r\n        \"#e91e63\",\r\n        \"#9c27b0\",\r\n        \"#673ab7\",\r\n        \"#3f51b5\",\r\n        \"#2196f3\",\r\n        \"#00bcd4\",\r\n        \"#009688\",\r\n        \"#4caf50\",\r\n        \"#8bc34a\",\r\n        \"#cddc39\",\r\n        \"#ffeb3b\",\r\n        \"#ffc107\",\r\n        \"#ff9800\",\r\n        \"#ff5722\",\r\n        \"#795548\",\r\n        \"#9e9e9e\",\r\n        \"#607d8b\",\r\n    ];\r\n\r\n    //returns the latest observation for each feature of this observation station\r\n    private async getLatestObservations(): Promise<Observation[]> {\r\n        var features = this.props.observationStation.getFeatures();\r\n        var observations = new Array<Observation>();\r\n        var promises = [];\r\n\r\n        features.forEach((feature) => {\r\n            var observation = DataProvider.getLatestObservation(\r\n                this.props.observationStation,\r\n                feature\r\n            );\r\n            promises.push(observation);\r\n        });\r\n\r\n        return observations;\r\n    }\r\n\r\n    //returns a random color from the above ones\r\n    private getRandomColor() {\r\n        var randomNumber = Math.round(Math.random() * (this.colors.length - 1));\r\n        var color = this.colors[randomNumber];\r\n        this.colors.splice(randomNumber, 1);\r\n        return Color.getColorFromHex(color);\r\n    }\r\n\r\n    //returns JSX Elements for each latest observation\r\n    private renderLatestObservations() {\r\n        return this.state.latestObservations.map((observation) => (\r\n            <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\r\n                <ObservationItem\r\n                    color={this.getRandomColor()}\r\n                    observation={observation}\r\n                />\r\n            </Grid>\r\n        ));\r\n    }\r\n\r\n    //returns the timestamp of the latest observation as a readable string\r\n    private renderObservationDate() {\r\n        if (this.state.latestObservations.length !== 0) {\r\n            return this.languageProvider.getDateString(\r\n                this.state.latestObservations[0].getTimeStamp()\r\n            );\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    <div style={this.styles.section_1}>\r\n                        <Typography align=\"left\" variant=\"h4\" component=\"h2\">\r\n                            {this.props.observationStation.getName()}\r\n                        </Typography>\r\n                        <Typography\r\n                            align=\"left\"\r\n                            color=\"textSecondary\"\r\n                            component=\"p\"\r\n                            style={this.styles.pos}\r\n                        >\r\n                            {this.props.observationStation\r\n                                .getPosition()\r\n                                .getString()}\r\n                        </Typography>\r\n                        <Typography align=\"left\" variant=\"body2\" component=\"p\">\r\n                            {this.props.observationStation.getDescription()}\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider variant=\"middle\" />\r\n                    <div style={this.styles.section_2}>\r\n                        <Grid container alignItems=\"stretch\">\r\n                            <Grid item xs>\r\n                                <Typography align=\"left\" variant=\"subtitle1\">\r\n                                    {this.languageProvider.getText(\r\n                                        \"last_measurement\"\r\n                                    )}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography\r\n                                    color=\"textSecondary\"\r\n                                    variant=\"subtitle1\"\r\n                                >\r\n                                    {this.renderObservationDate()}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            style={this.styles.feature_container}\r\n                            spacing={2}\r\n                        >\r\n                            {this.renderLatestObservations()}\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationStationProfileProps {\r\n    observationStation: ObservationStation;\r\n}\r\n\r\ninterface IObservationStationProfileState {\r\n    latestObservations: Observation[];\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    Grid,\r\n    Avatar,\r\n    Typography,\r\n    CardContent,\r\n} from '@material-ui/core';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThermometerHalf } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { Color } from '../../Model/Color';\r\nimport { Observation } from '../../Model/Observation';\r\nimport { Feature } from '../../Model/Feature';\r\n\r\n\r\nexport default class ObservationItem extends React.Component<IObservationItemProps, IObservationItemState> {\r\n\r\n    styles = {\r\n        feature_card: {\r\n        },\r\n        card_content: {\r\n            padding: '10px',\r\n        },\r\n    };\r\n\r\n    constructor(props: IObservationItemProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={this.styles.feature_card} >\r\n                <CardContent style={this.styles.card_content}>\r\n                    <Grid container alignItems='center'>\r\n                        <Grid item xl={2} lg={2} md={2} sm={2} xs={2}>\r\n                            <Avatar style={{ backgroundColor: this.props.color.getHex() }}>\r\n                                <FontAwesomeIcon icon={faThermometerHalf} />\r\n                            </Avatar>\r\n                        </Grid>\r\n                        <Grid item xl={10} lg={10} md={10} sm={10} xs={10}>\r\n                            <Typography color='textSecondary'>{this.props.observation.getFeature().getName()}</Typography>\r\n                            <Typography variant='subtitle1'>{this.props.observation.getValue() + ' ' + this.props.observation.getFeature().getUnitOfMeasurement()}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IObservationItemProps {\r\n    color: Color;\r\n    observation: Observation;\r\n}\r\n\r\ninterface IObservationItemState { }","import React from 'react';\r\n\r\nimport { Card } from '@material-ui/core';\r\n\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport Leaflet from 'leaflet';\r\n\r\nimport { Position } from '../../Model/Position';\r\n\r\n\r\n\r\nexport default class LocationMap extends React.Component<ILocationMapProps, ILocationMapState> {\r\n\r\n    //zoom level of the map\r\n    private static readonly ZOOM_LEVEL = 20;\r\n\r\n    // server that provides tiles to render the map\r\n    private static readonly TILE_SERVER = 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\r\n    private static readonly TILE_SERVER_ATTRIBUTION = '&copy; <a href=\"https://www..org/copyright\">OpenStreetMap</a>';\r\n\r\n    // custom icon to show position\r\n    private static readonly MARKER_ICON_PATH = './marker_icon.svg'; //path to the icon image\r\n    private static readonly MARKER_ICON_SIZE = 48; //width and height of the marker icon\r\n\r\n    static MARKER_ICON = new Leaflet.Icon({\r\n        iconUrl: require('' + LocationMap.MARKER_ICON_PATH),\r\n        iconSize: [LocationMap.MARKER_ICON_SIZE, LocationMap.MARKER_ICON_SIZE], // size of the icon\r\n        iconAnchor: [LocationMap.MARKER_ICON_SIZE / 2, LocationMap.MARKER_ICON_SIZE], // point of the icon which will correspond to marker's location\r\n    });\r\n\r\n    constructor(props: ILocationMapProps) {\r\n        super(props);\r\n    }\r\n\r\n    // custom css styles\r\n    styles = {\r\n        map: {\r\n            height: '300px',\r\n        },\r\n    }\r\n\r\n    //render component as JSX.Element\r\n    render() {\r\n        var position = new Leaflet.LatLng(this.props.position.getLatitude(), this.props.position.getLongitude());\r\n        return (\r\n            <Card>\r\n                <Map\r\n                    center={position} //center map to the required position\r\n                    zoom={LocationMap.ZOOM_LEVEL} //set zoom\r\n                    style={this.styles.map} //provide custom styles\r\n\r\n                    // diable zooming via mouse and keyboard and disable dragging\r\n                    scrollWheelZoom={false}\r\n                    dragging={false}\r\n                    keyboard={false}\r\n                    doubleClickZoom={false}\r\n                >\r\n                    <TileLayer\r\n                        url={LocationMap.TILE_SERVER}\r\n                        attribution={LocationMap.TILE_SERVER_ATTRIBUTION}\r\n                    />\r\n                    <Marker\r\n                        position={position}\r\n                        icon={LocationMap.MARKER_ICON}\r\n                    />\r\n                </Map>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\ninterface ILocationMapProps {\r\n    position: Position;\r\n}\r\n\r\ninterface ILocationMapState {\r\n}","import React from 'react';\r\nimport { Card, Divider, Typography, Grid, CircularProgress, Select, MenuItem, } from '@material-ui/core';\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport IDiagramController from '../../Controller/DiagramController/DiagramController';\r\n\r\nexport default class Diagram extends React.Component<IDiagramProps, IDiagramState> {\r\n    //controller for this diagram\r\n    controller: IDiagramController;\r\n\r\n    constructor(props: IDiagramProps) {\r\n        super(props);\r\n        this.controller = this.props.controller;\r\n\r\n        //setup default configuration in state\r\n        this.state = {\r\n            configurationOption: this.controller.getDefaultConfigurationOption(),\r\n        }\r\n\r\n        this.handleConfigurationChange = this.handleConfigurationChange.bind(this);\r\n    }\r\n\r\n    //styles of this component\r\n    styles = {\r\n        header: {\r\n            padding: '10px',\r\n            paddingLeft: '40px',\r\n        },\r\n        diagram: {\r\n            width: '100%',\r\n            height: '350px',\r\n        },\r\n    };\r\n\r\n    //change configuration in state\r\n    handleConfigurationChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n        this.setState({\r\n            configurationOption: (event.target.value as string),\r\n        });\r\n    }\r\n\r\n    //return configuration options as menu items\r\n    renderConfigurationOptions() {\r\n        var configurationOptions = this.controller.getConfigurationOptions();\r\n        return (\r\n            configurationOptions.map((option) =>\r\n                <MenuItem value={option}>{option}</MenuItem>\r\n            )\r\n        );\r\n    }\r\n\r\n    //renders the configuration form of this diagram\r\n    renderDiagramConfiguration() {\r\n        //if configuration is enabled return slect form with configuration options\r\n        if (this.controller.isConfigurable()) {\r\n            return (\r\n                <Grid item>\r\n                    <Select\r\n                        value={this.state.configurationOption}\r\n                        onChange={this.handleConfigurationChange}\r\n                    >\r\n                        {this.renderConfigurationOptions()}\r\n                    </Select>\r\n                </Grid>\r\n            );\r\n            //not configurable return empty string\r\n        } else return ('');\r\n    }\r\n\r\n    //render component\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <div style={this.styles.header}>\r\n                    <Grid container justify='space-between' alignItems='center'>\r\n                        <Grid item>\r\n                            <Typography variant='subtitle1'>{this.controller.feature.getName()}</Typography>\r\n                        </Grid>\r\n                        {this.renderDiagramConfiguration()}\r\n                    </Grid>\r\n                </div>\r\n                <Divider />\r\n                <Chart\r\n                    width={this.styles.diagram.width}\r\n                    height={this.styles.diagram.height}\r\n                    chartType={this.controller.getChartType()}\r\n                    options={this.controller.getGraphicsOptions()}\r\n                    loader={\r\n                        <Grid container justify='center' alignContent='center' style={this.styles.diagram}>\r\n                            <CircularProgress />\r\n                        </Grid>\r\n                    }\r\n                    data={this.controller.getData(this.state.configurationOption)}\r\n                />\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport interface IDiagramProps {\r\n    controller: IDiagramController;\r\n}\r\n\r\ninterface IDiagramState {\r\n    configurationOption: string;\r\n}"],"sourceRoot":""}